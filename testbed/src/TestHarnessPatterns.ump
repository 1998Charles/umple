
namespace cruise.patterns.test;

class WidgetA
{
  id;
  Integer intId;
  Double doubleId;
  Boolean boolId;
  Date dateId;
  WidgetB widgetId;
  ignore;
  
  key { id, intId, doubleId, boolId, dateId, widgetId }
}

class WidgetB
{
  1 -> 0..10 WidgetImmutableB;
}

class WidgetC
{
  id;
  key {id}
}

class WidgetD
{
  
  id;
  String[] logs;
  
  before setId { addLog("before setId:" + id); } 
  after setId { addLog("after setId:" + id); }
  before getId { addLog("before getId"); } 
  after getId { addLog("after getId"); }
}

class WidgetE
{
  
  String[] ids;
  String[] logs;
  
  before addId { addLog("before addId:" + numberOfIds()); } 
  after addId { addLog("after addId:" + numberOfIds()); }
  before removeId { addLog("before removeId:" + numberOfIds()); } 
  after removeId { addLog("after removeId:" + numberOfIds()); }
  before indexOfId { addLog("before indexOfId"); } 
  after indexOfId { addLog("after indexOfId"); }
  before getId { addLog("before getId"); } 
  after getId { addLog("after getId"); }
  before getIds { addLog("before getIds"); } 
  after getIds { addLog("after getIds"); }

}

class WidgetF
{
  String[] ids;
  String[] logs;
  
  before numberOfIds { addLog("before numberOfIds"); } 
  after numberOfIds { addLog("after numberOfIds"); }
}


class WidgetImmutableA
{
  immutable;

  String name;
  1 -> 1 WidgetImmutableB;
}

class WidgetImmutableB
{
  immutable;
  String name;
}

class WidgetSubclass
{
  isA WidgetImmutableB;
  String type;
  1 -> 0..2 WidgetImmutableB;
}



class ClassMany
{
  immutable;
  2 -> * ClassOtherclass;
}

class ClassMToN
{
  immutable;
  1 -> 2..3 ClassOtherclass;
}

class ClassMStar
{
 immutable;
  1 -> 2..* ClassOtherclass;
}

class ClassN
{
  immutable;
  2 -> 2 ClassOtherclass;
}

class ClassOne
{
  immutable;
  0..1 -> 1 ClassOtherclass;
}

class ClassOptionalN
{
  immutable;
  2 -> 0..2 ClassOtherclass;
}

class ClassOptionalOne
{
  immutable;
  2 -> 0..1 ClassOtherclass;
}

class ClassOtherclass
{
  immutable;
  name;
}

