namespace cruise.umple.testgenerator;

class Util{

depend java.util.Random;
depend java.lang.reflect.Method;
depend cruise.umple.testparser.TestParser;
depend  java.io.File;
depend java.util.List;

		

Random random = new Random ();

//------------------------
// Random String Generator 
//------------------------ 
public String randomGenerator (Random random, String characters, int length)
{
	
	char[] text = new char[length];
    for (int i = 0; i < length; i++)
    {
        text[i] = characters.charAt(random.nextInt(characters.length()));
    }
    return new String(text);
}

//------------------------
// Random Int Generator 
//------------------------
public int randomGenerator (int range)
{
	int text = random.nextInt(range);
	  	
	return text;
}

//-----------------------------
// Test Runner Template/Methods
//-----------------------------

public void writeTestRunnerFiles (String path , List<String> classes ) {
	  String testrunnerFileName = "TestRunner";
	  File file  = new File(path+testrunnerFileName);
	  StringBuilder br = new StringBuilder();
	  StringBuilder sb = new StringBuilder();
	  sb .append("");
	  sb.append(getTestRunnerTemplateCode (classes));
	  
  }
  
   emit getTestRunnerTemplateCode (List<String> classes) (TestRunnerGenerator);
   TestRunnerGenerator <<!<<# 
   String classesCode = "";
   
   for (int x = 0; x < classes.size(); x++)
   {
      if (x == 0)
       {classesCode+= classes.get(x)+".class";}
       else 
       {classesCode+=", " +classes.get(x)+".class";}   
   }
   
   #>> 
	import java.io.File;
	import org.junit.After;
	import org.junit.Assert;
	import org.junit.Before;
	import org.junit.Test;
	import org.junit.internal.TextListener;
	import org.junit.runner.JUnitCore;
	import org.junit.runner.Result;  
    
    public class TestRunner {
    
     public static void main (String[] args)
     JUnitCore  junit = new JUnitCore();
     junit.addListener(new TextListener(System.out));
     Result result = junit.run(<<=classesCode>>);
     
     resultReport(result);
    }
    
    public static void resultReport(Result result) {
		    System.out.println("Finished. Result: Failures: " +
		      result.getFailureCount() + ". Ignored: " +
		      result.getIgnoreCount() + ". Tests run: " +
		      result.getRunCount() + ". Time: " +
		      result.getRunTime() + "ms.");
		}
    
    }
  !>>

//------------------------
// AssertMethod // check if a method is present in a class using reflection, example: assertMethod(foo.class, "methodName") 
//------------------------

public Boolean assertMethod (Class cls, String methodName)
    {
    	Boolean hasMethod = false;
    	Method[] methods = cls.getMethods();
    	for (Method m : methods )
    	{
    		if ( m.getName() == methodName)
    		{ hasMethod = true; }
    	}
    	return hasMethod;    	
    }

 public TestModel createUmpleTestSystem(String path, String filename,String lang)
   {
	  
	   
	   

	 String language =lang;
     //File file = new File(pathToInput+"/" + path, filename);
     File file = new File(path+filename);
     String grName = "";
     TestModel aTestModel = new TestModel(null, null, null, null, null,null, null, language);
     TestParser parser = new TestParser(null, "", file, 0);
     //ParseResult result = new ParseResult(false);
     //InputStream is = this.getClass().getResourceAsStream("mbt_parsing.grammar");
     //ClassLoader classLoader = getClass().getClassLoader();
     //File grammarFile = new File(classLoader.getResource("mbt_parsing.grammar").getFile());
     ////system.out.println(grammarFile.tos);
     //parser.setGrammarFile(path+"src/ump/mbt_parsing.grammar");
     //InputStream in = getClass().getResourceAsStream("/mbt_parsing.grammar"); 
     //BufferedReader reader = new BufferedReader(new InputStreamReader(in));
     //File grFile = new File (getClass().getResource("mbt_parsing.grammar").getPath().replace("file:", ""));
     //File grFile = new File ();
     //grName = file.getName();
     
     //grName = getClass().getResource("mbt_parsing.grammar").getFile();
     ////system.out.println(Util.class.getResource("mbt_parsing.grammar").getFile());
     //parser.setGrammarFile(Util.class.getResource("mbt_parsing.grammar").getFile().toString());
     ////system.out.println(parser.getGrammarFile());
     parser.setTestModelFile(file);
     //parser.setTestModelFile(file);
     
     
     ////system.out.println(path);
     parser.prepare();
     aTestModel = parser.getATestModel();
     //system.out.println(file.getAbsoluteFile());
     aTestModel.setCodeLang(language);
     //system.out.println(aTestModel.getCodeLang());
     if(aTestModel.getCodeLang().equals("JUnit"))
     {
     
     //language = lang;
     TestCaseJUnitGenerator junitGenerator = new TestCaseJUnitGenerator(null, null, null, null, null);
	     junitGenerator.setTestModel(aTestModel);
	     junitGenerator.setPath(path);
	     junitGenerator.writeFile();
     }
     if(aTestModel.getCodeLang().equals("PhpUnit"))
     {
     	TestCasePhpUnitGenerator phpGenerator = new TestCasePhpUnitGenerator(null, null, null, null, null); 
         phpGenerator.setTestModel(aTestModel);
         phpGenerator.setPath(path);
         phpGenerator.writeFile();
   }
     if(aTestModel.getCodeLang().equals("RubyUnit"))
     {
     	TestCaseRubyUnitGenerator rubyGenerator = new TestCaseRubyUnitGenerator(null, null, null, null, null); 
         rubyGenerator.setTestModel(aTestModel);
         rubyGenerator.setPath(path);
         rubyGenerator.writeFile();
     }
     
     
     
     return aTestModel;
   }




}
