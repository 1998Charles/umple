/*
Preliminary version of "quick build" (i.e. ant -Dmyenv=local -f build.umple.xml codegen umpleParser rtcpp umpleSelf compile packageJars). Produces an umple compiler jar
called GradleUmpleJar 

Execute the build using the following Gradle command: 
gradle cleanUp generateAndCompileParser generateCoupledSource compileCoupledSourceJava packageSource packageUmpleCompilerJar -rerun-tasks

These tasks can be combined to make the command shorter. The 'rerun-tasks' is required because incremental builds aren't working correctly yet.

The sub projects that need to be built and generated to create the Umple compiler jar are all UmpleTo__ projects, UmpleParser, and cruise.umple
Each gets its own build file. Ideally, we would generate and compile each project individually. However, currently cruise.umple and the UmpleToTL projects
are too tightly coupled to be built independently, so we build them as a unit in the generateCoupledSource task
*/

buildscript {
    repositories {
        maven {
            url uri('dist')
        }
        //maven {
          //  url "https://plugins.gradle.org/m2/"
        //}
        flatDir dirs: "../umple.gradle/build/libs" //TODO use the plugin portal version once it's finalized
        mavenCentral()
    }
    dependencies {
        classpath files('libs/umple.jar')
        classpath "umple.gradle.plugin:UmpleGradlePlugin-0.2.0"
        classpath group: 'com.google.guava', name: 'guava', version: '19.0'
    }
}

// The root project uses source sets, but it's only in the 
// subprojects that compileUmple is actually called
apply plugin: 'java'

subprojects{
    apply plugin: "umple.gradle.plugin"
    evaluationDependsOn(":${project.name}")
    def fromPath = "${projectDir.toString()}/${project.property('umpleOutputDir')}"
    def intoPath = "${rootProject.projectDir.toString()}/dist/gradle/src-gen/${project.name}/"
    task "copyUmpleOutput" (type: Copy) {
        from fromPath
        into intoPath
        duplicatesStrategy = 'warn'
        exclude "**/.git*", "**/UmpleTo*.java"
        doFirst {
            println("Copying from ${fromPath} to ${intoPath}")
            inputs.sourceFiles.stopExecutionIfEmpty()
        }
    }
    tasks.getByPath("compileUmple").finalizedBy tasks.getByPath("copyUmpleOutput") 
}

task cleanUp << {
    delete "dist/gradle"
}

task generateAndCompileParser << {
    println("Finished generating and compiling UmpleParser")
}

generateAndCompileParser.dependsOn(':UmpleParser:compileJava')

// See ivy.xml for which third-party libraries are required by the various flavours of Umple build
configurations {
    ivy
}

dependencies {
    ivy group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '4.4' // "core"
    ivy group: 'org.apache.ant', name: 'ant', version: '1.9.6' // "core"
    ivy group: 'junit', name: 'junit', version: '4.12' // "test"
} 

repositories {
    mavenCentral()
}

sourceSets {
    coupledSource {
        compileClasspath += configurations.ivy // add the ivy dependencies to the classpath before compilation (required by cruise.umple)
        sourceSets.coupledSource.compileClasspath += project.files('dist/gradle/bin')
        //The folders that need to be compiled and then included in the Umple compiler jar (all but the jopt folder have been populated by earlier build steps)
        java.srcDirs = ['dist/gradle/src-gen', 'dist/libs/vendors/jopt-simple/src/main/java/joptsimple']
        output.classesDir = 'dist/gradle/bin'
    }
}

task packageUmpleCompilerJar(type: Jar) << {
    println("Compiling umplegradle.jar...")
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF', "**/.git", "**/.ump",  "**/data"
    from 'dist/gradle/bin'
    baseName 'umplegradle'
    // into('lib') {
	//	from configurations.ivy
	// }
    manifest {
        attributes 'Main-Class': 'cruise.umple.UmpleConsoleMain',
                   'Class-Path': configurations.ivy,
                   'Built-By': 'Cruise - University of Ottawa'        
    }
}

// grammar and error files also need to be included in the Umple jar
task copyDocs(type: Copy) << {
    println("Copying .grammar and .error files required by Umple compiler jar")
    from "cruise.umple/src"
    into 'dist/gradle/bin'
    include '**/*.grammar'
    include '**/*.error'
}

packageUmpleCompilerJar.dependsOn('copyDocs')

task qaBuildingPage << {
    println("TODO")
}

task buildSandbox << {
    println("TODO")
}

task buildUmple << {
    println("TODO")
}

task buildEclipsePlugin << {
    println("TODO")
}

task buildUmplificatorEclipsePlugin << {
    println("TODO")
}

task buildTestUnitGeneratorAndParser << {
    println("TODO")
}

task buildJavaTestbed << {
    println("TODO")
}

task testingUmpleOnlineExamplesAndManualExamples << {
    println("TODO")
}

task resetUmpleSelf << {
    println("Finished generating coupled source (all UmpleToTL projects and cruise.umple)")
}

resetUmpleSelf.dependsOn(':cruise.umple:compileUmple', ':cruise.umple.validator:compileUmple', ':cruise.umplificator:compileUmple')

task codeGen << {
    println("Finished code gen")
}

codeGen.dependsOn(
    ":UmpleToJava:compileUmple",
    ":UmpleToRTCpp:compileUmple",
    ":UmpleToPhp:compileUmple",
    ":UmpleToRuby:compileUmple",
    ":UmpleToSql:compileUmple",
    ":UmpleToTest:compileUmple")

task umpleParser << {
    println("Finished umple parser")
}

umpleParser.dependsOn(":UmpleParser:compileUmple")

task rtcpp(type: Copy) << {
    println("Running rtcpp")
    from "cruise.umple.nebula/src", "UmpleToRTCpp/src"
    into 'dist/gradle/rtcpp'
    exclude ".git*"
}

task compile(type: JavaCompile) {
    options.fork = true
    classpath = files('dist/gradle/bin', configurations.ivy)
    destinationDir = file('dist/gradle/bin')
    source 'dist/gradle/src-gen'
    exclude '**/*.ump', '**/.git*', '**/UmpleParser', '**/cruise.umplificator', '**/cruise.umple.validator' // TODO
}

task quickbuild {
    dependsOn 'cleanUp'
    dependsOn 'resetUmpleSelf'
    dependsOn 'compileCoupledSourceJava'
    dependsOn 'packageUmpleCompilerJar'
    tasks.findByName('resetUmpleSelf').mustRunAfter 'cleanUp'
    tasks.findByName('compileCoupledSourceJava').mustRunAfter 'resetUmpleSelf'
    tasks.findByName('packageUmpleCompilerJar').mustRunAfter 'compileCoupledSourceJava'
}

task firstbuild {
    dependsOn 'cleanUp'
    dependsOn 'codeGen'
    dependsOn 'umpleParser'
    dependsOn 'rtcpp'
    dependsOn 'resetUmpleSelf'
    dependsOn 'compile'
    dependsOn 'packageUmpleCompilerJar'
    tasks.findByName('codeGen').mustRunAfter 'cleanUp'
    tasks.findByName('buildSandbox').mustRunAfter 'codeGen'
    tasks.findByName('umpleParser').mustRunAfter 'buildSandbox'
    tasks.findByName('rtcpp').mustRunAfter 'umpleParser'
    tasks.findByName('resetUmpleSelf').mustRunAfter 'rtcpp'
    tasks.findByName('compile').mustRunAfter 'resetUmpleSelf'
    tasks.findByName('packageUmpleCompilerJar').mustRunAfter 'compile'
}

task fullbuild {
    dependsOn 'cleanUp'
    dependsOn 'qaBuildingPage'
    dependsOn 'buildSandbox'
    dependsOn 'buildUmple'
    dependsOn 'buildEclipsePlugin'
    dependsOn 'buildUmplificatorEclipsePlugin'
    dependsOn 'buildTestUnitGeneratorAndParser'
    dependsOn 'buildJavaTestbed'
    dependsOn 'testingUmpleOnlineExamplesAndManualExamples'
    tasks.findByName('qaBuildingPage').mustRunAfter 'cleanUp'
    tasks.findByName('buildSandbox').mustRunAfter 'qaBuildingPage'
    tasks.findByName('buildUmple').mustRunAfter 'buildSandbox'
    tasks.findByName('buildEclipsePlugin').mustRunAfter 'buildUmple'
    tasks.findByName('buildUmplificatorEclipsePlugin').mustRunAfter 'buildEclipsePlugin'
    tasks.findByName('buildTestUnitGeneratorAndParser').mustRunAfter 'buildUmplificatorEclipsePlugin'
    tasks.findByName('buildJavaTestbed').mustRunAfter 'buildTestUnitGeneratorAndParser'
    tasks.findByName('testingUmpleOnlineExamplesAndManualExamples').mustRunAfter 'buildJavaTestbed'
}
