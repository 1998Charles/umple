// =======================================
//  Miscellaneous root project properties
// =======================================
ext {
    latestVersion = null
    umpleVersionFile = new File("build/umpleversion.last.txt")
    umpleLatestPrefix = "dist/umple-"
    umpleJarRemoteSource = "http://cruise.eecs.uottawa.ca/umpleonline/scripts/umple.jar"
    umpleJarRemoteFile = "libs/umple-latest.jar"
    generatedBaseDir = "dist/gradle/src-gen"
    classfileOutputDir = "dist/gradle/bin"
}

// For the time being, we may want to keep the build directory separate
// from the current one that's being used until this project overtakes
// the ant build system
buildDir  = 'dist/gradle/'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:3.2.0'
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.19'
    }
}

// ===================
//  Umple compilation
// ===================
// Try to load the latest version from the build directory
if (rootProject.ext.umpleVersionFile.exists()) {
    try {
        rootProject.ext.latestVersion = new org.yaml.snakeyaml.Yaml().load(rootProject.ext.umpleVersionFile.newInputStream()).version
    }
    catch (Exception e) {
        e.printStackTrace()
    }
}

// Download task for updating Umple jar
apply plugin: 'de.undercouch.download'

// TODO: this logic should eventually be outsourced to the plugin, but for completeness
// we keep track of it here
task downloadUmpleJar(type: de.undercouch.gradle.tasks.download.Download) {
    onlyIfNewer true
    overwrite true
    src rootProject.ext.umpleJarRemoteSource
    dest rootProject.ext.umpleJarRemoteFile
}

// TODO: access the jar file directly in a fashion similar to the plugin
// ideally the plugin should support local jar files too
// Execute Umple jar
static void runUmpleJar(final String umpleJar, final String masterFile) {
    println("java -jar " + umpleJar + " " + masterFile)
    def proc = ("java -jar " + umpleJar + " " + masterFile).execute();
    proc.waitForProcessOutput(System.out, System.err);
}

subprojects{
    // Make sure we load all the subproject properties first
    evaluationDependsOn(":${project.name}")

    // Clean up task
    task "cleanUp" << {
        delete project.ext.umpleOutputDir
    }

    def masterFile = "${projectDir.toString()}/${project.ext.masterFile}"

    // Compile task using remote jar
    task "compileUmple" << {
        runUmpleJar(rootProject.ext.umpleJarRemoteFile, masterFile)
    }
    compileUmple.dependsOn(":downloadUmpleJar")

    // Compile task using local jar, or fallback to remote
    task "compileUmpleSelf" << {
        def jarBuiltHere = rootProject.ext.umpleLatestPrefix + rootProject.ext.latestVersion + ".jar"
        if (new File(jarBuiltHere).exists()) {
            runUmpleJar(rootProject.ext.umpleLatestPrefix + rootProject.ext.latestVersion + ".jar",
            masterFile)
        } else {
            // Still default to using the stable downloaded jar
            runUmpleJar(rootProject.ext.umpleJarRemoteFile, masterFile)
        }
    }
    compileUmpleSelf.dependsOn(":downloadUmpleJar")

    // Copy task for parent project
    def fromPath = "${projectDir.toString()}/${project.ext.umpleOutputDir}"
    def intoPath = "${rootProject.projectDir.toString()}/dist/gradle/src-gen/${project.name}/"
    task "copyUmpleOutput" (type: Copy) {
        from fromPath
        into intoPath
        duplicatesStrategy = 'warn'
        exclude "**/.git*", "**/UmpleTo*.java"
        doFirst {
            println("Copying from ${fromPath} to ${intoPath}")
            inputs.sourceFiles.stopExecutionIfEmpty()
        }
    }
    tasks.getByPath("compileUmple").finalizedBy tasks.getByPath("copyUmpleOutput")
    tasks.getByPath("compileUmpleSelf").finalizedBy tasks.getByPath("copyUmpleOutput")
}

// Clean up task
task cleanUp << {
    delete "dist/gradle"
}

// Delete only cruise umple components
task cleanUpUmple {
    delete "dist/gradle/src-gen/cruise.umple"
    delete "dist/gradle/src-gen/cruise.umple.validator"
    delete "dist/gradle/src-gen/cruise.umplificator"
}

// ==================
//  Java compilation
// ==================

apply plugin: 'java'

// See ivy.xml for which third-party libraries are required by the various flavours of Umple build
configurations {
    ivy
}

dependencies {
    ivy group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '4.4' // "core"
    ivy group: 'org.apache.ant', name: 'ant', version: '1.9.6' // "core"
    ivy group: 'junit', name: 'junit', version: '4.12' // "test"
} 

repositories {
    mavenCentral()
}

// Compiles the generated Java files
task compile(type: JavaCompile) {
    options.fork = true
    classpath = files(rootProject.ext.classfileOutputDir, configurations.ivy)
    destinationDir = file(rootProject.ext.classfileOutputDir)
    source rootProject.ext.generatedBaseDir
    source 'dist/libs/vendors/jopt-simple/src/main/java/joptsimple'
    exclude '**/*.ump', '**/.git*', '**/UmpleParser', '**/cruise.umplificator', '**/cruise.umple.validator' // TODO
}

// ===============
//  Jar packaging
// ===============

// Grammar and error files also need to be included in the Umple jar
task copyDocs(type: Copy) {
    from "cruise.umple/src"
    into rootProject.ext.classfileOutputDir
    include '*.grammar'
    include '*.error'
    doFirst {
            println("Copying .grammar and .error files from cruise.umple/src to ${rootProject.ext.classfileOutputDir}")
            inputs.sourceFiles.stopExecutionIfEmpty()
    }
}

// Task for generating the jar file
task packageUmple(type: Jar) {
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF', "**/.git", "**/.ump",  "**/data"
    from rootProject.ext.classfileOutputDir
    // Set the base name -- the jar will be compiled to "${buildDir}/libs/${archivesBaseName}.jar"
    archivesBaseName = 'umplegradle'
    manifest {
        attributes 'Main-Class': 'cruise.umple.UmpleConsoleMain',
                   'Class-Path': configurations.ivy,
                   'Built-By': 'Cruise - University of Ottawa'        
    }
    doFirst {
        println("Compiling umplegradle.jar using " + rootProject.ext.classfileOutputDir)
    }
    dependsOn 'copyDocs'
}

// ============
//  TODO Items
// ============

task qaBuildingPage << { println("TODO") }
task buildSandbox << { println("TODO") }
task buildUmple << { println("TODO") }
task buildEclipsePlugin << { println("TODO") }
task buildUmplificatorEclipsePlugin << { println("TODO") }
task buildTestUnitGeneratorAndParser << { println("TODO") }
task buildJavaTestbed << { println("TODO") }
task testingUmpleOnlineExamplesAndManualExamples << { println("TODO") }

// =======
//  Build
// =======

// Builds self using the remote jar
task resetUmpleSelf {
    dependsOn ':cruise.umple:compileUmple'
    dependsOn ':cruise.umple.validator:compileUmple'
    dependsOn ':cruise.umplificator:compileUmple'
}

// Generates template code by first attempting to use
// the latest local jar, or else the remote jar
task codeGen {
    dependsOn ":UmpleToJava:compileUmpleSelf"
    dependsOn ":UmpleToRTCpp:compileUmpleSelf"
    dependsOn ":UmpleToPhp:compileUmpleSelf"
    dependsOn ":UmpleToRuby:compileUmpleSelf"
    dependsOn ":UmpleToSql:compileUmpleSelf"
    dependsOn ":UmpleToTest:compileUmpleSelf"
}

// Compiles the parser to Java
task umpleParser {
    dependsOn ":UmpleParser:compileUmple"
}

// Copies libraries for RTCpp
task rtcpp(type: Copy) {
    from "cruise.umple.nebula/src", "UmpleToRTCpp/src"
    into 'dist/gradle/rtcpp'
    exclude ".git*"
}

// =========
//  Presets
// =========

// Executes a quick build
task quickbuild {
    dependsOn 'cleanUpUmple'
    dependsOn 'resetUmpleSelf'
    dependsOn 'compile'
    dependsOn 'packageUmple'
    tasks.findByName('resetUmpleSelf').mustRunAfter 'cleanUp'
    tasks.findByName('compile').mustRunAfter 'resetUmpleSelf'
    tasks.findByName('packageUmple').mustRunAfter 'compile'
}

// Executes a first build
task firstbuild {
    dependsOn 'cleanUp'
    dependsOn 'codeGen'
    dependsOn 'umpleParser'
    dependsOn 'rtcpp'
    dependsOn 'resetUmpleSelf'
    dependsOn 'compile'
    dependsOn 'packageUmple'
    tasks.findByName('codeGen').mustRunAfter 'cleanUp'
    tasks.findByName('buildSandbox').mustRunAfter 'codeGen'
    tasks.findByName('umpleParser').mustRunAfter 'buildSandbox'
    tasks.findByName('rtcpp').mustRunAfter 'umpleParser'
    tasks.findByName('resetUmpleSelf').mustRunAfter 'rtcpp'
    tasks.findByName('compile').mustRunAfter 'resetUmpleSelf'
    tasks.findByName('packageUmple').mustRunAfter 'compile'
}

// Executes a full build
// TODO
task fullbuild {
    dependsOn 'cleanUp'
    dependsOn 'qaBuildingPage'
    dependsOn 'buildSandbox'
    dependsOn 'buildUmple'
    dependsOn 'buildEclipsePlugin'
    dependsOn 'buildUmplificatorEclipsePlugin'
    dependsOn 'buildTestUnitGeneratorAndParser'
    dependsOn 'buildJavaTestbed'
    dependsOn 'testingUmpleOnlineExamplesAndManualExamples'
    tasks.findByName('qaBuildingPage').mustRunAfter 'cleanUp'
    tasks.findByName('buildSandbox').mustRunAfter 'qaBuildingPage'
    tasks.findByName('buildUmple').mustRunAfter 'buildSandbox'
    tasks.findByName('buildEclipsePlugin').mustRunAfter 'buildUmple'
    tasks.findByName('buildUmplificatorEclipsePlugin').mustRunAfter 'buildEclipsePlugin'
    tasks.findByName('buildTestUnitGeneratorAndParser').mustRunAfter 'buildUmplificatorEclipsePlugin'
    tasks.findByName('buildJavaTestbed').mustRunAfter 'buildTestUnitGeneratorAndParser'
    tasks.findByName('testingUmpleOnlineExamplesAndManualExamples').mustRunAfter 'buildJavaTestbed'
}
