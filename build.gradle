// =======================================
//  Miscellaneous root project properties
// =======================================

buildscript {
    dependencies {
        classpath 'de.undercouch:gradle-download-task:3.2.0'
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.19'
    }
}

plugins {
  id 'org.ajoberstar.grgit' version '3.0.0'
}

ext {
    umpleVersionFullFile = new File("${rootProject.projectDir.toString()}/build/umpleversion.last.txt")
    umpleVersionFile = new File("${rootProject.projectDir.toString()}/build/umpleversion.txt")
    // Try to load the latest version from the build directory
    umpleVersionFull = new org.yaml.snakeyaml.Yaml().load(rootProject.ext.umpleVersionFullFile.newInputStream()).version
    umpleVersion = new org.yaml.snakeyaml.Yaml().load(rootProject.ext.umpleVersionFile.newInputStream()).version
    umpleLatestVersion = "${rootProject.ext.umpleVersion}.${grgit.log().size()}.${grgit.head().getAbbreviatedId(9)}"
    umpleLatestJarBase = "umple-${rootProject.ext.umpleLatestVersion}"
    umpleLatestJar = "${rootProject.projectDir.toString()}/dist/gradle/libs/${rootProject.ext.umpleLatestJarBase}.jar"
    umpleJarRemoteSource = "http://cruise.eecs.uottawa.ca/umpleonline/scripts/umple.jar"
    umpleJarRemoteFile = "${rootProject.projectDir.toString()}/libs/umple-latest.jar"
    generatedBaseDir = "${rootProject.projectDir.toString()}/dist/gradle/src-gen"
    testBaseDir = "${rootProject.projectDir.toString()}/dist/gradle/test"
    classfileOutputDir = "${rootProject.projectDir.toString()}/dist/gradle/bin"
    testClassfileOutputDir = "${rootProject.projectDir.toString()}/dist/gradle/test/bin"
    manualDependencyRemotePath = "http://ftp.acc.umu.se/mirror/eclipse.org/tools/cdt/releases/kepler/sr1/plugins/org.eclipse.cdt.core_5.5.0.201309180223.jar"
    manualDependencyLocalPath = "${rootProject.projectDir.toString()}/dist/gradle/manual/org.eclipse.cdt.core_5.5.0.201309180223.jar"
}

// For the time being, we may want to keep the build directory separate
// from the current one that's being used until this project overtakes
// the ant build system
buildDir  = "${rootProject.projectDir.toString()}/dist/gradle/"

// Define aliases for build variants
def buildAliases = [
    'firstbuild' : [
       'cleanUp',
       'codeGen',
       'umpleParser',
       'rtcpp',
       'resetUmpleSelf',
       'compileJava',
       'jar',
   ],
   'quickbuild' : [
        'cleanUpUmple',
        'resetUmpleSelf',
        'compileJava',
        'jar',
    ],
   'fullbuild' : [
        'cleanUp',
        'qaBuildingPage',
        'buildSandbox',
        'codeGen',
        'umpleParser',
        'rtcpp',
        'setVersion',
        'resetUmpleSelf',
        'compileJava',
        'jar',
        'test',
        'deploy',
        'resetVersion',
        'buildEclipsePlugin',
        'buildUmplificatorEclipsePlugin',
        'buildTestUnitGeneratorAndParser',
        'buildJavaTestbed',
        'testingUmpleOnlineExamplesAndManualExamples',
   ],
]
def expandedTaskList = []

gradle.startParameter.taskNames.each {
    expandedTaskList << (buildAliases[it] ? buildAliases[it] : it)
}

gradle.startParameter.taskNames = expandedTaskList.flatten()

apply plugin: 'java'

// See ivy.xml for which third-party libraries are required by the various flavours of Umple build
configurations {
    ivy
}

repositories {
    maven {
        name 'central'
        url 'http://repo1.maven.org/maven2'
    }
    maven {
        name 'jboss'
        url 'http://repository.jboss.org/nexus/content/groups/public-jboss'
    }
}

dependencies {
    // Javascript compression for UmpleOnline scripts (TODO)
    ivy group: 'com.yahoo.platform.yui', name: 'yuicompressor', version: '2.4.8'
    
    // Testing
    ivy group: 'junit', name: 'junit', version: '4.12'

    // Core
    ivy group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '4.4'
    ivy group: 'org.apache.ant', name: 'ant', version: '1.9.6'

    // Validator
    ivy group: 'org.eclipse.core', name: 'runtime', version: '3.9.0-v20130326-1255'

    // Umplificator
    ivy group: 'commons-io', name: 'commons-io', version: '2.4'
    ivy group: 'org.apache.commons', name: 'commons-collections4', version: '4.0'
    ivy group: 'commons-configuration', name: 'commons-configuration', version: '1.10'
    ivy group: 'commons-logging', name: 'commons-logging', version: '1.1.3'
    ivy group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.0.2'
    ivy group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.0.2'
    ivy group: 'org.eclipse', name: 'text', version: '3.3.0-v20070606-0010'
    ivy group: 'org.perf4j', name: 'perf4j', version: '0.9.16'
    ivy group: 'org.kie', name: 'kie-api', version: '6.2.0.Final'
    ivy group: 'org.drools', name: 'drools-compiler', version: '6.2.0.Final'
    ivy group: 'org.eclipse.core', name: 'runtime', version: '3.10.0-v20140318-2214'
    ivy group: 'org.osgi', name: 'org.osgi.core', version: '4.3.0'

    // XText/Xtend Plugin
    ivy group: 'org.eclipse.xtext', name: 'org.eclipse.xtext.ui', version: '2.9.0.beta3'
    ivy group: 'org.eclipse.xtend', name: 'org.eclipse.xtend.core', version: '2.9.0.beta3'

    // Eclipse Plugin dependencies
    ivy group: 'org.eclipse.jdt', name: 'org.eclipse.jdt.core', version: '3.10.0'
}

// ===================
//  Umple compilation
// ===================

// Download task for updating Umple jar
apply plugin: 'de.undercouch.download'

// TODO: this logic should eventually be outsourced to the plugin, but for completeness
// we keep track of it here
task downloadUmpleJar(type: de.undercouch.gradle.tasks.download.Download) {
    onlyIfNewer true
    overwrite true
    src rootProject.ext.umpleJarRemoteSource
    dest rootProject.ext.umpleJarRemoteFile
}

task downloadManualDependencies(type: de.undercouch.gradle.tasks.download.Download) {
    onlyIfNewer true
    overwrite true
    src rootProject.ext.manualDependencyRemotePath
    dest rootProject.ext.manualDependencyLocalPath
}

// TODO (?): access the jar file directly in a fashion similar to the plugin
// ideally the plugin should support local jar files too
// Execute Umple jar
static void runUmpleJar(final String umpleJar, final String masterFile) {
    // For the time being it may be good to print the exact command being executed
    // so that we can check to see if issues are reproducible via the jar itself
    def command = "java -jar " + umpleJar + " " + masterFile
    println(command)
    def proc = command.execute();
    proc.waitForProcessOutput(System.out, System.err);
}

subprojects{
    // Make sure we load all the subproject properties first
    evaluationDependsOn(":${project.name}")

    // Clean up task
    task cleanUp << {
        delete project.ext.umpleOutputDir
    }

    def masterFile = "${projectDir.toString()}/${project.ext.masterFile}"

    // Compile task using remote jar
    task compileUmple << {
        runUmpleJar(rootProject.ext.umpleJarRemoteFile, masterFile)
    }
    compileUmple.dependsOn(":downloadUmpleJar")

    // Compile task using local jar, or fallback to remote
    task compileUmpleSelf << {
        if (new File(rootProject.ext.umpleLatestJar).exists()) {
            runUmpleJar(rootProject.ext.umpleLatestJar, masterFile)
        } else {
            // Still default to using the stable downloaded jar
            runUmpleJar(rootProject.ext.umpleJarRemoteFile, masterFile)
        }
    }
    compileUmpleSelf.dependsOn(":downloadUmpleJar")

    // Copy task for parent project
    def fromPath = "${projectDir.toString()}/${project.ext.umpleOutputDir}"
    def intoPath = project.hasProperty("generationDir") ?
                        "${rootProject.projectDir.toString()}/${project.ext.generationDir}"
                        :
                        "${rootProject.projectDir.toString()}/dist/gradle/src-gen/${project.name}/"
    task copyUmpleOutput (type: Copy) {
        from fromPath
        into intoPath
        duplicatesStrategy = 'warn'
        doFirst {
            println("Copying from ${fromPath} to ${intoPath}")
            inputs.sourceFiles.stopExecutionIfEmpty()
        }
    }
    compileUmple.finalizedBy copyUmpleOutput
    compileUmpleSelf.finalizedBy copyUmpleOutput

    task copyUmpleTest (type: Copy) {
        from "${projectDir.toString()}/test"
        into "${rootProject.ext.testBaseDir}/${project.name}/test"
        duplicatesStrategy = 'warn'
        doFirst {
            println("Copying tests from ${projectDir.toString()}/test to ${rootProject.ext.testBaseDir}/test")
        }
    }

    // TODO: there seems to be some broken Java in some of the compiled files here
    if (project.name != "cruise.umplificator" &&
        project.name != "sandbox") {
        rootProject.tasks.getByName("compileTestJava").dependsOn copyUmpleTest
    }

    // Make sure any invocations of compile Java from the root also trigger umple compiles
    rootProject.tasks.getByName("compileJava").dependsOn compileUmple
}

// Updates the latest version file
task updateLatestVersion << {
    if (new File(rootProject.ext.umpleLatestJar).exists()) {
    new File(rootProject.ext.umpleVersionFullFile).text =
"""
version: ${rootProject.ext.umpleLatestVersion}
"""
    } else {
        throw new Exception("Could not find jar file ${rootProject.ext.umpleLatestJar} when setting version")
    }
}
updateLatestVersion.mustRunAfter 'packageUmple'

// Clean up task
task cleanUp << {
    delete "${rootProject.projectDir.toString()}/dist/gradle"
}

// Delete the tests dir
task cleanUpTests << {
    delete rootProject.ext.testBaseDir
}

// Delete only cruise umple components
task cleanUpUmple << {
    delete "${rootProject.projectDir.toString()}/dist/gradle/src-gen/cruise.umple"
    delete "${rootProject.projectDir.toString()}/dist/gradle/src-gen/cruise.umple.validator"
    delete "${rootProject.projectDir.toString()}/dist/gradle/src-gen/cruise.umplificator"
}

// ============================
//  Java tests and compilation
// ============================

sourceSets {
    main {
        compileClasspath = files(
            rootProject.ext.classfileOutputDir,
            configurations.ivy,
            manualDependencyLocalPath)
        java {
            srcDirs = [
                rootProject.ext.generatedBaseDir,
                "${rootProject.projectDir.toString()}/dist/libs/vendors/jopt-simple/src/main/java/joptsimple"
            ]
            exclude '**/.git*', '**/*.ump'
        }
        output.classesDir = rootProject.ext.classfileOutputDir
    }
    test {
        compileClasspath = files(
            rootProject.ext.classfileOutputDir,
            rootProject.ext.testClassfileOutputDir,
            configurations.ivy,
            manualDependencyLocalPath)
        runtimeClasspath = files(
            rootProject.ext.classfileOutputDir,
            rootProject.ext.testClassfileOutputDir,
            configurations.ivy,
            manualDependencyLocalPath)
        java {
            srcDirs = [
                rootProject.ext.testBaseDir,
            ]
        }
        output.classesDir = rootProject.ext.testClassfileOutputDir
    }
}

compileJava.dependsOn 'downloadManualDependencies'

// ===============
//  Jar packaging
// ===============

// Grammar and error files also need to be included in the Umple jar
task copyDocs(type: Copy) {
    from "cruise.umple/src"
    into rootProject.ext.classfileOutputDir
    include '*.grammar'
    include '*.error'
    doFirst {
        println("Copying .grammar and .error files from cruise.umple/src to ${rootProject.ext.classfileOutputDir}")
        inputs.sourceFiles.stopExecutionIfEmpty()
    }
}

jar {
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF', "**/.git", "**/.ump",  "**/data"
    from rootProject.ext.classfileOutputDir
    // Set the base name -- the jar will be compiled to "${buildDir}/libs/${archivesBaseName}.jar"
    archivesBaseName = rootProject.ext.umpleLatestJarBase
    manifest {
        attributes 'Main-Class': 'cruise.umple.UmpleConsoleMain',
                   'Class-Path': configurations.ivy,
                   'Built-By': 'Cruise - University of Ottawa'
    }
    doFirst {
        println("Compiling to ${rootProject.ext.umpleLatestJar} using " + rootProject.ext.classfileOutputDir)
    }
    dependsOn 'copyDocs'
}

// ============
//  TODO Items
// ============

task deployUmpleOnlineJars(type: Copy) {
    from "${rootProject.projectDir.toString()}/dist/cruise.umple"
    into "/h/ralph/sites/www/html/umpleonline/scripts/"
    doFirst {
        println("Deploying umple online to /h/ralph/sites/www/html/umpleonline/scripts/")
        inputs.sourceFiles.stopExecutionIfEmpty() // silent fail, continues execution
    }
    // TODO: the sync and vml jars still need to be built
    include "umplesync-${rootProject.ext.umpleVersionFull}.jar"
    include "umple-${rootProject.ext.umpleVersionFull}.jar"
    include "umplevml-${rootProject.ext.umpleVersionFull}.jar"
}

task deployUpdatedLib(type: Copy) {
    from "${rootProject.projectDir.toString()}/dist/cruise.umple"
    into "${rootProject.projectDir.toString()}/lib"
    doFirst {
        println("Deploying umple online to lib")
        inputs.sourceFiles.stopExecutionIfEmpty() // silent fail, continues execution
    }
    // TODO: the sync and vml jars still need to be built
    include "umplesync-${rootProject.ext.umpleVersionFull}.jar"
    include "umple-${rootProject.ext.umpleVersionFull}.jar"
    include "umplevml-${rootProject.ext.umpleVersionFull}.jar"
}

// We can't really perform a full deployment until we start building the other two jars as well
task deploy {
    doLast {
        println("Deployed Version: ${rootProject.ext.umpleLatestVersion}")
    }
    dependsOn 'deployUmpleOnlineJars'
    dependsOn 'deployUpdatedLib'
}

task buildEclipsePlugin << { println("TODO") }
task buildUmplificatorEclipsePlugin << { println("TODO") }
task buildTestUnitGeneratorAndParser << { println("TODO") }
task buildJavaTestbed << { println("TODO") }
task testingUmpleOnlineExamplesAndManualExamples << { println("TODO") }

// =======
//  Build
// =======

// Builds self
task resetUmpleSelf {
    dependsOn ':cruise.umple:compileUmpleSelf'
    dependsOn ':cruise.umple.validator:compileUmpleSelf'
    dependsOn ':cruise.umplificator:compileUmpleSelf'
}

// Generates template code by first attempting to use
// the latest local jar, or else the remote jar
task codeGen {
    dependsOn ":UmpleToJava:compileUmpleSelf"
    dependsOn ":UmpleToRTCpp:compileUmpleSelf"
    dependsOn ":UmpleToPhp:compileUmpleSelf"
    dependsOn ":UmpleToRuby:compileUmpleSelf"
    dependsOn ":UmpleToSql:compileUmpleSelf"
    dependsOn ":UmpleToTest:compileUmpleSelf"
}

// Compiles the parser to Java
task umpleParser {
    dependsOn ":UmpleParser:compileUmpleSelf"
}

// Copies libraries for RTCpp
task rtcpp(type: Copy) {
    from "${rootProject.projectDir.toString()}/cruise.umple.nebula/src",
            "${rootProject.projectDir.toString()}/UmpleToRTCpp/src"
    into "${rootProject.projectDir.toString()}/dist/gradle/src-gen/rtcpp"
    exclude '.git*'
}

// Create in-progress QA landing page
task qaBuildingPage(type: Copy) {
    from "${rootProject.projectDir.toString()}/build/"
    into "${rootProject.projectDir.toString()}/dist/qa/"
    include 'qa_updating.php'
    rename 'qa_updating.php', 'index.php'
    doFirst {
        println("Creating the QA landing page")
        inputs.sourceFiles.stopExecutionIfEmpty()
    }
}

// Builds the sandbox project
task buildSandbox << {
    delete "${rootProject.projectDir.toString()}/cruise.umple.validator/bin"
    delete "${rootProject.projectDir.toString()}/cruise.umplificator/bin"
    delete "${rootProject.projectDir.toString()}/sandbox/bin"
    delete "${rootProject.projectDir.toString()}/dist/sandbox"
}
task('sandbox:compileJava').mustRunAfter 'buildSandbox'

// Update files to show generated version
task setVersion << {
    println("Setting version to ${rootProject.ext.umpleLatestVersion}")
    ant.replaceregexp(match:'@UMPLE_VERSION@', replace: rootProject.ext.umpleLatestVersion, flags:'g', byline:true) {
        fileset(dir: "${rootProject.projectDir.toString()}/dist/gradle", includes: '**/*.java')
    }
}

// Revert generated version
task resetVersion << {
    println("Reverting version from ${rootProject.ext.umpleLatestVersion} to @UMPLE_VERSION@")
    ant.replaceregexp(match:rootProject.ext.umpleLatestVersion, replace: '@UMPLE_VERSION@', flags:'g', byline:true) {
        fileset(dir: "${rootProject.projectDir.toString()}/dist/gradle", includes: '**/*.java')
    }
}
