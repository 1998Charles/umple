Basic State Machines
State Machines
noreferences

@@description
<p>      
A state machine is modeled as an attribute with a fixed set of values (called states) that
are determined by the occurrence of events (method calls). State machines are very useful
for quickly defining a program's behaviour
</p>

@@syntax

inlineStateMachine : [name] { ( [[comment]] | [[state]] )* }<br/>&nbsp;<br/>

state : [stateName] { ( [[comment]] | [=changeType:-|*]? [[stateEntity]] )* }<br/>&nbsp;<br/>

stateEntity- : [=-||] | [[transition]] | [[entryOrExitAction]] | [[activity]] | [[state]]<br/>&nbsp;<br/>

transition : [[guard]] [[eventDefinition]] -> [[action]]? [stateName] ; | [[eventDefinition]] [[guard]]? -> [[action]]? [stateName] ; | [[activity]] -> [stateName]<br/>&nbsp;<br/>

eventDefinition- : [[afterEveryEvent]] | [[afterEvent]] | [event]<br/>&nbsp;<br/>


@@example

// This example shows simple states without any actions or guards
// More examples can be found in UmpleOnline
// Additional details will be added here soon
//
// In the following, status is a state machine, and acts like an
// attributes, whose value is set by various events.
//
// Open, Closing, Closed, Opening and HalfOpen are the possible
// values, or states, of status.
//
// buttonOrObstacle, reachBottom and reachTop are events. These
// become generated methods that can be called to cause a state
// change.

class GarageDoor
{
   status {
      Open { buttonOrObstacle -> Closing;  }
      Closing {
          buttonOrObstacle -> Opening;
          reachBottom -> Closed;
      }
      Closed { buttonOrObstacle -> Opening; }
      Opening {
          buttonOrObstacle -> HalfOpen;
          reachTop -> Open;
      }
      HalfOpen { buttonOrObstacle -> Opening; }
  }
}

@@endexample