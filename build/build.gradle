apply plugin: 'groovy'

repositories {
	mavenCentral()
}

dependencies {
	compile gradleApi()
	compile localGroovy()
}

buildscript {
    repositories {
        maven {
            url uri('../../libs')
        }
    }
    dependencies {
		classpath files('../../libs/umple-latest.jar')
		classpath group: 'cruise.umple', name: 'UmpleGradlePlugin',  version: '0.0.0'
    }
}

apply plugin: 'umple.gradle.plugin'

// Get all dependencies installed
task bootstrap << {
    
	
	
}

// Perform a first build to get umple related stuff installed 
task firstBuild << {
    
	
	
}

// full build
task fullBuild << {
    
	
	
}

// quick build
task quickBuild << {
	
	
	
}

// build only umple
task buildUmple << {
	
	
	
}

// build only umple eclipse plugin
task buildUmpleEclipsePlugin << {
	
	
	
}

// build only umplificator eclipse plugin
task buildUmplificatorEclipsePlugin << {
	
	
	
}

// qaBuildingPage #TODO_AH figure out what this is
task qaBuildingPage << {
    
	
	
}

// qaLandingPage #TODO_AH figure out what this is
task qaLandingPage << {
    
	
	
}

// Turn *.ump code from Umple into *.java
task umpleSelf << {
    
	
	
}

// Compile *.java into byte code
task compileUmple << {
    
	
	
}

// Compile the all testbed programs against the latest umple.jar
task testUmple << {
    // Do nothing, this will call testJava, testPHP, and testRuby
	// as specified by the multiple "dependsOn" at the bottom
}

// Compile the Java testbed program against the latest umple.jar
task compileUmpleToJava << {
	def compileUmpleToJavaSucceeded = true

	// #TODO_AH implement java compile
	
	println ""
	if(compileUmpleToJavaSucceeded)
	{
		println " compileUmpleToJava succeeded"
	}
	else
	{
		println " compileUmpleToJava failed"
	}
	println ""
}

// Compile the PHP testbed program against the latest umple.jar
task compileUmpleToPHP << {
	def compileUmpleToPHPSucceeded = true

	// #TODO_AH implement php compile
	
	println ""
	if(compileUmpleToPHPSucceeded)
	{
		println " compileUmpleToPHP succeeded"
	}
	else
	{
		println " compileUmpleToPHP failed"
	}
	println ""
}

// Compile the Ruby testbed program against the latest umple.jar
task compileUmpleToRuby << {
	def compileUmpleToRubySucceeded = true

	// #TODO_AH implement ruby compile
	
	println ""
	if(compileUmpleToRubySucceeded)
	{
		println " compileUmpleToRuby succeeded"
	}
	else
	{
		println " compileUmpleToRuby failed"
	}
	println ""
}

// Test the Java testbed program against the latest umple.jar
task testJava(dependsOn: 'compileUmpleToJava') << {
	def testJavaSucceeded = true

	// #TODO_AH implement Java test
	
	println ""
	if(testJavaSucceeded)
	{
		println " testJava succeeded"
	}
	else
	{
		println " testPHP failed"
	}
	println ""
}

// Test the PHP testbed program against the latest umple.jar
task testPHP(dependsOn: 'compileUmpleToPHP') << {
	def testPHPSucceeded = true

	// #TODO_AH implement PHP test
	
	println ""
	if(testPHPSucceeded)
	{
		println " testPHP succeeded"
	}
	else
	{
		println " testPHP failed"
	}
	println ""
}

// Test the Ruby testbed program against the latest umple.jar
task testRuby(dependsOn: 'compileUmpleToRuby') << {
	def testRubySucceeded = true

	// #TODO_AH implement ruby test
	
	println ""
	if(testRubySucceeded)
	{
		println " testRuby succeeded"
	}
	else
	{
		println " testRuby failed"
	}
	println ""
}

// order matters, dependencies need to be specified after task declaration/definition
// #TODO_AH find out if we it's possible to forward declare?
testUmple.dependsOn testJava
testUmple.dependsOn testPHP
testUmple.dependsOn testRuby