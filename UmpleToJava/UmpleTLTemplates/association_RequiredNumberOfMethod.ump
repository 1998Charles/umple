class UmpleToJava {
    association_RequiredNumberOfMethod <<!<</*association_RequiredNumberOfMethod*/>><<#
    String customRequiredNumberOfPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("requiredNumberOfMethod",av)));
    String customRequiredNumberOfPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("requiredNumberOfMethod",av)));
#>>
<<# if (customRequiredNumberOfPrefixCode == null && customRequiredNumberOfPostfixCode == null) { #>><<= umpleSourceFile >>
  <<# if (model.isDebugMode()) {
    Method g_method = new Method("public static", gen.translate("requiredNumberOfMethod",av), "Integer", false);
    debugAutogeneratedMethod(g_method, uClass, model);
  }#>>
  public static int <<=gen.translate("requiredNumberOfMethod",av)>>()
  {
    return <<=av.getMultiplicity().getLowerBound()>>;
  }
<<# } else { #>>
  <<# if (model.isDebugMode()) {
    Method g_method = new Method("public static", gen.translate("requiredNumberOfMethod",av), "Integer", false);
    debugAutogeneratedMethod(g_method, uClass, model);
  }#>>
  public static int <<=gen.translate("requiredNumberOfMethod",av)>>()
  {
    <<# if (customRequiredNumberOfPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customRequiredNumberOfPrefixCode,gen.translate("requiredNumberOfMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customRequiredNumberOfPrefixCode, "    ")); } #>>
    int required = <<=av.getMultiplicity().getLowerBound()>>;
    <<# if (customRequiredNumberOfPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customRequiredNumberOfPostfixCode,gen.translate("requiredNumberOfMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customRequiredNumberOfPostfixCode, "    ")); } #>>
    return required;
  }
<<# } #>>!>>
}
