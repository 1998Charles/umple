class UmpleToJava {
    association_GetPrivate <<!<</*association_GetPrivate*/>>
  <<#if (model.isDebugMode()) {
    Method g_method = new Method("private", gen.relatedTranslate("setMethod",av), "void", false);
    MethodParameter g_param1 = new MethodParameter(gen.translate("parameterOne",av), gen.translate("type",av), "", "", false);
    MethodParameter g_param2 = new MethodParameter(gen.relatedTranslate("parameterOne",av), gen.relatedTranslate("type",av), "", "", false);
    g_method.addMethodParameter(g_param1);
    g_method.addMethodParameter(g_param2);
    debugAutogeneratedMethod(g_method, uClass, model);
  }#>>
  private void <<=gen.relatedTranslate("setMethod",av)>>(<<=gen.translate("type",av)>> <<=gen.translate("parameterOne",av)>>, <<=gen.relatedTranslate("type",av)>> <<=gen.relatedTranslate("parameterOne",av)>>)
  {
    try
    {
      java.lang.reflect.Field mentorField = <<=gen.translate("parameterOne",av)>>.getClass().getDeclaredField("<<=gen.relatedTranslate("associationOne",av)>>");
      mentorField.setAccessible(true);
      mentorField.set(<<=gen.translate("parameterOne",av)>>, <<=gen.relatedTranslate("parameterOne",av)>>);
    }
    catch (Exception e)
    {
      throw new RuntimeException("Issue internally setting <<=gen.relatedTranslate("parameterOne",av)>> to <<=gen.translate("parameterOne",av)>>", e);
    }
  }
!>>
}
