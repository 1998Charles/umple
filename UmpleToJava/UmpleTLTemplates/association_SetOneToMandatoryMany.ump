class UmpleToJava {
    association_SetOneToMandatoryMany <<!<</*association_SetOneToMandatoryMany*/>>
  <<#if (model.isDebugMode()) {
    Method g_method = new Method("public", gen.translate("setMethod",av), "Boolean", false);
    MethodParameter g_param1 = new MethodParameter(gen.translate("parameterOne",av), gen.translate("type",av), "", "", false);
    g_method.addMethodParameter(g_param1);
    debugAutogeneratedMethod(g_method, uClass, model);
  }#>>
  public boolean <<=gen.translate("setMethod",av)>>(<<=gen.translate("type",av)>> <<=gen.translate("parameterOne",av)>>)
  {
    boolean wasSet = false;
    <<# if (customSetPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customSetPrefixCode,gen.translate("setMethod",av));
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetPrefixCode, "    ")); } #>>
    //Must provide <<=gen.translate("associationOne",av)>> to <<=gen.relatedTranslate("associationOne",av)>>
    if (<<=gen.translate("parameterOne",av)>> == null)
    {
      <<# if (customSetPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customSetPostfixCode,gen.translate("setMethod",av));
      append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetPostfixCode, "      ")); } #>>
      return wasSet;
    }

    if (<<=gen.translate("associationOne",av)>> != null && <<=gen.translate("associationOne",av)>>.<<=gen.relatedTranslate("numberOfMethod",av)>>() <= <<=gen.translate("type",av)>>.<<=gen.relatedTranslate("minimumNumberOfMethod",av)>>())
    {
      <<# if (customSetPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customSetPostfixCode,gen.translate("setMethod",av)); 
      append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetPostfixCode, "      ")); } #>>
      return wasSet;
    }

    <<=gen.translate("type",av)>> <<=gen.translate("parameterExisting",av)>> = <<=gen.translate("associationOne",av)>>;
    <<=gen.translate("associationOne",av)>> = <<=gen.translate("parameterOne",av)>>;
    if (<<=gen.translate("parameterExisting",av)>> != null && !<<=gen.translate("parameterExisting",av)>>.equals(<<=gen.translate("parameterOne",av)>>))
    {
      boolean didRemove = <<=gen.translate("parameterExisting",av)>>.<<=gen.relatedTranslate("removeMethod",av)>>(<<=self>>);
      if (!didRemove)
      {
        <<=gen.translate("associationOne",av)>> = <<=gen.translate("parameterExisting",av)>>;
        <<# if (customSetPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customSetPostfixCode,gen.translate("setMethod",av)); 
        append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetPostfixCode, "      ")); } #>>
        return wasSet;
      }
    }
    <<=gen.translate("associationOne",av)>>.<<=gen.relatedTranslate("addMethod",av)>>(<<=self>>);
    wasSet = true;
    <<# if (customSetPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customSetPostfixCode,gen.translate("setMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetPostfixCode, "    ")); } #>>
    return wasSet;
  }
!>>
}
