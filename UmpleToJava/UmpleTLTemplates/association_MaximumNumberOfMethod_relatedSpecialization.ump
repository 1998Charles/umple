class UmpleToJava {
    association_MaximumNumberOfMethod_relatedSpecialization <<!<</*association_MaximumNumberOfMethod_relatedSpecialization*/>><<#
    String customGetPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("getMethod",av)));

    String customMaximumNumberOfPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("maximumNumberOfMethod",av)));
    String customMaximumNumberOfPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("maximumNumberOfMethod",av)));
    
    #>>
<<# if (customMaximumNumberOfPrefixCode == null && customMaximumNumberOfPostfixCode == null) { #>>
  <<#if (model.isDebugMode()) {
    Method g_method = new Method("public static", gen.translate("maximumNumberOfMethod",av) + "_" + gen.translate("type",av), "Integer", false);
    debugAutogeneratedMethod(g_method, uClass, model);
  }#>>
  public static int <<=gen.translate("maximumNumberOfMethod",av)>>_<<=gen.translate("type",av)>>()
  {
    return <<=av.getMultiplicity().getUpperBound()>>;
  }
<<# } else { #>><<=umpleSourceFile>>
  <<#if (model.isDebugMode()) {
    Method g_method = new Method("public static", gen.translate("maximumNumberOfMethod",av) + "_" + gen.translate("type",av), "Integer", false);
    debugAutogeneratedMethod(g_method, uClass, model);
  }#>>
  public static int <<=gen.translate("maximumNumberOfMethod",av)>>_<<=gen.translate("type",av)>>()
  {
    <<# if (customMaximumNumberOfPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customMaximumNumberOfPrefixCode,gen.translate("maximumNumberOfMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customMaximumNumberOfPrefixCode, "    ")); } #>>
    int maximum = <<=av.getMultiplicity().getUpperBound()>>;
    <<# if (customMaximumNumberOfPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customMaximumNumberOfPostfixCode,gen.translate("maximumNumberOfMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customMaximumNumberOfPostfixCode, "    ")); } #>>
    return maximum;
  }
<<# } #>>!>>
}
