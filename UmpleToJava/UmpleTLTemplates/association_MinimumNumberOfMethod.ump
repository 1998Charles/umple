class UmpleToJava {
    association_MinimumNumberOfMethod <<!<</*association_MinimumNumberOfMethod*/>><<#
    String customMinimumNumberOfPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("minimumNumberOfMethod",av)));
    String customMinimumNumberOfPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("minimumNumberOfMethod",av)));
    #>>
<<# if (customMinimumNumberOfPrefixCode == null && customMinimumNumberOfPostfixCode == null) { #>>
  <<# if (model.isDebugMode()) {
    Method g_method = new Method("public static", gen.translate("minimumNumberOfMethod",av), "Integer", false);
    debugAutogeneratedMethod(g_method, uClass, model);
  }#>>
  public static int <<=gen.translate("minimumNumberOfMethod",av)>>()
  {
    return <<=av.getMultiplicity().getLowerBound()>>;
  }
<<# } else { #>>
  <<# if (model.isDebugMode()) {
    Method g_method = new Method("public static", gen.translate("minimumNumberOfMethod",av), "Integer", false);
    debugAutogeneratedMethod(g_method, uClass, model);
  }#>>
  public static int <<=gen.translate("minimumNumberOfMethod",av)>>()
  {
    <<# if (customMinimumNumberOfPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customMinimumNumberOfPrefixCode,gen.translate("minimumNumberOfMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customMinimumNumberOfPrefixCode, "    ")); } #>>
    int minimum = <<=av.getMultiplicity().getLowerBound()>>;
    <<# if (customMinimumNumberOfPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customMinimumNumberOfPostfixCode,gen.translate("minimumNumberOfMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customMinimumNumberOfPostfixCode, "    ")); } #>>
    return minimum;
  }
<<# } #>>!>>
}
