/*
* generated by Xtext
*/
grammar InternalUmple;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package cruise.umple.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package cruise.umple.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import cruise.umple.services.UmpleGrammarAccess;

}

@parser::members {

 	private UmpleGrammarAccess grammarAccess;
 	
    public InternalUmpleParser(TokenStream input, IAstFactory factory, UmpleGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("cruise/umple/parser/antlr/internal/InternalUmple.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "UmpleModel";	
   	}
   	
   	@Override
   	protected UmpleGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleUmpleModel
entryRuleUmpleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUmpleModelRule(), currentNode); }
	 iv_ruleUmpleModel=ruleUmpleModel 
	 { $current=$iv_ruleUmpleModel.current; } 
	 EOF 
;

// Rule UmpleModel
ruleUmpleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleModelAccess().getNamespaceNamespaceParserRuleCall_0_0(), currentNode); 
	    }
		lv_namespace_0_0=ruleNamespace		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"namespace",
	        		lv_namespace_0_0, 
	        		"Namespace", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleModelAccess().getGlossaryGlossaryParserRuleCall_1_0(), currentNode); 
	    }
		lv_glossary_1_0=ruleGlossary		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"glossary",
	        		lv_glossary_1_0, 
	        		"Glossary", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleModelAccess().getGenerate_GenerateParserRuleCall_2_0(), currentNode); 
	    }
		lv_generate__2_0=ruleGenerate		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"generate_",
	        		lv_generate__2_0, 
	        		"Generate", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleModelAccess().getTraceMechanismTraceMechanismParserRuleCall_3_0(), currentNode); 
	    }
		lv_traceMechanism_3_0=ruleTraceMechanism		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"traceMechanism",
	        		lv_traceMechanism_3_0, 
	        		"TraceMechanism", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleModelAccess().getUsesUseStatementParserRuleCall_4_0_0(), currentNode); 
	    }
		lv_uses_4_0=ruleUseStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"uses",
	        		lv_uses_4_0, 
	        		"UseStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleModelAccess().getUmpleElementsUmpleElementParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_umpleElements_5_0=ruleUmpleElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"umpleElements",
	        		lv_umpleElements_5_0, 
	        		"UmpleElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleModelAccess().getAssociationsUmpleAssociationParserRuleCall_4_2_0(), currentNode); 
	    }
		lv_associations_6_0=ruleUmpleAssociation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"associations",
	        		lv_associations_6_0, 
	        		"UmpleAssociation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleModelAccess().getAssociationClassesUmpleAssociationClassParserRuleCall_4_3_0(), currentNode); 
	    }
		lv_associationClasses_7_0=ruleUmpleAssociationClass		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"associationClasses",
	        		lv_associationClasses_7_0, 
	        		"UmpleAssociationClass", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleModelAccess().getStatemachinesStateMachineDefinitionParserRuleCall_4_4_0(), currentNode); 
	    }
		lv_statemachines_8_0=ruleStateMachineDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statemachines",
	        		lv_statemachines_8_0, 
	        		"StateMachineDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleUmpleElement
entryRuleUmpleElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUmpleElementRule(), currentNode); }
	 iv_ruleUmpleElement=ruleUmpleElement 
	 { $current=$iv_ruleUmpleElement.current; } 
	 EOF 
;

// Rule UmpleElement
ruleUmpleElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getUmpleElementAccess().getUmpleClassParserRuleCall_0(), currentNode); 
    }
    this_UmpleClass_0=ruleUmpleClass
    { 
        $current = $this_UmpleClass_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getUmpleElementAccess().getUmpleInterfaceParserRuleCall_1(), currentNode); 
    }
    this_UmpleInterface_1=ruleUmpleInterface
    { 
        $current = $this_UmpleInterface_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleWord
entryRuleWord returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWordRule(), currentNode); }
	 iv_ruleWord=ruleWord 
	 { $current=$iv_ruleWord.current; } 
	 EOF 
;

// Rule Word
ruleWord returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_singular_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getWordAccess().getSingularSTRINGTerminalRuleCall_0_0(), "singular"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWordRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"singular",
	        		lv_singular_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getWordAccess().getColonKeyword_1(), null); 
    }
(
(
		lv_plural_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getWordAccess().getPluralSTRINGTerminalRuleCall_2_0(), "plural"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWordRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"plural",
	        		lv_plural_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getWordAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleGlossary
entryRuleGlossary returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGlossaryRule(), currentNode); }
	 iv_ruleGlossary=ruleGlossary 
	 { $current=$iv_ruleGlossary.current; } 
	 EOF 
;

// Rule Glossary
ruleGlossary returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'glossary' 
    {
        createLeafNode(grammarAccess.getGlossaryAccess().getGlossaryKeyword_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getGlossaryAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGlossaryAccess().getWordsWordParserRuleCall_2_0(), currentNode); 
	    }
		lv_words_2_0=ruleWord		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGlossaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"words",
	        		lv_words_2_0, 
	        		"Word", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getGlossaryAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleGenerate
entryRuleGenerate returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGenerateRule(), currentNode); } 
	 iv_ruleGenerate=ruleGenerate 
	 { $current=$iv_ruleGenerate.current.getText(); }  
	 EOF 
;

// Rule Generate
ruleGenerate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='generate' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getGenerateAccess().getGenerateKeyword_0(), null); 
    }

	kw='Java' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getGenerateAccess().getJavaKeyword_1(), null); 
    }

	kw=';' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getGenerateAccess().getSemicolonKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleUseStatement
entryRuleUseStatement returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUseStatementRule(), currentNode); } 
	 iv_ruleUseStatement=ruleUseStatement 
	 { $current=$iv_ruleUseStatement.current.getText(); }  
	 EOF 
;

// Rule UseStatement
ruleUseStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='use' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUseStatementAccess().getUseKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getUseStatementAccess().getFileIDParserRuleCall_1(), currentNode); 
    }
    this_fileID_1=rulefileID    {
		$current.merge(this_fileID_1);
    }

    { 
        currentNode = currentNode.getParent();
    }

	kw=';' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUseStatementAccess().getSemicolonKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleNamespace
entryRuleNamespace returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNamespaceRule(), currentNode); }
	 iv_ruleNamespace=ruleNamespace 
	 { $current=$iv_ruleNamespace.current; } 
	 EOF 
;

// Rule Namespace
ruleNamespace returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'namespace' 
    {
        createLeafNode(grammarAccess.getNamespaceAccess().getNamespaceKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNamespaceAccess().getValueFileIDParserRuleCall_1_0(), currentNode); 
	    }
		lv_value_1_0=rulefileID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamespaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"fileID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getNamespaceAccess().getSemicolonKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleUmpleClass
entryRuleUmpleClass returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUmpleClassRule(), currentNode); }
	 iv_ruleUmpleClass=ruleUmpleClass 
	 { $current=$iv_ruleUmpleClass.current; } 
	 EOF 
;

// Rule UmpleClass
ruleUmpleClass returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_packageName_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getUmpleClassAccess().getPackageNameSTRINGTerminalRuleCall_0_0(), "packageName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"packageName",
	        		lv_packageName_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_external_1_0=	'external' 
    {
        createLeafNode(grammarAccess.getUmpleClassAccess().getExternalExternalKeyword_1_0(), "external"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "external", true, "external", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'class' 
    {
        createLeafNode(grammarAccess.getUmpleClassAccess().getClassKeyword_2(), null); 
    }
(
(
		lv_name_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getUmpleClassAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getUmpleClassAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleClassAccess().getAttributesUmpleAttributeParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_attributes_5_0=ruleUmpleAttribute		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_5_0, 
	        		"UmpleAttribute", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleClassAccess().getSingletonSingletonParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_singleton_6_0=ruleSingleton		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"singleton",
	        		true, 
	        		"Singleton", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleClassAccess().getKeyKeyParserRuleCall_5_2_0(), currentNode); 
	    }
		lv_key_7_0=ruleKey		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"key",
	        		lv_key_7_0, 
	        		"Key", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleClassAccess().getCodeInjectionCodeInjectionParserRuleCall_5_3_0(), currentNode); 
	    }
		lv_codeInjection_8_0=ruleCodeInjection		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"codeInjection",
	        		lv_codeInjection_8_0, 
	        		"CodeInjection", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	'isA' 
    {
        createLeafNode(grammarAccess.getUmpleClassAccess().getIsAKeyword_5_4_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getUmpleClassAccess().getExtendsClassUmpleClassCrossReference_5_4_1_0(), "extendsClass"); 
	}

)
)((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getUmpleClassAccess().getParentInterfacesUmpleInterfaceCrossReference_5_4_2_0_0(), "parentInterfaces"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getUmpleClassAccess().getCommaKeyword_5_4_2_1_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getUmpleClassAccess().getParentInterfacesUmpleInterfaceCrossReference_5_4_2_1_1_0(), "parentInterfaces"); 
	}

)
))*)*	';' 
    {
        createLeafNode(grammarAccess.getUmpleClassAccess().getSemicolonKeyword_5_4_3(), null); 
    }
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleClassAccess().getSymmetricReflexiveAssociationsSymmetricReflexiveAssociationParserRuleCall_5_5_0(), currentNode); 
	    }
		lv_symmetricReflexiveAssociations_15_0=ruleSymmetricReflexiveAssociation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"symmetricReflexiveAssociations",
	        		lv_symmetricReflexiveAssociations_15_0, 
	        		"SymmetricReflexiveAssociation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleClassAccess().getInlineAssociationInlineAssociationParserRuleCall_5_6_0(), currentNode); 
	    }
		lv_inlineAssociation_16_0=ruleInlineAssociation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"inlineAssociation",
	        		lv_inlineAssociation_16_0, 
	        		"InlineAssociation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleClassAccess().getDependsDependParserRuleCall_5_7_0(), currentNode); 
	    }
		lv_depends_17_0=ruleDepend		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"depends",
	        		lv_depends_17_0, 
	        		"Depend", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleClassAccess().getPositionPositionParserRuleCall_5_8_0(), currentNode); 
	    }
		lv_position_18_0=rulePosition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"position",
	        		lv_position_18_0, 
	        		"Position", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleClassAccess().getStateMachineStateMachineParserRuleCall_5_9_0(), currentNode); 
	    }
		lv_stateMachine_19_0=ruleStateMachine		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"stateMachine",
	        		lv_stateMachine_19_0, 
	        		"StateMachine", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleClassAccess().getTraceDirectiveTraceDirectiveParserRuleCall_5_10_0(), currentNode); 
	    }
		lv_traceDirective_20_0=ruleTraceDirective		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"traceDirective",
	        		lv_traceDirective_20_0, 
	        		"TraceDirective", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleClassAccess().getTraceCaseTraceCaseParserRuleCall_5_11_0(), currentNode); 
	    }
		lv_traceCase_21_0=ruleTraceCase		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"traceCase",
	        		lv_traceCase_21_0, 
	        		"TraceCase", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getUmpleClassAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleUmpleInterface
entryRuleUmpleInterface returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUmpleInterfaceRule(), currentNode); }
	 iv_ruleUmpleInterface=ruleUmpleInterface 
	 { $current=$iv_ruleUmpleInterface.current; } 
	 EOF 
;

// Rule UmpleInterface
ruleUmpleInterface returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'interface' 
    {
        createLeafNode(grammarAccess.getUmpleInterfaceAccess().getInterfaceKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getUmpleInterfaceAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getUmpleInterfaceAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleInterfaceAccess().getDependsDependParserRuleCall_3_0(), currentNode); 
	    }
		lv_depends_3_0=ruleDepend		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"depends",
	        		lv_depends_3_0, 
	        		"Depend", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleInterfaceAccess().getExtraCodeFunctionDeclarationParserRuleCall_4_0_0(), currentNode); 
	    }
		lv_extraCode_4_0=rulefunctionDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"extraCode",
	        		lv_extraCode_4_0, 
	        		"functionDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getUmpleInterfaceAccess().getSemicolonKeyword_4_1(), null); 
    }
)?	'}' 
    {
        createLeafNode(grammarAccess.getUmpleInterfaceAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleUmpleAssociation
entryRuleUmpleAssociation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUmpleAssociationRule(), currentNode); }
	 iv_ruleUmpleAssociation=ruleUmpleAssociation 
	 { $current=$iv_ruleUmpleAssociation.current; } 
	 EOF 
;

// Rule UmpleAssociation
ruleUmpleAssociation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'association' 
    {
        createLeafNode(grammarAccess.getUmpleAssociationAccess().getAssociationKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getUmpleAssociationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'{' 
    {
        createLeafNode(grammarAccess.getUmpleAssociationAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleAssociationAccess().getAssociationsAssociationParserRuleCall_3_0(), currentNode); 
	    }
		lv_associations_3_0=ruleAssociation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"associations",
	        		lv_associations_3_0, 
	        		"Association", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getUmpleAssociationAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleUmpleAssociationClass
entryRuleUmpleAssociationClass returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUmpleAssociationClassRule(), currentNode); }
	 iv_ruleUmpleAssociationClass=ruleUmpleAssociationClass 
	 { $current=$iv_ruleUmpleAssociationClass.current; } 
	 EOF 
;

// Rule UmpleAssociationClass
ruleUmpleAssociationClass returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'associationClass' 
    {
        createLeafNode(grammarAccess.getUmpleAssociationClassAccess().getAssociationClassKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getUmpleAssociationClassAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleAssociationClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getUmpleAssociationClassAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleAssociationClassAccess().getAssociationClassContentsAssociationClassContentParserRuleCall_3_0(), currentNode); 
	    }
		lv_associationClassContents_3_0=ruleassociationClassContent		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleAssociationClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"associationClassContents",
	        		lv_associationClassContents_3_0, 
	        		"associationClassContent", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getUmpleAssociationClassAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleassociationClassContent
entryRuleassociationClassContent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssociationClassContentRule(), currentNode); }
	 iv_ruleassociationClassContent=ruleassociationClassContent 
	 { $current=$iv_ruleassociationClassContent.current; } 
	 EOF 
;

// Rule associationClassContent
ruleassociationClassContent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAssociationClassContentAccess().getFunctionDefinitionParserRuleCall_0(), currentNode); 
    }
    this_functionDefinition_0=rulefunctionDefinition
    { 
        $current = $this_functionDefinition_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAssociationClassContentAccess().getUmpleClassParserRuleCall_1(), currentNode); 
    }
    this_UmpleClass_1=ruleUmpleClass
    { 
        $current = $this_UmpleClass_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAssociationClassContentAccess().getDependParserRuleCall_2(), currentNode); 
    }
    this_Depend_2=ruleDepend
    { 
        $current = $this_Depend_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAssociationClassContentAccess().getSingleAssociationEndParserRuleCall_3(), currentNode); 
    }
    this_singleAssociationEnd_3=rulesingleAssociationEnd
    { 
        $current = $this_singleAssociationEnd_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAssociationClassContentAccess().getStateMachineParserRuleCall_4(), currentNode); 
    }
    this_StateMachine_4=ruleStateMachine
    { 
        $current = $this_StateMachine_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAssociationClassContentAccess().getUmpleAttributeParserRuleCall_5(), currentNode); 
    }
    this_UmpleAttribute_5=ruleUmpleAttribute
    { 
        $current = $this_UmpleAttribute_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAssociationClassContentAccess().getInlineAssociationParserRuleCall_6(), currentNode); 
    }
    this_InlineAssociation_6=ruleInlineAssociation
    { 
        $current = $this_InlineAssociation_6.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAssociation
entryRuleAssociation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssociationRule(), currentNode); }
	 iv_ruleAssociation=ruleAssociation 
	 { $current=$iv_ruleAssociation.current; } 
	 EOF 
;

// Rule Association
ruleAssociation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAssociationAccess().getMultiplicityParserRuleCall_0(), currentNode); 
    }
rulemultiplicity
    { 
        currentNode = currentNode.getParent();
    }
(
(
		lv_type1_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAssociationAccess().getType1IDTerminalRuleCall_1_0(), "type1"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type1",
	        		lv_type1_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_rolename1_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAssociationAccess().getRolename1IDTerminalRuleCall_2_0(), "rolename1"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rolename1",
	        		lv_rolename1_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(	'->' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getHyphenMinusGreaterThanSignKeyword_3_0(), null); 
    }

    |	'--' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getHyphenMinusHyphenMinusKeyword_3_1(), null); 
    }

    |	'<-' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getLessThanSignHyphenMinusKeyword_3_2(), null); 
    }

    |	'><' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getGreaterThanSignLessThanSignKeyword_3_3(), null); 
    }
)
    { 
        currentNode=createCompositeNode(grammarAccess.getAssociationAccess().getMultiplicityParserRuleCall_4(), currentNode); 
    }
rulemultiplicity
    { 
        currentNode = currentNode.getParent();
    }
(
(
		lv_type2_8_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAssociationAccess().getType2IDTerminalRuleCall_5_0(), "type2"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type2",
	        		lv_type2_8_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_rolename2_9_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAssociationAccess().getRolename2IDTerminalRuleCall_6_0(), "rolename2"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rolename2",
	        		lv_rolename2_9_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	';' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getSemicolonKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleSymmetricReflexiveAssociation
entryRuleSymmetricReflexiveAssociation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSymmetricReflexiveAssociationRule(), currentNode); }
	 iv_ruleSymmetricReflexiveAssociation=ruleSymmetricReflexiveAssociation 
	 { $current=$iv_ruleSymmetricReflexiveAssociation.current; } 
	 EOF 
;

// Rule SymmetricReflexiveAssociation
ruleSymmetricReflexiveAssociation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSymmetricReflexiveAssociationAccess().getMultiplicityParserRuleCall_0(), currentNode); 
    }
rulemultiplicity
    { 
        currentNode = currentNode.getParent();
    }
	'self' 
    {
        createLeafNode(grammarAccess.getSymmetricReflexiveAssociationAccess().getSelfKeyword_1(), null); 
    }
(
(
		lv_rolename_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSymmetricReflexiveAssociationAccess().getRolenameIDTerminalRuleCall_2_0(), "rolename"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSymmetricReflexiveAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rolename",
	        		lv_rolename_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getSymmetricReflexiveAssociationAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleInlineAssociation
entryRuleInlineAssociation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInlineAssociationRule(), currentNode); }
	 iv_ruleInlineAssociation=ruleInlineAssociation 
	 { $current=$iv_ruleInlineAssociation.current; } 
	 EOF 
;

// Rule InlineAssociation
ruleInlineAssociation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getInlineAssociationAccess().getMultiplicityParserRuleCall_0(), currentNode); 
    }
rulemultiplicity
    { 
        currentNode = currentNode.getParent();
    }
(
(
		lv_rolename1_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getInlineAssociationAccess().getRolename1IDTerminalRuleCall_1_0(), "rolename1"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlineAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rolename1",
	        		lv_rolename1_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(	'->' 
    {
        createLeafNode(grammarAccess.getInlineAssociationAccess().getHyphenMinusGreaterThanSignKeyword_2_0(), null); 
    }

    |	'--' 
    {
        createLeafNode(grammarAccess.getInlineAssociationAccess().getHyphenMinusHyphenMinusKeyword_2_1(), null); 
    }

    |	'<-' 
    {
        createLeafNode(grammarAccess.getInlineAssociationAccess().getLessThanSignHyphenMinusKeyword_2_2(), null); 
    }

    |	'><' 
    {
        createLeafNode(grammarAccess.getInlineAssociationAccess().getGreaterThanSignLessThanSignKeyword_2_3(), null); 
    }
)
    { 
        currentNode=createCompositeNode(grammarAccess.getInlineAssociationAccess().getMultiplicityParserRuleCall_3(), currentNode); 
    }
rulemultiplicity
    { 
        currentNode = currentNode.getParent();
    }
(
(
		lv_type_7_0=RULE_ID
		{
			createLeafNode(grammarAccess.getInlineAssociationAccess().getTypeIDTerminalRuleCall_4_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlineAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_7_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_rolename2_8_0=RULE_ID
		{
			createLeafNode(grammarAccess.getInlineAssociationAccess().getRolename2IDTerminalRuleCall_5_0(), "rolename2"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlineAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rolename2",
	        		lv_rolename2_8_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	';' 
    {
        createLeafNode(grammarAccess.getInlineAssociationAccess().getSemicolonKeyword_6(), null); 
    }
)
;





// Entry rule entryRulesingleAssociationEnd
entryRulesingleAssociationEnd returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSingleAssociationEndRule(), currentNode); }
	 iv_rulesingleAssociationEnd=rulesingleAssociationEnd 
	 { $current=$iv_rulesingleAssociationEnd.current; } 
	 EOF 
;

// Rule singleAssociationEnd
rulesingleAssociationEnd returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSingleAssociationEndAccess().getMultiplicityParserRuleCall_0(), currentNode); 
    }
rulemultiplicity
    { 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSingleAssociationEndAccess().getTypeExtendedIDParserRuleCall_1_0(), currentNode); 
	    }
		lv_type_1_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSingleAssociationEndRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_rolename_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSingleAssociationEndAccess().getRolenameIDTerminalRuleCall_2_0(), "rolename"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSingleAssociationEndRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rolename",
	        		lv_rolename_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	';' 
    {
        createLeafNode(grammarAccess.getSingleAssociationEndAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRulemultiplicity
entryRulemultiplicity returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicityRule(), currentNode); } 
	 iv_rulemultiplicity=rulemultiplicity 
	 { $current=$iv_rulemultiplicity.current.getText(); }  
	 EOF 
;

// Rule multiplicity
rulemultiplicity returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiplicityAccess().getBoundParserRuleCall_0(), currentNode); 
    }
    this_bound_0=rulebound    {
		$current.merge(this_bound_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |(
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiplicityAccess().getBoundParserRuleCall_1_0(), currentNode); 
    }
    this_bound_1=rulebound    {
		$current.merge(this_bound_1);
    }

    { 
        currentNode = currentNode.getParent();
    }

	kw='..' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMultiplicityAccess().getFullStopFullStopKeyword_1_1(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getMultiplicityAccess().getBoundParserRuleCall_1_2(), currentNode); 
    }
    this_bound_3=rulebound    {
		$current.merge(this_bound_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
))
    ;





// Entry rule entryRulebound
entryRulebound returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBoundRule(), currentNode); } 
	 iv_rulebound=rulebound 
	 { $current=$iv_rulebound.current.getText(); }  
	 EOF 
;

// Rule bound
rulebound returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getBoundAccess().getINTTerminalRuleCall_0(), null); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBoundAccess().getAsteriskKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleSingleton
entryRuleSingleton returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSingletonRule(), currentNode); }
	 iv_ruleSingleton=ruleSingleton 
	 { $current=$iv_ruleSingleton.current; } 
	 EOF 
;

// Rule Singleton
ruleSingleton returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_singleton_0_0=	'singleton' 
    {
        createLeafNode(grammarAccess.getSingletonAccess().getSingletonSingletonKeyword_0_0(), "singleton"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSingletonRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "singleton", true, "singleton", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getSingletonAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleCodeInjection
entryRuleCodeInjection returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCodeInjectionRule(), currentNode); }
	 iv_ruleCodeInjection=ruleCodeInjection 
	 { $current=$iv_ruleCodeInjection.current; } 
	 EOF 
;

// Rule CodeInjection
ruleCodeInjection returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'before' 
    {
        createLeafNode(grammarAccess.getCodeInjectionAccess().getBeforeKeyword_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCodeInjectionAccess().getNameExtendedIDParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCodeInjectionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCodeInjectionAccess().getCodeBlockParserRuleCall_0_2_0(), currentNode); 
	    }
		lv_code_2_0=ruleblock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCodeInjectionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"code",
	        		lv_code_2_0, 
	        		"block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'after' 
    {
        createLeafNode(grammarAccess.getCodeInjectionAccess().getAfterKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCodeInjectionAccess().getNameExtendedIDParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_name_4_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCodeInjectionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCodeInjectionAccess().getCodeBlockParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_code_5_0=ruleblock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCodeInjectionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"code",
	        		lv_code_5_0, 
	        		"block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleUmpleAttribute
entryRuleUmpleAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUmpleAttributeRule(), currentNode); }
	 iv_ruleUmpleAttribute=ruleUmpleAttribute 
	 { $current=$iv_ruleUmpleAttribute.current; } 
	 EOF 
;

// Rule UmpleAttribute
ruleUmpleAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_autounique_0_0=	'autounique' 
    {
        createLeafNode(grammarAccess.getUmpleAttributeAccess().getAutouniqueAutouniqueKeyword_0_0_0(), "autounique"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "autounique", true, "autounique", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleAttributeAccess().getNameExtendedIDParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getUmpleAttributeAccess().getSemicolonKeyword_0_2(), null); 
    }
)
    |((
(
		lv_unique_3_0=	'unique' 
    {
        createLeafNode(grammarAccess.getUmpleAttributeAccess().getUniqueUniqueKeyword_1_0_0(), "unique"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "unique", true, "unique", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleAttributeAccess().getModifierModifierEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_modifier_4_0=ruleModifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"modifier",
	        		lv_modifier_4_0, 
	        		"Modifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleAttributeAccess().getTypeAttributeTypeParserRuleCall_1_2_0_0_0(), currentNode); 
	    }
		lv_type_5_0=ruleAttributeType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_5_0, 
	        		"AttributeType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_list_6_0=	'[]' 
    {
        createLeafNode(grammarAccess.getUmpleAttributeAccess().getListLeftSquareBracketRightSquareBracketKeyword_1_2_0_1_0(), "list"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "list", true, "[]", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?)
    |((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getUmpleAttributeAccess().getObjectUmpleClassCrossReference_1_2_1_0_0(), "object"); 
	}

)
)(
(
		lv_list_8_0=	'[]' 
    {
        createLeafNode(grammarAccess.getUmpleAttributeAccess().getListLeftSquareBracketRightSquareBracketKeyword_1_2_1_1_0(), "list"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "list", true, "[]", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleAttributeAccess().getNameExtendedIDParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_name_9_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_9_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getUmpleAttributeAccess().getEqualsSignKeyword_1_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUmpleAttributeAccess().getValuePrimitiveTypeParserRuleCall_1_4_1_0(), currentNode); 
	    }
		lv_value_11_0=rulePrimitiveType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUmpleAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_11_0, 
	        		"PrimitiveType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getUmpleAttributeAccess().getSemicolonKeyword_1_5(), null); 
    }
))
;





// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveTypeRule(), currentNode); } 
	 iv_rulePrimitiveType=rulePrimitiveType 
	 { $current=$iv_rulePrimitiveType.current.getText(); }  
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getPrimitiveTypeAccess().getINTTerminalRuleCall_0(), null); 
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    createLeafNode(grammarAccess.getPrimitiveTypeAccess().getSTRINGTerminalRuleCall_1(), null); 
    }
)
    ;





// Entry rule entryRuleAttributeType
entryRuleAttributeType returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeTypeRule(), currentNode); } 
	 iv_ruleAttributeType=ruleAttributeType 
	 { $current=$iv_ruleAttributeType.current.getText(); }  
	 EOF 
;

// Rule AttributeType
ruleAttributeType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='Date' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getDateKeyword_0(), null); 
    }

    |
	kw='Time' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getTimeKeyword_1(), null); 
    }

    |
	kw='Double' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getDoubleKeyword_2(), null); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getDoubleKeyword_3(), null); 
    }

    |
	kw='Integer' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getIntegerKeyword_4(), null); 
    }

    |
	kw='integer' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getIntegerKeyword_5(), null); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getIntKeyword_6(), null); 
    }

    |
	kw='Boolean' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getBooleanKeyword_7(), null); 
    }

    |
	kw='boolean' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getBooleanKeyword_8(), null); 
    }

    |
	kw='String' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getStringKeyword_9(), null); 
    }

    |
	kw='string' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getStringKeyword_10(), null); 
    }
)
    ;





// Entry rule entryRuleKey
entryRuleKey returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getKeyRule(), currentNode); }
	 iv_ruleKey=ruleKey 
	 { $current=$iv_ruleKey.current; } 
	 EOF 
;

// Rule Key
ruleKey returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'key' 
    {
        createLeafNode(grammarAccess.getKeyAccess().getKeyKeyword_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getKeyAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
((
(
		lv_keys_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getKeyAccess().getKeysIDTerminalRuleCall_2_0_0(), "keys"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKeyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"keys",
	        		lv_keys_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getKeyAccess().getCommaKeyword_2_1_0(), null); 
    }
(
(
		lv_keys_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getKeyAccess().getKeysIDTerminalRuleCall_2_1_1_0(), "keys"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKeyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"keys",
	        		lv_keys_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))*)?	'}' 
    {
        createLeafNode(grammarAccess.getKeyAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleDepend
entryRuleDepend returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDependRule(), currentNode); }
	 iv_ruleDepend=ruleDepend 
	 { $current=$iv_ruleDepend.current; } 
	 EOF 
;

// Rule Depend
ruleDepend returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'depend' 
    {
        createLeafNode(grammarAccess.getDependAccess().getDependKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDependAccess().getNameExtendedIDParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDependRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'.*' 
    {
        createLeafNode(grammarAccess.getDependAccess().getFullStopAsteriskKeyword_2(), null); 
    }
)?	';' 
    {
        createLeafNode(grammarAccess.getDependAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleStateMachineDefinition
entryRuleStateMachineDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateMachineDefinitionRule(), currentNode); }
	 iv_ruleStateMachineDefinition=ruleStateMachineDefinition 
	 { $current=$iv_ruleStateMachineDefinition.current; } 
	 EOF 
;

// Rule StateMachineDefinition
ruleStateMachineDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'statemachine' 
    {
        createLeafNode(grammarAccess.getStateMachineDefinitionAccess().getStatemachineKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateMachineDefinitionAccess().getNameExtendedIDParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateMachineDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getStateMachineDefinitionAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateMachineDefinitionAccess().getStatesStateParserRuleCall_3_0(), currentNode); 
	    }
		lv_states_3_0=ruleState		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateMachineDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"states",
	        		lv_states_3_0, 
	        		"State", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getStateMachineDefinitionAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleStateMachine
entryRuleStateMachine returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateMachineRule(), currentNode); }
	 iv_ruleStateMachine=ruleStateMachine 
	 { $current=$iv_ruleStateMachine.current; } 
	 EOF 
;

// Rule StateMachine
ruleStateMachine returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStateMachineAccess().getENUMParserRuleCall_0(), currentNode); 
    }
    this_ENUM_0=ruleENUM
    { 
        $current = $this_ENUM_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStateMachineAccess().getInlineStateMachineParserRuleCall_1(), currentNode); 
    }
    this_InlineStateMachine_1=ruleInlineStateMachine
    { 
        $current = $this_InlineStateMachine_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStateMachineAccess().getReferencedStateMachineParserRuleCall_2(), currentNode); 
    }
    this_ReferencedStateMachine_2=ruleReferencedStateMachine
    { 
        $current = $this_ReferencedStateMachine_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleInlineStateMachine
entryRuleInlineStateMachine returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInlineStateMachineRule(), currentNode); }
	 iv_ruleInlineStateMachine=ruleInlineStateMachine 
	 { $current=$iv_ruleInlineStateMachine.current; } 
	 EOF 
;

// Rule InlineStateMachine
ruleInlineStateMachine returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInlineStateMachineAccess().getNameExtendedIDParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlineStateMachineRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getInlineStateMachineAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInlineStateMachineAccess().getStatesStateParserRuleCall_2_0(), currentNode); 
	    }
		lv_states_2_0=ruleState		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlineStateMachineRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"states",
	        		lv_states_2_0, 
	        		"State", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getInlineStateMachineAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleReferencedStateMachine
entryRuleReferencedStateMachine returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReferencedStateMachineRule(), currentNode); }
	 iv_ruleReferencedStateMachine=ruleReferencedStateMachine 
	 { $current=$iv_ruleReferencedStateMachine.current; } 
	 EOF 
;

// Rule ReferencedStateMachine
ruleReferencedStateMachine returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferencedStateMachineAccess().getNameExtendedIDParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferencedStateMachineRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'as' 
    {
        createLeafNode(grammarAccess.getReferencedStateMachineAccess().getAsKeyword_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getReferencedStateMachineRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getReferencedStateMachineAccess().getMachineStateMachineDefinitionCrossReference_2_0(), "machine"); 
	}

)
)	';' 
    {
        createLeafNode(grammarAccess.getReferencedStateMachineAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleENUM
entryRuleENUM returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getENUMRule(), currentNode); }
	 iv_ruleENUM=ruleENUM 
	 { $current=$iv_ruleENUM.current; } 
	 EOF 
;

// Rule ENUM
ruleENUM returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getENUMAccess().getNameExtendedIDParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getENUMRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getENUMAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getENUMAccess().getState1ExtendedIDParserRuleCall_2_0(), currentNode); 
	    }
		lv_state1_2_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getENUMRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"state1",
	        		lv_state1_2_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getENUMAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getENUMAccess().getStatesExtendedIDParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_states_4_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getENUMRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"states",
	        		lv_states_4_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getENUMAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateRule(), currentNode); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getStateTraceDirectiveTraceDirectiveParserRuleCall_0_0(), currentNode); 
	    }
		lv_stateTraceDirective_0_0=ruleTraceDirective		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"stateTraceDirective",
	        		lv_stateTraceDirective_0_0, 
	        		"TraceDirective", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |((	'conc' 
    {
        createLeafNode(grammarAccess.getStateAccess().getConcKeyword_1_0(), null); 
    }
)?(	'concurrent' 
    {
        createLeafNode(grammarAccess.getStateAccess().getConcurrentKeyword_1_1(), null); 
    }
)?(	'|' 
    {
        createLeafNode(grammarAccess.getStateAccess().getVerticalLineKeyword_1_2(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getStateNameExtendedIDParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_stateName_4_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"stateName",
	        		lv_stateName_4_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_1_4(), null); 
    }
((	'*' 
    {
        createLeafNode(grammarAccess.getStateAccess().getAsteriskKeyword_1_5_0(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getStatesStateEntityParserRuleCall_1_5_1_0(), currentNode); 
	    }
		lv_states_7_0=ruleStateEntity		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"states",
	        		lv_states_7_0, 
	        		"StateEntity", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_1_6(), null); 
    }
))
;





// Entry rule entryRuleStateEntity
entryRuleStateEntity returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateEntityRule(), currentNode); }
	 iv_ruleStateEntity=ruleStateEntity 
	 { $current=$iv_ruleStateEntity.current; } 
	 EOF 
;

// Rule StateEntity
ruleStateEntity returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStateEntityAccess().getTransitionParserRuleCall_0(), currentNode); 
    }
    this_Transition_0=ruleTransition
    { 
        $current = $this_Transition_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStateEntityAccess().getEntryOrExitActionParserRuleCall_1(), currentNode); 
    }
    this_EntryOrExitAction_1=ruleEntryOrExitAction
    { 
        $current = $this_EntryOrExitAction_1.current; 
        currentNode = currentNode.getParent();
    }

    |(
    { 
        currentNode=createCompositeNode(grammarAccess.getStateEntityAccess().getActivityParserRuleCall_2_0(), currentNode); 
    }
    this_Activity_2=ruleActivity
    { 
        $current = $this_Activity_2.current; 
        currentNode = currentNode.getParent();
    }
(	'->' 
    {
        createLeafNode(grammarAccess.getStateEntityAccess().getHyphenMinusGreaterThanSignKeyword_2_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getStateEntityAccess().getExtendedIDParserRuleCall_2_1_1(), currentNode); 
    }
ruleextendedID
    { 
        currentNode = currentNode.getParent();
    }
	';' 
    {
        createLeafNode(grammarAccess.getStateEntityAccess().getSemicolonKeyword_2_1_2(), null); 
    }
)?)
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStateEntityAccess().getStateParserRuleCall_3(), currentNode); 
    }
    this_State_6=ruleState
    { 
        $current = $this_State_6.current; 
        currentNode = currentNode.getParent();
    }

    |(
    { 
        currentNode=createCompositeNode(grammarAccess.getStateEntityAccess().getExpressionParserRuleCall_4_0(), currentNode); 
    }
    this_expression_7=ruleexpression
    { 
        $current = $this_expression_7.current; 
        currentNode = currentNode.getParent();
    }
	';' 
    {
        createLeafNode(grammarAccess.getStateEntityAccess().getSemicolonKeyword_4_1(), null); 
    }
))
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTransitionRule(), currentNode); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getGuardParserRuleCall_0_0(), currentNode); 
    }
    this_Guard_0=ruleGuard
    { 
        $current = $this_Guard_0.current; 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getEventsEventDefinitionParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_events_1_0=ruleEventDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"events",
	        		lv_events_1_0, 
	        		"EventDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'->' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_0_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getAActionParserRuleCall_0_3_0(), currentNode); 
	    }
		lv_a_3_0=ruleAction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"a",
	        		lv_a_3_0, 
	        		"Action", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getStateNameExtendedIDParserRuleCall_0_4_0(), currentNode); 
	    }
		lv_stateName_4_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"stateName",
	        		lv_stateName_4_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getSemicolonKeyword_0_5(), null); 
    }
)
    |(
    { 
        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getEventDefinitionParserRuleCall_1_0(), currentNode); 
    }
    this_EventDefinition_6=ruleEventDefinition
    { 
        $current = $this_EventDefinition_6.current; 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getGGuardParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_g_7_0=ruleGuard		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"g",
	        		lv_g_7_0, 
	        		"Guard", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'->' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_1_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getAActionParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_a_9_0=ruleAction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"a",
	        		lv_a_9_0, 
	        		"Action", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getStateNameExtendedIDParserRuleCall_1_4_0(), currentNode); 
	    }
		lv_stateName_10_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"stateName",
	        		lv_stateName_10_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getSemicolonKeyword_1_5(), null); 
    }
))
;





// Entry rule entryRuleEventDefinition
entryRuleEventDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEventDefinitionRule(), currentNode); }
	 iv_ruleEventDefinition=ruleEventDefinition 
	 { $current=$iv_ruleEventDefinition.current; } 
	 EOF 
;

// Rule EventDefinition
ruleEventDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEventDefinitionAccess().getTimedEventParserRuleCall_0(), currentNode); 
    }
ruleTimedEvent
    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEventDefinitionAccess().getWaitEventParserRuleCall_1(), currentNode); 
    }
ruleWaitEvent
    { 
        currentNode = currentNode.getParent();
    }

    |(
(
		lv_eventID_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEventDefinitionAccess().getEventIDIDTerminalRuleCall_2_0(), "eventID"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEventDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"eventID",
	        		lv_eventID_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleTimedEvent
entryRuleTimedEvent returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTimedEventRule(), currentNode); } 
	 iv_ruleTimedEvent=ruleTimedEvent 
	 { $current=$iv_ruleTimedEvent.current.getText(); }  
	 EOF 
;

// Rule TimedEvent
ruleTimedEvent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='afterEvery' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getTimedEventAccess().getAfterEveryKeyword_0(), null); 
    }

	kw='(' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getTimedEventAccess().getLeftParenthesisKeyword_1(), null); 
    }
(    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getTimedEventAccess().getINTTerminalRuleCall_2_0(), null); 
    }

    |    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    createLeafNode(grammarAccess.getTimedEventAccess().getIDTerminalRuleCall_2_1(), null); 
    }
)
	kw=')' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getTimedEventAccess().getRightParenthesisKeyword_3(), null); 
    }
)
    ;





// Entry rule entryRuleWaitEvent
entryRuleWaitEvent returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWaitEventRule(), currentNode); } 
	 iv_ruleWaitEvent=ruleWaitEvent 
	 { $current=$iv_ruleWaitEvent.current.getText(); }  
	 EOF 
;

// Rule WaitEvent
ruleWaitEvent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='wait' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWaitEventAccess().getWaitKeyword_0(), null); 
    }

	kw='(' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWaitEventAccess().getLeftParenthesisKeyword_1(), null); 
    }
(    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getWaitEventAccess().getINTTerminalRuleCall_2_0(), null); 
    }

    |    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    createLeafNode(grammarAccess.getWaitEventAccess().getIDTerminalRuleCall_2_1(), null); 
    }
)
	kw=')' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWaitEventAccess().getRightParenthesisKeyword_3(), null); 
    }
)
    ;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getActionRule(), currentNode); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'/' 
    {
        createLeafNode(grammarAccess.getActionAccess().getSolidusKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getActionAccess().getCodeBlockParserRuleCall_1_0(), currentNode); 
	    }
		lv_code_1_0=ruleblock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"code",
	        		lv_code_1_0, 
	        		"block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleEntryOrExitAction
entryRuleEntryOrExitAction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEntryOrExitActionRule(), currentNode); }
	 iv_ruleEntryOrExitAction=ruleEntryOrExitAction 
	 { $current=$iv_ruleEntryOrExitAction.current; } 
	 EOF 
;

// Rule EntryOrExitAction
ruleEntryOrExitAction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_type_0_0=	'entry' 
    {
        createLeafNode(grammarAccess.getEntryOrExitActionAccess().getTypeEntryKeyword_0_0_0(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntryOrExitActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_0_0, "entry", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_type_1_0=	'exit' 
    {
        createLeafNode(grammarAccess.getEntryOrExitActionAccess().getTypeExitKeyword_0_1_0(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntryOrExitActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_1_0, "exit", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))	'/' 
    {
        createLeafNode(grammarAccess.getEntryOrExitActionAccess().getSolidusKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEntryOrExitActionAccess().getCodeBlockParserRuleCall_2_0(), currentNode); 
	    }
		lv_code_3_0=ruleblock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntryOrExitActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"code",
	        		lv_code_3_0, 
	        		"block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleActivity
entryRuleActivity returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getActivityRule(), currentNode); }
	 iv_ruleActivity=ruleActivity 
	 { $current=$iv_ruleActivity.current; } 
	 EOF 
;

// Rule Activity
ruleActivity returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'do' 
    {
        createLeafNode(grammarAccess.getActivityAccess().getDoKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getActivityAccess().getCodeBlockParserRuleCall_1_0(), currentNode); 
	    }
		lv_code_1_0=ruleblock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActivityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"code",
	        		lv_code_1_0, 
	        		"block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleGuard
entryRuleGuard returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGuardRule(), currentNode); }
	 iv_ruleGuard=ruleGuard 
	 { $current=$iv_ruleGuard.current; } 
	 EOF 
;

// Rule Guard
ruleGuard returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'[' 
    {
        createLeafNode(grammarAccess.getGuardAccess().getLeftSquareBracketKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getGuardAccess().getGuardCodeParserRuleCall_1(), currentNode); 
    }
    this_GuardCode_1=ruleGuardCode
    { 
        $current = $this_GuardCode_1.current; 
        currentNode = currentNode.getParent();
    }
	']' 
    {
        createLeafNode(grammarAccess.getGuardAccess().getRightSquareBracketKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleGuardCode
entryRuleGuardCode returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGuardCodeRule(), currentNode); }
	 iv_ruleGuardCode=ruleGuardCode 
	 { $current=$iv_ruleGuardCode.current; } 
	 EOF 
;

// Rule GuardCode
ruleGuardCode returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getGuardCodeAccess().getExpressionParserRuleCall(), currentNode); 
    }
    this_expression_0=ruleexpression
    { 
        $current = $this_expression_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRulePosition
entryRulePosition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPositionRule(), currentNode); }
	 iv_rulePosition=rulePosition 
	 { $current=$iv_rulePosition.current; } 
	 EOF 
;

// Rule Position
rulePosition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPositionAccess().getAAssociationPositionParserRuleCall_0_0(), currentNode); 
	    }
		lv_a_0_0=ruleAssociationPosition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"a",
	        		lv_a_0_0, 
	        		"AssociationPosition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPositionAccess().getCClassPositionParserRuleCall_1_0(), currentNode); 
	    }
		lv_c_1_0=ruleClassPosition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"c",
	        		lv_c_1_0, 
	        		"ClassPosition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleClassPosition
entryRuleClassPosition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassPositionRule(), currentNode); }
	 iv_ruleClassPosition=ruleClassPosition 
	 { $current=$iv_ruleClassPosition.current; } 
	 EOF 
;

// Rule ClassPosition
ruleClassPosition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'position' 
    {
        createLeafNode(grammarAccess.getClassPositionAccess().getPositionKeyword_0(), null); 
    }
(
(
		lv_x_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getClassPositionAccess().getXINTTerminalRuleCall_1_0(), "x"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"x",
	        		lv_x_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_y_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getClassPositionAccess().getYINTTerminalRuleCall_2_0(), "y"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"y",
	        		lv_y_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_width_3_0=RULE_INT
		{
			createLeafNode(grammarAccess.getClassPositionAccess().getWidthINTTerminalRuleCall_3_0(), "width"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"width",
	        		lv_width_3_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_height_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getClassPositionAccess().getHeightINTTerminalRuleCall_4_0(), "height"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"height",
	        		lv_height_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getClassPositionAccess().getSemicolonKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleAssociationPosition
entryRuleAssociationPosition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssociationPositionRule(), currentNode); }
	 iv_ruleAssociationPosition=ruleAssociationPosition 
	 { $current=$iv_ruleAssociationPosition.current; } 
	 EOF 
;

// Rule AssociationPosition
ruleAssociationPosition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'position.association' 
    {
        createLeafNode(grammarAccess.getAssociationPositionAccess().getPositionAssociationKeyword_0(), null); 
    }
(
(
		lv_index_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getAssociationPositionAccess().getIndexINTTerminalRuleCall_1_0(), "index"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationPositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"index",
	        		lv_index_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssociationPositionAccess().getC1CoordinateParserRuleCall_2_0(), currentNode); 
	    }
		lv_c1_2_0=ruleCoordinate		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationPositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"c1",
	        		lv_c1_2_0, 
	        		"Coordinate", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssociationPositionAccess().getC2CoordinateParserRuleCall_3_0(), currentNode); 
	    }
		lv_c2_3_0=ruleCoordinate		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationPositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"c2",
	        		lv_c2_3_0, 
	        		"Coordinate", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getAssociationPositionAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleCoordinate
entryRuleCoordinate returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCoordinateRule(), currentNode); }
	 iv_ruleCoordinate=ruleCoordinate 
	 { $current=$iv_ruleCoordinate.current; } 
	 EOF 
;

// Rule Coordinate
ruleCoordinate returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_x_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getCoordinateAccess().getXINTTerminalRuleCall_0_0(), "x"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCoordinateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"x",
	        		lv_x_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getCoordinateAccess().getCommaKeyword_1(), null); 
    }
(
(
		lv_y_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getCoordinateAccess().getYINTTerminalRuleCall_2_0(), "y"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCoordinateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"y",
	        		lv_y_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleextendedID
entryRuleextendedID returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExtendedIDRule(), currentNode); } 
	 iv_ruleextendedID=ruleextendedID 
	 { $current=$iv_ruleextendedID.current.getText(); }  
	 EOF 
;

// Rule extendedID
ruleextendedID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0(), null); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1(), null); 
    }
)*)
    ;





// Entry rule entryRulefileID
entryRulefileID returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFileIDRule(), currentNode); } 
	 iv_rulefileID=rulefileID 
	 { $current=$iv_rulefileID.current.getText(); }  
	 EOF 
;

// Rule fileID
rulefileID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFileIDAccess().getCHARSParserRuleCall_0(), currentNode); 
    }
    this_CHARS_0=ruleCHARS    {
		$current.merge(this_CHARS_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFileIDAccess().getCHARSParserRuleCall_1(), currentNode); 
    }
    this_CHARS_1=ruleCHARS    {
		$current.merge(this_CHARS_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*)
    ;





// Entry rule entryRuleCHARS
entryRuleCHARS returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCHARSRule(), currentNode); } 
	 iv_ruleCHARS=ruleCHARS 
	 { $current=$iv_ruleCHARS.current.getText(); }  
	 EOF 
;

// Rule CHARS
ruleCHARS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getCHARSAccess().getExtendedIDParserRuleCall_0(), currentNode); 
    }
    this_extendedID_0=ruleextendedID    {
		$current.merge(this_extendedID_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getCHARSAccess().getINTTerminalRuleCall_1(), null); 
    }
)
    ;





// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDOUBLERule(), currentNode); } 
	 iv_ruleDOUBLE=ruleDOUBLE 
	 { $current=$iv_ruleDOUBLE.current.getText(); }  
	 EOF 
;

// Rule DOUBLE
ruleDOUBLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_0(), null); 
    }

	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDOUBLEAccess().getFullStopKeyword_1(), null); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_2(), null); 
    }
)
    ;





// Entry rule entryRuleTraceDirective
entryRuleTraceDirective returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTraceDirectiveRule(), currentNode); }
	 iv_ruleTraceDirective=ruleTraceDirective 
	 { $current=$iv_ruleTraceDirective.current; } 
	 EOF 
;

// Rule TraceDirective
ruleTraceDirective returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
(
		lv_traceStart_0_1=	'trace' 
    {
        createLeafNode(grammarAccess.getTraceDirectiveAccess().getTraceStartTraceKeyword_0_0_0(), "traceStart"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "traceStart", lv_traceStart_0_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_traceStart_0_2=	'Trace' 
    {
        createLeafNode(grammarAccess.getTraceDirectiveAccess().getTraceStartTraceKeyword_0_0_1(), "traceStart"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "traceStart", lv_traceStart_0_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraceDirectiveAccess().getModelElementModelElementParserRuleCall_1_0(), currentNode); 
	    }
		lv_modelElement_1_0=ruleModelElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"modelElement",
	        		lv_modelElement_1_0, 
	        		"ModelElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraceDirectiveAccess().getConditionRHSConditionRHSParserRuleCall_2_0(), currentNode); 
	    }
		lv_conditionRHS_2_0=ruleConditionRHS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"conditionRHS",
	        		lv_conditionRHS_2_0, 
	        		"ConditionRHS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_elementPattern_3_0=	'*' 
    {
        createLeafNode(grammarAccess.getTraceDirectiveAccess().getElementPatternAsteriskKeyword_3_0(), "elementPattern"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "elementPattern", lv_elementPattern_3_0, "*", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?((
(
		lv_for_4_0=	'for' 
    {
        createLeafNode(grammarAccess.getTraceDirectiveAccess().getForForKeyword_4_0_0(), "for"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "for", true, "for", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_repeats_5_0=RULE_INT
		{
			createLeafNode(grammarAccess.getTraceDirectiveAccess().getRepeatsINTTerminalRuleCall_4_1_0(), "repeats"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"repeats",
	        		lv_repeats_5_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?((
(
		lv_during_6_0=	'during' 
    {
        createLeafNode(grammarAccess.getTraceDirectiveAccess().getDuringDuringKeyword_5_0_0(), "during"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "during", true, "during", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_duration_7_0=RULE_INT
		{
			createLeafNode(grammarAccess.getTraceDirectiveAccess().getDurationINTTerminalRuleCall_5_1_0(), "duration"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"duration",
	        		lv_duration_7_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_durationUnite_8_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTraceDirectiveAccess().getDurationUniteIDTerminalRuleCall_5_2_0(), "durationUnite"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"durationUnite",
	        		lv_durationUnite_8_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?((
(
		lv_hasPeriod_9_0=	'period' 
    {
        createLeafNode(grammarAccess.getTraceDirectiveAccess().getHasPeriodPeriodKeyword_6_0_0(), "hasPeriod"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "hasPeriod", true, "period", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_period_10_0=RULE_INT
		{
			createLeafNode(grammarAccess.getTraceDirectiveAccess().getPeriodINTTerminalRuleCall_6_1_0(), "period"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"period",
	        		lv_period_10_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_periodUnite_11_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTraceDirectiveAccess().getPeriodUniteIDTerminalRuleCall_6_2_0(), "periodUnite"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"periodUnite",
	        		lv_periodUnite_11_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'execute' 
    {
        createLeafNode(grammarAccess.getTraceDirectiveAccess().getExecuteKeyword_7_0(), null); 
    }
(((
(
		lv_codeToExecute_13_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getTraceDirectiveAccess().getCodeToExecuteSTRINGTerminalRuleCall_7_1_0_0_0(), "codeToExecute"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"codeToExecute",
	        		lv_codeToExecute_13_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraceDirectiveAccess().getTraceRecordTraceRecordParserRuleCall_7_1_0_1_0(), currentNode); 
	    }
		lv_traceRecord_14_0=ruleTraceRecord		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"traceRecord",
	        		lv_traceRecord_14_0, 
	        		"TraceRecord", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((	'{' 
    {
        createLeafNode(grammarAccess.getTraceDirectiveAccess().getLeftCurlyBracketKeyword_7_1_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraceDirectiveAccess().getTraceRecordTraceRecordParserRuleCall_7_1_1_0_1_0(), currentNode); 
	    }
		lv_traceRecord_16_0=ruleTraceRecord		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"traceRecord",
	        		lv_traceRecord_16_0, 
	        		"TraceRecord", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTraceDirectiveAccess().getCommaKeyword_7_1_1_0_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraceDirectiveAccess().getTraceRecordTraceRecordParserRuleCall_7_1_1_0_2_1_0(), currentNode); 
	    }
		lv_traceRecord_18_0=ruleTraceRecord		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"traceRecord",
	        		lv_traceRecord_18_0, 
	        		"TraceRecord", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)	'}' 
    {
        createLeafNode(grammarAccess.getTraceDirectiveAccess().getRightCurlyBracketKeyword_7_1_1_1(), null); 
    }
)))?(	'until' 
    {
        createLeafNode(grammarAccess.getTraceDirectiveAccess().getUntilKeyword_8_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraceDirectiveAccess().getUntilConditionTraceConditionParserRuleCall_8_1_0(), currentNode); 
	    }
		lv_untilCondition_21_0=ruleTraceCondition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"untilCondition",
	        		lv_untilCondition_21_0, 
	        		"TraceCondition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'where' 
    {
        createLeafNode(grammarAccess.getTraceDirectiveAccess().getWhereKeyword_9_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraceDirectiveAccess().getWhereConditionTraceConditionParserRuleCall_9_1_0(), currentNode); 
	    }
		lv_whereCondition_23_0=ruleTraceCondition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whereCondition",
	        		lv_whereCondition_23_0, 
	        		"TraceCondition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getTraceDirectiveAccess().getSemicolonKeyword_10(), null); 
    }
)
;





// Entry rule entryRuleTraceCase
entryRuleTraceCase returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTraceCaseRule(), currentNode); }
	 iv_ruleTraceCase=ruleTraceCase 
	 { $current=$iv_ruleTraceCase.current; } 
	 EOF 
;

// Rule TraceCase
ruleTraceCase returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'tracecase' 
    {
        createLeafNode(grammarAccess.getTraceCaseAccess().getTracecaseKeyword_0_0(), null); 
    }
(
(
		lv_traceCaseName_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTraceCaseAccess().getTraceCaseNameIDTerminalRuleCall_0_1_0(), "traceCaseName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"traceCaseName",
	        		lv_traceCaseName_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getTraceCaseAccess().getLeftCurlyBracketKeyword_0_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraceCaseAccess().getTraceDirectiveTraceDirectiveParserRuleCall_0_3_0(), currentNode); 
	    }
		lv_traceDirective_3_0=ruleTraceDirective		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"traceDirective",
	        		lv_traceDirective_3_0, 
	        		"TraceDirective", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getTraceCaseAccess().getRightCurlyBracketKeyword_0_4(), null); 
    }
)
    |(	'activate' 
    {
        createLeafNode(grammarAccess.getTraceCaseAccess().getActivateKeyword_1_0(), null); 
    }
(
(
		lv_activateCaseName_6_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTraceCaseAccess().getActivateCaseNameIDTerminalRuleCall_1_1_0(), "activateCaseName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"activateCaseName",
	        		lv_activateCaseName_6_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((
(
		lv_activateOnThis_7_0=	'on this' 
    {
        createLeafNode(grammarAccess.getTraceCaseAccess().getActivateOnThisOnThisKeyword_1_2_0_0(), "activateOnThis"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "activateOnThis", true, "on this", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_activateOnThisThread_8_0=	'on thisThread' 
    {
        createLeafNode(grammarAccess.getTraceCaseAccess().getActivateOnThisThreadOnThisThreadKeyword_1_2_1_0(), "activateOnThisThread"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "activateOnThisThread", true, "on thisThread", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?((	'for' 
    {
        createLeafNode(grammarAccess.getTraceCaseAccess().getForKeyword_1_3_0_0(), null); 
    }
(
(
		lv_repeats_10_0=RULE_INT
		{
			createLeafNode(grammarAccess.getTraceCaseAccess().getRepeatsINTTerminalRuleCall_1_3_0_1_0(), "repeats"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"repeats",
	        		lv_repeats_10_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |(	'period' 
    {
        createLeafNode(grammarAccess.getTraceCaseAccess().getPeriodKeyword_1_3_1_0(), null); 
    }
(
(
		lv_period_12_0=RULE_INT
		{
			createLeafNode(grammarAccess.getTraceCaseAccess().getPeriodINTTerminalRuleCall_1_3_1_1_0(), "period"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"period",
	        		lv_period_12_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_unite_13_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTraceCaseAccess().getUniteIDTerminalRuleCall_1_3_1_2_0(), "unite"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"unite",
	        		lv_unite_13_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |(	'during' 
    {
        createLeafNode(grammarAccess.getTraceCaseAccess().getDuringKeyword_1_3_2_0(), null); 
    }
(
(
		lv_duration_15_0=RULE_INT
		{
			createLeafNode(grammarAccess.getTraceCaseAccess().getDurationINTTerminalRuleCall_1_3_2_1_0(), "duration"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"duration",
	        		lv_duration_15_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_unite_16_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTraceCaseAccess().getUniteIDTerminalRuleCall_1_3_2_2_0(), "unite"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"unite",
	        		lv_unite_16_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |(	'until' 
    {
        createLeafNode(grammarAccess.getTraceCaseAccess().getUntilKeyword_1_3_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraceCaseAccess().getUntilConditionTraceConditionParserRuleCall_1_3_3_1_0(), currentNode); 
	    }
		lv_untilCondition_18_0=ruleTraceCondition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"untilCondition",
	        		lv_untilCondition_18_0, 
	        		"TraceCondition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?	';' 
    {
        createLeafNode(grammarAccess.getTraceCaseAccess().getSemicolonKeyword_1_4(), null); 
    }
)
    |(	'deactivate' 
    {
        createLeafNode(grammarAccess.getTraceCaseAccess().getDeactivateKeyword_2_0(), null); 
    }
(
(
		lv_deactivateCaseName_21_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTraceCaseAccess().getDeactivateCaseNameIDTerminalRuleCall_2_1_0(), "deactivateCaseName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"deactivateCaseName",
	        		lv_deactivateCaseName_21_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'for' 
    {
        createLeafNode(grammarAccess.getTraceCaseAccess().getForKeyword_2_2_0(), null); 
    }
(
(
		lv_deactivateTime_23_0=RULE_INT
		{
			createLeafNode(grammarAccess.getTraceCaseAccess().getDeactivateTimeINTTerminalRuleCall_2_2_1_0(), "deactivateTime"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"deactivateTime",
	        		lv_deactivateTime_23_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_unite_24_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTraceCaseAccess().getUniteIDTerminalRuleCall_2_2_2_0(), "unite"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"unite",
	        		lv_unite_24_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getTraceCaseAccess().getSemicolonKeyword_2_3(), null); 
    }
))
;





// Entry rule entryRuleTraceRecord
entryRuleTraceRecord returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTraceRecordRule(), currentNode); }
	 iv_ruleTraceRecord=ruleTraceRecord 
	 { $current=$iv_ruleTraceRecord.current; } 
	 EOF 
;

// Rule TraceRecord
ruleTraceRecord returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'record' 
    {
        createLeafNode(grammarAccess.getTraceRecordAccess().getRecordKeyword_0_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getTraceRecordAccess().getLeftParenthesisKeyword_0_1(), null); 
    }
(
(
		lv_objectBeingTraced_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getTraceRecordAccess().getObjectBeingTracedSTRINGTerminalRuleCall_0_2_0(), "objectBeingTraced"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceRecordRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"objectBeingTraced",
	        		lv_objectBeingTraced_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTraceRecordAccess().getCommaKeyword_0_3_0(), null); 
    }
(
(
		lv_textOutput_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTraceRecordAccess().getTextOutputIDTerminalRuleCall_0_3_1_0(), "textOutput"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceRecordRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"textOutput",
	        		lv_textOutput_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)	')' 
    {
        createLeafNode(grammarAccess.getTraceRecordAccess().getRightParenthesisKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleTraceCondition
entryRuleTraceCondition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTraceConditionRule(), currentNode); }
	 iv_ruleTraceCondition=ruleTraceCondition 
	 { $current=$iv_ruleTraceCondition.current; } 
	 EOF 
;

// Rule TraceCondition
ruleTraceCondition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTraceConditionAccess().getCompoundTraceConditionParserRuleCall_0(), currentNode); 
    }
    this_CompoundTraceCondition_0=ruleCompoundTraceCondition
    { 
        $current = $this_CompoundTraceCondition_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTraceConditionAccess().getSimpleTraceConditionParserRuleCall_1(), currentNode); 
    }
    this_SimpleTraceCondition_1=ruleSimpleTraceCondition
    { 
        $current = $this_SimpleTraceCondition_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleCompoundTraceCondition
entryRuleCompoundTraceCondition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompoundTraceConditionRule(), currentNode); }
	 iv_ruleCompoundTraceCondition=ruleCompoundTraceCondition 
	 { $current=$iv_ruleCompoundTraceCondition.current; } 
	 EOF 
;

// Rule CompoundTraceCondition
ruleCompoundTraceCondition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_operand_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getCompoundTraceConditionAccess().getOperandSTRINGTerminalRuleCall_0(), "operand"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundTraceConditionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operand",
	        		lv_operand_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleSimpleTraceCondition
entryRuleSimpleTraceCondition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleTraceConditionRule(), currentNode); }
	 iv_ruleSimpleTraceCondition=ruleSimpleTraceCondition 
	 { $current=$iv_ruleSimpleTraceCondition.current; } 
	 EOF 
;

// Rule SimpleTraceCondition
ruleSimpleTraceCondition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleTraceConditionAccess().getLhsModelElementParserRuleCall_0_0(), currentNode); 
	    }
		lv_lhs_0_0=ruleModelElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleTraceConditionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lhs",
	        		lv_lhs_0_0, 
	        		"ModelElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleTraceConditionAccess().getConditionRHSConditionRHSParserRuleCall_1_0(), currentNode); 
	    }
		lv_conditionRHS_1_0=ruleConditionRHS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleTraceConditionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"conditionRHS",
	        		lv_conditionRHS_1_0, 
	        		"ConditionRHS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleConditionRHS
entryRuleConditionRHS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConditionRHSRule(), currentNode); }
	 iv_ruleConditionRHS=ruleConditionRHS 
	 { $current=$iv_ruleConditionRHS.current; } 
	 EOF 
;

// Rule ConditionRHS
ruleConditionRHS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionRHSAccess().getOperandComparisonOperatorParserRuleCall_0_0(), currentNode); 
	    }
		lv_operand_0_0=ruleComparisonOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionRHSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operand",
	        		lv_operand_0_0, 
	        		"ComparisonOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionRHSAccess().getValuePrimitiveTypeParserRuleCall_1_0(), currentNode); 
	    }
		lv_value_1_0=rulePrimitiveType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionRHSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"PrimitiveType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleModelElement
entryRuleModelElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelElementRule(), currentNode); }
	 iv_ruleModelElement=ruleModelElement 
	 { $current=$iv_ruleModelElement.current; } 
	 EOF 
;

// Rule ModelElement
ruleModelElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((((
(
		lv_executeOnEntry_0_0=	'entry' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getExecuteOnEntryEntryKeyword_0_0_0_0_0(), "executeOnEntry"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "executeOnEntry", true, "entry", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_executeOnExit_1_0=	'exit' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getExecuteOnExitExitKeyword_0_0_0_1_0(), "executeOnExit"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "executeOnExit", true, "exit", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_cflow_2_0=	'cflow' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getCflowCflowKeyword_0_0_0_2_0(), "cflow"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "cflow", true, "cflow", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		lv_aMethod_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getModelElementAccess().getAMethodIDTerminalRuleCall_0_0_1_0(), "aMethod"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"aMethod",
	        		lv_aMethod_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'()' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getLeftParenthesisRightParenthesisKeyword_0_0_2(), null); 
    }
)
    |((
(
		lv_assoc_5_0=RULE_ID
		{
			createLeafNode(grammarAccess.getModelElementAccess().getAssocIDTerminalRuleCall_0_1_0_0(), "assoc"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"assoc",
	        		lv_assoc_5_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(	'cardinality' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getCardinalityKeyword_0_1_1_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getLeftParenthesisKeyword_0_1_1_1(), null); 
    }
(
(
		lv_assoc_8_0=RULE_ID
		{
			createLeafNode(grammarAccess.getModelElementAccess().getAssocIDTerminalRuleCall_0_1_1_2_0(), "assoc"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"assoc",
	        		lv_assoc_8_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getRightParenthesisKeyword_0_1_1_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelElementAccess().getConditionRHSConditionRHSParserRuleCall_0_1_1_4_0(), currentNode); 
	    }
		lv_conditionRHS_10_0=ruleConditionRHS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"conditionRHS",
	        		lv_conditionRHS_10_0, 
	        		"ConditionRHS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?))
    |(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getModelElementAccess().getAttributeUmpleAttributeCrossReference_0_2_0(), "attribute"); 
	}

)
)
    |(
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getModelElementAccess().getStateMInlineStateMachineCrossReference_0_3_0_0(), "stateM"); 
	}

    |		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getModelElementAccess().getStateMStateMachineDefinitionCrossReference_0_3_0_1(), "stateM"); 
	}

    |		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getModelElementAccess().getStateMReferencedStateMachineCrossReference_0_3_0_2(), "stateM"); 
	}

    |		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getModelElementAccess().getStateMEventDefinitionCrossReference_0_3_0_3(), "stateM"); 
	}

)

)
)
    |((
(
		lv_stateEntry_13_0=	'entry' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getStateEntryEntryKeyword_0_4_0_0(), "stateEntry"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stateEntry", true, "entry", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_stateExit_14_0=	'exit' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getStateExitExitKeyword_0_4_1_0(), "stateExit"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stateExit", true, "exit", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
    |(	'{' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getLeftCurlyBracketKeyword_1_0(), null); 
    }
((((
(
		lv_executeOnEntry_16_0=	'entry' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getExecuteOnEntryEntryKeyword_1_1_0_0_0_0(), "executeOnEntry"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "executeOnEntry", true, "entry", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_executeOnExit_17_0=	'exit' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getExecuteOnExitExitKeyword_1_1_0_0_1_0(), "executeOnExit"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "executeOnExit", true, "exit", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_cflow_18_0=	'cflow' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getCflowCflowKeyword_1_1_0_0_2_0(), "cflow"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "cflow", true, "cflow", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		lv_aMethods_19_0=RULE_ID
		{
			createLeafNode(grammarAccess.getModelElementAccess().getAMethodsIDTerminalRuleCall_1_1_0_1_0(), "aMethods"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"aMethods",
	        		lv_aMethods_19_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'()' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getLeftParenthesisRightParenthesisKeyword_1_1_0_2(), null); 
    }
)
    |(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getModelElementAccess().getAttributesUmpleAttributeCrossReference_1_1_1_0(), "attributes"); 
	}

)
))(	',' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getCommaKeyword_1_2_0(), null); 
    }
((((
(
		lv_executeOnEntry_23_0=	'entry' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getExecuteOnEntryEntryKeyword_1_2_1_0_0_0_0(), "executeOnEntry"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "executeOnEntry", true, "entry", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_executeOnExit_24_0=	'exit' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getExecuteOnExitExitKeyword_1_2_1_0_0_1_0(), "executeOnExit"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "executeOnExit", true, "exit", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_cflow_25_0=	'cflow' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getCflowCflowKeyword_1_2_1_0_0_2_0(), "cflow"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "cflow", true, "cflow", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		lv_aMethods_26_0=RULE_ID
		{
			createLeafNode(grammarAccess.getModelElementAccess().getAMethodsIDTerminalRuleCall_1_2_1_0_1_0(), "aMethods"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"aMethods",
	        		lv_aMethods_26_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'()' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getLeftParenthesisRightParenthesisKeyword_1_2_1_0_2(), null); 
    }
)
    |(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getModelElementAccess().getAttributesUmpleAttributeCrossReference_1_2_1_1_0(), "attributes"); 
	}

)
)))*	'}' 
    {
        createLeafNode(grammarAccess.getModelElementAccess().getRightCurlyBracketKeyword_1_3(), null); 
    }
))
;





// Entry rule entryRuleComparisonOperator
entryRuleComparisonOperator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getComparisonOperatorRule(), currentNode); } 
	 iv_ruleComparisonOperator=ruleComparisonOperator 
	 { $current=$iv_ruleComparisonOperator.current.getText(); }  
	 EOF 
;

// Rule ComparisonOperator
ruleComparisonOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getComparisonOperatorAccess().getGreaterThanSignKeyword_0(), null); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getComparisonOperatorAccess().getLessThanSignKeyword_1(), null); 
    }

    |
	kw='==' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getComparisonOperatorAccess().getEqualsSignEqualsSignKeyword_2(), null); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getComparisonOperatorAccess().getGreaterThanSignEqualsSignKeyword_3(), null); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getComparisonOperatorAccess().getLessThanSignEqualsSignKeyword_4(), null); 
    }
)
    ;





// Entry rule entryRuleTraceMechanism
entryRuleTraceMechanism returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTraceMechanismRule(), currentNode); }
	 iv_ruleTraceMechanism=ruleTraceMechanism 
	 { $current=$iv_ruleTraceMechanism.current; } 
	 EOF 
;

// Rule TraceMechanism
ruleTraceMechanism returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'TraceUsing' 
    {
        createLeafNode(grammarAccess.getTraceMechanismAccess().getTraceUsingKeyword_0(), null); 
    }
(
(
		lv_traceMechanism_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTraceMechanismAccess().getTraceMechanismIDTerminalRuleCall_1_0(), "traceMechanism"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceMechanismRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"traceMechanism",
	        		lv_traceMechanism_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getTraceMechanismAccess().getSemicolonKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleparExpression
entryRuleparExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParExpressionRule(), currentNode); }
	 iv_ruleparExpression=ruleparExpression 
	 { $current=$iv_ruleparExpression.current; } 
	 EOF 
;

// Rule parExpression
ruleparExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getParExpressionAccess().getLeftParenthesisKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getParExpressionAccess().getExpressionParserRuleCall_1(), currentNode); 
    }
    this_expression_1=ruleexpression
    { 
        $current = $this_expression_1.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getParExpressionAccess().getRightParenthesisKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleassignmentOperator
entryRuleassignmentOperator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentOperatorRule(), currentNode); } 
	 iv_ruleassignmentOperator=ruleassignmentOperator 
	 { $current=$iv_ruleassignmentOperator.current.getText(); }  
	 EOF 
;

// Rule assignmentOperator
ruleassignmentOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0(), null); 
    }

    |
	kw='+=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_1(), null); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getHyphenMinusEqualsSignKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleexpressionList
entryRuleexpressionList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionListRule(), currentNode); }
	 iv_ruleexpressionList=ruleexpressionList 
	 { $current=$iv_ruleexpressionList.current; } 
	 EOF 
;

// Rule expressionList
ruleexpressionList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expressions_0_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_0_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getExpressionListAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expressions_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleexpression=ruleexpression 
	 { $current=$iv_ruleexpression.current; } 
	 EOF 
;

// Rule expression
ruleexpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getExpression1ConditionalExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression1_0_0=ruleconditionalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression1",
	        		lv_expression1_0_0, 
	        		"conditionalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getAssignmentOperatorParserRuleCall_1_0(), currentNode); 
    }
ruleassignmentOperator
    { 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getExpression2ExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expression2_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression2",
	        		lv_expression2_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleconditionalExpression
entryRuleconditionalExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConditionalExpressionRule(), currentNode); }
	 iv_ruleconditionalExpression=ruleconditionalExpression 
	 { $current=$iv_ruleconditionalExpression.current; } 
	 EOF 
;

// Rule conditionalExpression
ruleconditionalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalExpressionAccess().getExpression1ConditionalOrExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression1_0_0=ruleconditionalOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression1",
	        		lv_expression1_0_0, 
	        		"conditionalOrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'?' 
    {
        createLeafNode(grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalExpressionAccess().getExpression2ExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expression2_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression2",
	        		lv_expression2_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalExpressionAccess().getExpression3ExpressionParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_expression3_4_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression3",
	        		lv_expression3_4_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleconditionalOrExpression
entryRuleconditionalOrExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConditionalOrExpressionRule(), currentNode); }
	 iv_ruleconditionalOrExpression=ruleconditionalOrExpression 
	 { $current=$iv_ruleconditionalOrExpression.current; } 
	 EOF 
;

// Rule conditionalOrExpression
ruleconditionalOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getExpression1ConditionalAndExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression1_0_0=ruleconditionalAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression1",
	        		lv_expression1_0_0, 
	        		"conditionalAndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'||' 
    {
        createLeafNode(grammarAccess.getConditionalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getExpressionRestConditionalAndExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expressionRest_2_0=ruleconditionalAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressionRest",
	        		lv_expressionRest_2_0, 
	        		"conditionalAndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleconditionalAndExpression
entryRuleconditionalAndExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConditionalAndExpressionRule(), currentNode); }
	 iv_ruleconditionalAndExpression=ruleconditionalAndExpression 
	 { $current=$iv_ruleconditionalAndExpression.current; } 
	 EOF 
;

// Rule conditionalAndExpression
ruleconditionalAndExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getExpression1EqualityExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression1_0_0=ruleequalityExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression1",
	        		lv_expression1_0_0, 
	        		"equalityExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'&&' 
    {
        createLeafNode(grammarAccess.getConditionalAndExpressionAccess().getAmpersandAmpersandKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getExpressionRestEqualityExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expressionRest_2_0=ruleequalityExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressionRest",
	        		lv_expressionRest_2_0, 
	        		"equalityExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleequalityExpression
entryRuleequalityExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEqualityExpressionRule(), currentNode); }
	 iv_ruleequalityExpression=ruleequalityExpression 
	 { $current=$iv_ruleequalityExpression.current; } 
	 EOF 
;

// Rule equalityExpression
ruleequalityExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getExpression1RelationalExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression1_0_0=rulerelationalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression1",
	        		lv_expression1_0_0, 
	        		"relationalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'==' 
    {
        createLeafNode(grammarAccess.getEqualityExpressionAccess().getEqualsSignEqualsSignKeyword_1_0_0(), null); 
    }

    |	'!=' 
    {
        createLeafNode(grammarAccess.getEqualityExpressionAccess().getExclamationMarkEqualsSignKeyword_1_0_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getExpressionRestRelationalExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expressionRest_3_0=rulerelationalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressionRest",
	        		lv_expressionRest_3_0, 
	        		"relationalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulerelationalExpression
entryRulerelationalExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationalExpressionRule(), currentNode); }
	 iv_rulerelationalExpression=rulerelationalExpression 
	 { $current=$iv_rulerelationalExpression.current; } 
	 EOF 
;

// Rule relationalExpression
rulerelationalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getExpression1AdditiveExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression1_0_0=ruleadditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression1",
	        		lv_expression1_0_0, 
	        		"additiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getRelationalOpParserRuleCall_1_0(), currentNode); 
    }
rulerelationalOp
    { 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getExpressionRestAdditiveExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expressionRest_2_0=ruleadditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressionRest",
	        		lv_expressionRest_2_0, 
	        		"additiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulerelationalOp
entryRulerelationalOp returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationalOpRule(), currentNode); } 
	 iv_rulerelationalOp=rulerelationalOp 
	 { $current=$iv_rulerelationalOp.current.getText(); }  
	 EOF 
;

// Rule relationalOp
rulerelationalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='<=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_0(), null); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_1(), null); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_2(), null); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_3(), null); 
    }
)
    ;





// Entry rule entryRuleadditiveExpression
entryRuleadditiveExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdditiveExpressionRule(), currentNode); }
	 iv_ruleadditiveExpression=ruleadditiveExpression 
	 { $current=$iv_ruleadditiveExpression.current; } 
	 EOF 
;

// Rule additiveExpression
ruleadditiveExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExpression1MultiplicativeExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression1_0_0=rulemultiplicativeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression1",
	        		lv_expression1_0_0, 
	        		"multiplicativeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'+' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_0(), null); 
    }

    |	'-' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_0_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExpressionRestMultiplicativeExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expressionRest_3_0=rulemultiplicativeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressionRest",
	        		lv_expressionRest_3_0, 
	        		"multiplicativeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulemultiplicativeExpression
entryRulemultiplicativeExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionRule(), currentNode); }
	 iv_rulemultiplicativeExpression=rulemultiplicativeExpression 
	 { $current=$iv_rulemultiplicativeExpression.current; } 
	 EOF 
;

// Rule multiplicativeExpression
rulemultiplicativeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExpression1UnaryExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression1_0_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression1",
	        		lv_expression1_0_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'*' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getAsteriskKeyword_1_0_0(), null); 
    }

    |	'/' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getSolidusKeyword_1_0_1(), null); 
    }

    |	'%' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getPercentSignKeyword_1_0_2(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExpressionRestUnaryExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expressionRest_4_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressionRest",
	        		lv_expressionRest_4_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleunaryExpression
entryRuleunaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryExpressionRule(), currentNode); }
	 iv_ruleunaryExpression=ruleunaryExpression 
	 { $current=$iv_ruleunaryExpression.current; } 
	 EOF 
;

// Rule unaryExpression
ruleunaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'+' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getPlusSignKeyword_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getExp1UnaryExpressionParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_exp1_1_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp1",
	        		lv_exp1_1_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'-' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getHyphenMinusKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getExp1UnaryExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp1_3_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp1",
	        		lv_exp1_3_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'++' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getPlusSignPlusSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getExp1UnaryExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_exp1_5_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp1",
	        		lv_exp1_5_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'--' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getHyphenMinusHyphenMinusKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getExp1UnaryExpressionParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_exp1_7_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp1",
	        		lv_exp1_7_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getExp2UnaryExpressionNotPlusMinusParserRuleCall_4_0(), currentNode); 
	    }
		lv_exp2_8_0=ruleunaryExpressionNotPlusMinus		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp2",
	        		lv_exp2_8_0, 
	        		"unaryExpressionNotPlusMinus", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleunaryExpressionNotPlusMinus
entryRuleunaryExpressionNotPlusMinus returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusRule(), currentNode); }
	 iv_ruleunaryExpressionNotPlusMinus=ruleunaryExpressionNotPlusMinus 
	 { $current=$iv_ruleunaryExpressionNotPlusMinus.current; } 
	 EOF 
;

// Rule unaryExpressionNotPlusMinus
ruleunaryExpressionNotPlusMinus returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'~' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getTildeKeyword_0_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionParserRuleCall_0_1(), currentNode); 
    }
    this_unaryExpression_1=ruleunaryExpression
    { 
        $current = $this_unaryExpression_1.current; 
        currentNode = currentNode.getParent();
    }
)
    |(	'!' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getExclamationMarkKeyword_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionParserRuleCall_1_1(), currentNode); 
    }
    this_unaryExpression_3=ruleunaryExpression
    { 
        $current = $this_unaryExpression_3.current; 
        currentNode = currentNode.getParent();
    }
)
    |(
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getPrimaryParserRuleCall_2_0(), currentNode); 
    }
    this_primary_4=ruleprimary
    { 
        $current = $this_primary_4.current; 
        currentNode = currentNode.getParent();
    }
(	'++' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getPlusSignPlusSignKeyword_2_1_0(), null); 
    }

    |	'--' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getHyphenMinusHyphenMinusKeyword_2_1_1(), null); 
    }
)?))
;





// Entry rule entryRuleprimary
entryRuleprimary returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryRule(), currentNode); }
	 iv_ruleprimary=ruleprimary 
	 { $current=$iv_ruleprimary.current; } 
	 EOF 
;

// Rule primary
ruleprimary returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getParExpressionParserRuleCall_0(), currentNode); 
    }
    this_parExpression_0=ruleparExpression
    { 
        $current = $this_parExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getLiteralParserRuleCall_1(), currentNode); 
    }
    this_Literal_1=ruleLiteral
    { 
        $current = $this_Literal_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralRule(), currentNode); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(RULE_INT
    { 
    createLeafNode(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getDOUBLEParserRuleCall_1(), currentNode); 
    }
ruleDOUBLE
    { 
        currentNode = currentNode.getParent();
    }

    |RULE_STRING
    { 
    createLeafNode(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_2(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getExtendedIDParserRuleCall_3(), currentNode); 
    }
ruleextendedID
    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getJavaFunctionCallParserRuleCall_4(), currentNode); 
    }
    this_javaFunctionCall_4=rulejavaFunctionCall
    { 
        $current = $this_javaFunctionCall_4.current; 
        currentNode = currentNode.getParent();
    }

    |	'true' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getTrueKeyword_5(), null); 
    }

    |	'TRUE' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getTRUEKeyword_6(), null); 
    }

    |	'false' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getFalseKeyword_7(), null); 
    }

    |	'FALSE' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getFALSEKeyword_8(), null); 
    }
)
;







// Entry rule entryRulefunctionDeclaration
entryRulefunctionDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionDeclarationRule(), currentNode); }
	 iv_rulefunctionDeclaration=rulefunctionDeclaration 
	 { $current=$iv_rulefunctionDeclaration.current; } 
	 EOF 
;

// Rule functionDeclaration
rulefunctionDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionDeclarationAccess().getJavaJavaFunctionDeclarationParserRuleCall_0(), currentNode); 
	    }
		lv_java_0_0=rulejavaFunctionDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"java",
	        		lv_java_0_0, 
	        		"javaFunctionDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRulefunctionDefinition
entryRulefunctionDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionDefinitionRule(), currentNode); }
	 iv_rulefunctionDefinition=rulefunctionDefinition 
	 { $current=$iv_rulefunctionDefinition.current; } 
	 EOF 
;

// Rule functionDefinition
rulefunctionDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionDefinitionAccess().getJavaJavaFunctionDefinitionParserRuleCall_0(), currentNode); 
	    }
		lv_java_0_0=rulejavaFunctionDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"java",
	        		lv_java_0_0, 
	        		"javaFunctionDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleblock
entryRuleblock returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlockRule(), currentNode); }
	 iv_ruleblock=ruleblock 
	 { $current=$iv_ruleblock.current; } 
	 EOF 
;

// Rule block
ruleblock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getBlockAccess().getJavaBlockParserRuleCall(), currentNode); 
    }
    this_javaBlock_0=rulejavaBlock
    { 
        $current = $this_javaBlock_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRulejavaFunctionDeclaration
entryRulejavaFunctionDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getJavaFunctionDeclarationRule(), currentNode); }
	 iv_rulejavaFunctionDeclaration=rulejavaFunctionDeclaration 
	 { $current=$iv_rulejavaFunctionDeclaration.current; } 
	 EOF 
;

// Rule javaFunctionDeclaration
rulejavaFunctionDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'static' 
    {
        createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getStaticKeyword_0(), null); 
    }
)?(	'public' 
    {
        createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getPublicKeyword_1_0(), null); 
    }

    |	'private' 
    {
        createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getPrivateKeyword_1_1(), null); 
    }

    |	'protected' 
    {
        createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getProtectedKeyword_1_2(), null); 
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionDeclarationAccess().getReturnTypeAttributeTypeParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_returnType_4_0=ruleAttributeType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"returnType",
	        		lv_returnType_4_0, 
	        		"AttributeType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |	'void' 
    {
        createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getVoidKeyword_2_1(), null); 
    }
)(
(
		lv_name_6_0=RULE_ID
		{
			createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_6_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getLeftParenthesisKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionDeclarationAccess().getArgListAttributeTypeParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_argList_8_0=ruleAttributeType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argList",
	        		lv_argList_8_0, 
	        		"AttributeType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionDeclarationAccess().getArgListIDExtendedIDParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_argListID_9_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argListID",
	        		lv_argListID_9_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getCommaKeyword_5_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionDeclarationAccess().getArgListAttributeTypeParserRuleCall_5_2_1_0(), currentNode); 
	    }
		lv_argList_11_0=ruleAttributeType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argList",
	        		lv_argList_11_0, 
	        		"AttributeType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionDeclarationAccess().getArgListIDExtendedIDParserRuleCall_5_2_2_0(), currentNode); 
	    }
		lv_argListID_12_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argListID",
	        		lv_argListID_12_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getRightParenthesisKeyword_6(), null); 
    }
)
;





// Entry rule entryRulejavaFunctionDefinition
entryRulejavaFunctionDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getJavaFunctionDefinitionRule(), currentNode); }
	 iv_rulejavaFunctionDefinition=rulejavaFunctionDefinition 
	 { $current=$iv_rulejavaFunctionDefinition.current; } 
	 EOF 
;

// Rule javaFunctionDefinition
rulejavaFunctionDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionDefinitionAccess().getDeclJavaFunctionDeclarationParserRuleCall_0_0(), currentNode); 
	    }
		lv_decl_0_0=rulejavaFunctionDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"decl",
	        		lv_decl_0_0, 
	        		"javaFunctionDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionDefinitionAccess().getCodeJavaBlockParserRuleCall_1_0(), currentNode); 
	    }
		lv_code_1_0=rulejavaBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"code",
	        		lv_code_1_0, 
	        		"javaBlock", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulejavaFunctionCall
entryRulejavaFunctionCall returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getJavaFunctionCallRule(), currentNode); }
	 iv_rulejavaFunctionCall=rulejavaFunctionCall 
	 { $current=$iv_rulejavaFunctionCall.current; } 
	 EOF 
;

// Rule javaFunctionCall
rulejavaFunctionCall returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionCallAccess().getNameExtendedIDParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getJavaFunctionCallAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionCallAccess().getArgsExpressionListParserRuleCall_2_0(), currentNode); 
	    }
		lv_args_2_0=ruleexpressionList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"args",
	        		lv_args_2_0, 
	        		"expressionList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	')' 
    {
        createLeafNode(grammarAccess.getJavaFunctionCallAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRulejavaBlock
entryRulejavaBlock returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getJavaBlockRule(), currentNode); }
	 iv_rulejavaBlock=rulejavaBlock 
	 { $current=$iv_rulejavaBlock.current; } 
	 EOF 
;

// Rule javaBlock
rulejavaBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'{' 
    {
        createLeafNode(grammarAccess.getJavaBlockAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaBlockAccess().getBlocksBlockStatementParserRuleCall_1_0(), currentNode); 
	    }
		lv_blocks_1_0=ruleblockStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"blocks",
	        		lv_blocks_1_0, 
	        		"blockStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getJavaBlockAccess().getRightCurlyBracketKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleblockStatement
entryRuleblockStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlockStatementRule(), currentNode); }
	 iv_ruleblockStatement=ruleblockStatement 
	 { $current=$iv_ruleblockStatement.current; } 
	 EOF 
;

// Rule blockStatement
ruleblockStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getBlockStatementAccess().getStatementParserRuleCall_0(), currentNode); 
    }
    this_statement_0=rulestatement
    { 
        $current = $this_statement_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getBlockStatementAccess().getLocalVariableDeclarationStatementParserRuleCall_1(), currentNode); 
    }
    this_localVariableDeclarationStatement_1=rulelocalVariableDeclarationStatement
    { 
        $current = $this_localVariableDeclarationStatement_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulelocalVariableDeclarationStatement
entryRulelocalVariableDeclarationStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLocalVariableDeclarationStatementRule(), currentNode); }
	 iv_rulelocalVariableDeclarationStatement=rulelocalVariableDeclarationStatement 
	 { $current=$iv_rulelocalVariableDeclarationStatement.current; } 
	 EOF 
;

// Rule localVariableDeclarationStatement
rulelocalVariableDeclarationStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLocalVariableDeclarationStatementAccess().getLocalVariableDeclarationParserRuleCall_0(), currentNode); 
    }
    this_localVariableDeclaration_0=rulelocalVariableDeclaration
    { 
        $current = $this_localVariableDeclaration_0.current; 
        currentNode = currentNode.getParent();
    }
	';' 
    {
        createLeafNode(grammarAccess.getLocalVariableDeclarationStatementAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRulelocalVariableDeclaration
entryRulelocalVariableDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLocalVariableDeclarationRule(), currentNode); }
	 iv_rulelocalVariableDeclaration=rulelocalVariableDeclaration 
	 { $current=$iv_rulelocalVariableDeclaration.current; } 
	 EOF 
;

// Rule localVariableDeclaration
rulelocalVariableDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getTypeAttributeTypeParserRuleCall_0_0(), currentNode); 
	    }
		lv_type_0_0=ruleAttributeType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalVariableDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"AttributeType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getDecVariableDeclaratorsParserRuleCall_1_0(), currentNode); 
	    }
		lv_dec_1_0=rulevariableDeclarators		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalVariableDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dec",
	        		lv_dec_1_0, 
	        		"variableDeclarators", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulevariableDeclarators
entryRulevariableDeclarators returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableDeclaratorsRule(), currentNode); }
	 iv_rulevariableDeclarators=rulevariableDeclarators 
	 { $current=$iv_rulevariableDeclarators.current; } 
	 EOF 
;

// Rule variableDeclarators
rulevariableDeclarators returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclaratorsAccess().getVdVariableDeclaratorParserRuleCall_0_0(), currentNode); 
	    }
		lv_vd_0_0=rulevariableDeclarator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclaratorsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"vd",
	        		lv_vd_0_0, 
	        		"variableDeclarator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getVariableDeclaratorsAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclaratorsAccess().getVdVariableDeclaratorParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_vd_2_0=rulevariableDeclarator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclaratorsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"vd",
	        		lv_vd_2_0, 
	        		"variableDeclarator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulevariableDeclarator
entryRulevariableDeclarator returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableDeclaratorRule(), currentNode); }
	 iv_rulevariableDeclarator=rulevariableDeclarator 
	 { $current=$iv_rulevariableDeclarator.current; } 
	 EOF 
;

// Rule variableDeclarator
rulevariableDeclarator returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclaratorAccess().getNameExtendedIDParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclaratorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getVariableDeclaratorAccess().getEqualsSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclaratorAccess().getExpExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclaratorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_rulestatement=rulestatement 
	 { $current=$iv_rulestatement.current; } 
	 EOF 
;

// Rule statement
rulestatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getJavaBlockParserRuleCall_0(), currentNode); 
    }
    this_javaBlock_0=rulejavaBlock
    { 
        $current = $this_javaBlock_0.current; 
        currentNode = currentNode.getParent();
    }

    |(	'if' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getIfKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getConditionParExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_condition_2_0=ruleparExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_2_0, 
	        		"parExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getState1StatementParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_state1_3_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"state1",
	        		lv_state1_3_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'else' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getElseKeyword_1_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getState2StatementParserRuleCall_1_3_1_0(), currentNode); 
	    }
		lv_state2_5_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"state2",
	        		lv_state2_5_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |(	'for' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getForKeyword_2_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getLeftParenthesisKeyword_2_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getControlForControlParserRuleCall_2_2_0(), currentNode); 
	    }
		lv_control_8_0=ruleforControl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"control",
	        		lv_control_8_0, 
	        		"forControl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getRightParenthesisKeyword_2_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getStateStatementParserRuleCall_2_4_0(), currentNode); 
	    }
		lv_state_10_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"state",
	        		lv_state_10_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'while' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getWhileKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getConditionParExpressionParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_condition_12_0=ruleparExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_12_0, 
	        		"parExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getStateStatementParserRuleCall_3_2_0(), currentNode); 
	    }
		lv_state_13_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"state",
	        		lv_state_13_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'return' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getReturnKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getRetValExpressionParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_retVal_15_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"retVal",
	        		lv_retVal_15_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	';' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getSemicolonKeyword_4_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getSemicolonKeyword_5(), null); 
    }

    |(	'break' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getBreakKeyword_6_0(), null); 
    }
	';' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getSemicolonKeyword_6_1(), null); 
    }
)
    |(
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall_7_0(), currentNode); 
    }
    this_expression_20=ruleexpression
    { 
        $current = $this_expression_20.current; 
        currentNode = currentNode.getParent();
    }
	';' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getSemicolonKeyword_7_1(), null); 
    }
))
;





// Entry rule entryRuleforControl
entryRuleforControl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getForControlRule(), currentNode); }
	 iv_ruleforControl=ruleforControl 
	 { $current=$iv_ruleforControl.current; } 
	 EOF 
;

// Rule forControl
ruleforControl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForControlAccess().getInitForInitParserRuleCall_0_0(), currentNode); 
	    }
		lv_init_0_0=ruleforInit		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForControlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"init",
	        		lv_init_0_0, 
	        		"forInit", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	';' 
    {
        createLeafNode(grammarAccess.getForControlAccess().getSemicolonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForControlAccess().getConditionExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_condition_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForControlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	';' 
    {
        createLeafNode(grammarAccess.getForControlAccess().getSemicolonKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForControlAccess().getUpdateForUpdateParserRuleCall_4_0(), currentNode); 
	    }
		lv_update_4_0=ruleforUpdate		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForControlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"update",
	        		lv_update_4_0, 
	        		"forUpdate", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleforInit
entryRuleforInit returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getForInitRule(), currentNode); }
	 iv_ruleforInit=ruleforInit 
	 { $current=$iv_ruleforInit.current; } 
	 EOF 
;

// Rule forInit
ruleforInit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForInitAccess().getExpressionsExpressionParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_expressions_0_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForInitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_0_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getForInitAccess().getCommaKeyword_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForInitAccess().getExpressionsExpressionParserRuleCall_0_1_1_0(), currentNode); 
	    }
		lv_expressions_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForInitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getForInitAccess().getLocalVariableDeclarationParserRuleCall_1(), currentNode); 
    }
    this_localVariableDeclaration_3=rulelocalVariableDeclaration
    { 
        $current = $this_localVariableDeclaration_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleforUpdate
entryRuleforUpdate returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getForUpdateRule(), currentNode); }
	 iv_ruleforUpdate=ruleforUpdate 
	 { $current=$iv_ruleforUpdate.current; } 
	 EOF 
;

// Rule forUpdate
ruleforUpdate returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getForUpdateAccess().getExpressionListParserRuleCall(), currentNode); 
    }
    this_expressionList_0=ruleexpressionList
    { 
        $current = $this_expressionList_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Rule Modifier
ruleModifier returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'immutable' 
	{
        $current = grammarAccess.getModifierAccess().getIMMUTABLEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getModifierAccess().getIMMUTABLEEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'settable' 
	{
        $current = grammarAccess.getModifierAccess().getSETTABLEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getModifierAccess().getSETTABLEEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'internal' 
	{
        $current = grammarAccess.getModifierAccess().getINTERNALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getModifierAccess().getINTERNALEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'defaulted' 
	{
        $current = grammarAccess.getModifierAccess().getDEFAULTEDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getModifierAccess().getDEFAULTEDEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'const' 
	{
        $current = grammarAccess.getModifierAccess().getCONSTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getModifierAccess().getCONSTEnumLiteralDeclaration_4(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


