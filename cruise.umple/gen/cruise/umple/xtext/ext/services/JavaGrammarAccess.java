/*
* generated by Xtext
*/

package cruise.umple.xtext.ext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class JavaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBlocksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlocksBlockStatementParserRuleCall_1_0 = (RuleCall)cBlocksAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// ** EXPRESSIONS (JAVA and UMPLE)
		// *	START
		// *	Based on http://www.antlr.org/grammar/1152141644268/Java.g
		// *  The following section is based on the above grammar because, like any ANTLR grammar, Xtext must
		// *	have no left-side recursion.
		// ** ///block:	javaBlock;
		//block:
		//	"{" blocks+=blockStatement* "}";
		public ParserRule getRule() { return rule; }

		//"{" blocks+=blockStatement* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//blocks+=blockStatement*
		public Assignment getBlocksAssignment_1() { return cBlocksAssignment_1; }

		//blockStatement
		public RuleCall getBlocksBlockStatementParserRuleCall_1_0() { return cBlocksBlockStatementParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class ParExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "parExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//parExpression:
		//	"(" expression ")";
		public ParserRule getRule() { return rule; }

		//"(" expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class AssignmentOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//assignmentOperator returns ecore::EString:
		//	"=" | "+=" | "-=";
		public ParserRule getRule() { return rule; }

		//"=" | "+=" | "-="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1() { return cPlusSignEqualsSignKeyword_1; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_2() { return cHyphenMinusEqualsSignKeyword_2; }
	}

	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//expressionList:
		//	expressions+=expression ("," expressions+=expression)*;
		public ParserRule getRule() { return rule; }

		//expressions+=expression ("," expressions+=expression)*
		public Group getGroup() { return cGroup; }

		//expressions+=expression
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//expression
		public RuleCall getExpressionsExpressionParserRuleCall_0_0() { return cExpressionsExpressionParserRuleCall_0_0; }

		//("," expressions+=expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expressions+=expression
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }

		//expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_1_0() { return cExpressionsExpressionParserRuleCall_1_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1ConditionalExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cAssignmentOperatorParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cExpression2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpression2ExpressionParserRuleCall_1_1_0 = (RuleCall)cExpression2Assignment_1_1.eContents().get(0);
		
		//expression:
		//	expression1=conditionalExpression (assignmentOperator expression2=expression)?;
		public ParserRule getRule() { return rule; }

		//expression1=conditionalExpression (assignmentOperator expression2=expression)?
		public Group getGroup() { return cGroup; }

		//expression1=conditionalExpression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//conditionalExpression
		public RuleCall getExpression1ConditionalExpressionParserRuleCall_0_0() { return cExpression1ConditionalExpressionParserRuleCall_0_0; }

		//(assignmentOperator expression2=expression)?
		public Group getGroup_1() { return cGroup_1; }

		//assignmentOperator
		public RuleCall getAssignmentOperatorParserRuleCall_1_0() { return cAssignmentOperatorParserRuleCall_1_0; }

		//expression2=expression
		public Assignment getExpression2Assignment_1_1() { return cExpression2Assignment_1_1; }

		//expression
		public RuleCall getExpression2ExpressionParserRuleCall_1_1_0() { return cExpression2ExpressionParserRuleCall_1_1_0; }
	}

	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "conditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1ConditionalOrExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpression2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpression2ExpressionParserRuleCall_1_1_0 = (RuleCall)cExpression2Assignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExpression3Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpression3ExpressionParserRuleCall_1_3_0 = (RuleCall)cExpression3Assignment_1_3.eContents().get(0);
		
		//conditionalExpression:
		//	expression1=conditionalOrExpression ("?" expression2=expression ":" expression3=expression)?;
		public ParserRule getRule() { return rule; }

		//expression1=conditionalOrExpression ("?" expression2=expression ":" expression3=expression)?
		public Group getGroup() { return cGroup; }

		//expression1=conditionalOrExpression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//conditionalOrExpression
		public RuleCall getExpression1ConditionalOrExpressionParserRuleCall_0_0() { return cExpression1ConditionalOrExpressionParserRuleCall_0_0; }

		//("?" expression2=expression ":" expression3=expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0() { return cQuestionMarkKeyword_1_0; }

		//expression2=expression
		public Assignment getExpression2Assignment_1_1() { return cExpression2Assignment_1_1; }

		//expression
		public RuleCall getExpression2ExpressionParserRuleCall_1_1_0() { return cExpression2ExpressionParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//expression3=expression
		public Assignment getExpression3Assignment_1_3() { return cExpression3Assignment_1_3; }

		//expression
		public RuleCall getExpression3ExpressionParserRuleCall_1_3_0() { return cExpression3ExpressionParserRuleCall_1_3_0; }
	}

	public class ConditionalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "conditionalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1ConditionalAndExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionRestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionRestConditionalAndExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionRestAssignment_1_1.eContents().get(0);
		
		//conditionalOrExpression:
		//	expression1=conditionalAndExpression ("||" expressionRest+=conditionalAndExpression)*;
		public ParserRule getRule() { return rule; }

		//expression1=conditionalAndExpression ("||" expressionRest+=conditionalAndExpression)*
		public Group getGroup() { return cGroup; }

		//expression1=conditionalAndExpression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//conditionalAndExpression
		public RuleCall getExpression1ConditionalAndExpressionParserRuleCall_0_0() { return cExpression1ConditionalAndExpressionParserRuleCall_0_0; }

		//("||" expressionRest+=conditionalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }

		//expressionRest+=conditionalAndExpression
		public Assignment getExpressionRestAssignment_1_1() { return cExpressionRestAssignment_1_1; }

		//conditionalAndExpression
		public RuleCall getExpressionRestConditionalAndExpressionParserRuleCall_1_1_0() { return cExpressionRestConditionalAndExpressionParserRuleCall_1_1_0; }
	}

	public class ConditionalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "conditionalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1EqualityExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionRestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionRestEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionRestAssignment_1_1.eContents().get(0);
		
		//conditionalAndExpression:
		//	expression1=equalityExpression ("&&" expressionRest+=equalityExpression)*;
		public ParserRule getRule() { return rule; }

		//expression1=equalityExpression ("&&" expressionRest+=equalityExpression)*
		public Group getGroup() { return cGroup; }

		//expression1=equalityExpression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//equalityExpression
		public RuleCall getExpression1EqualityExpressionParserRuleCall_0_0() { return cExpression1EqualityExpressionParserRuleCall_0_0; }

		//("&&" expressionRest+=equalityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }

		//expressionRest+=equalityExpression
		public Assignment getExpressionRestAssignment_1_1() { return cExpressionRestAssignment_1_1; }

		//equalityExpression
		public RuleCall getExpressionRestEqualityExpressionParserRuleCall_1_1_0() { return cExpressionRestEqualityExpressionParserRuleCall_1_1_0; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "equalityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1RelationalExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cExpressionRestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionRestRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionRestAssignment_1_1.eContents().get(0);
		
		//equalityExpression:
		//	expression1=relationalExpression (("==" | "!=") expressionRest+=relationalExpression)*;
		public ParserRule getRule() { return rule; }

		//expression1=relationalExpression (("==" | "!=") expressionRest+=relationalExpression)*
		public Group getGroup() { return cGroup; }

		//expression1=relationalExpression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//relationalExpression
		public RuleCall getExpression1RelationalExpressionParserRuleCall_0_0() { return cExpression1RelationalExpressionParserRuleCall_0_0; }

		//(("==" | "!=") expressionRest+=relationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"==" | "!="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0() { return cEqualsSignEqualsSignKeyword_1_0_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1() { return cExclamationMarkEqualsSignKeyword_1_0_1; }

		//expressionRest+=relationalExpression
		public Assignment getExpressionRestAssignment_1_1() { return cExpressionRestAssignment_1_1; }

		//relationalExpression
		public RuleCall getExpressionRestRelationalExpressionParserRuleCall_1_1_0() { return cExpressionRestRelationalExpressionParserRuleCall_1_1_0; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "relationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1AdditiveExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cRelationalOpParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cExpressionRestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionRestAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionRestAssignment_1_1.eContents().get(0);
		
		//relationalExpression:
		//	expression1=additiveExpression (relationalOp expressionRest+=additiveExpression)*;
		public ParserRule getRule() { return rule; }

		//expression1=additiveExpression (relationalOp expressionRest+=additiveExpression)*
		public Group getGroup() { return cGroup; }

		//expression1=additiveExpression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//additiveExpression
		public RuleCall getExpression1AdditiveExpressionParserRuleCall_0_0() { return cExpression1AdditiveExpressionParserRuleCall_0_0; }

		//(relationalOp expressionRest+=additiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//relationalOp
		public RuleCall getRelationalOpParserRuleCall_1_0() { return cRelationalOpParserRuleCall_1_0; }

		//expressionRest+=additiveExpression
		public Assignment getExpressionRestAssignment_1_1() { return cExpressionRestAssignment_1_1; }

		//additiveExpression
		public RuleCall getExpressionRestAdditiveExpressionParserRuleCall_1_1_0() { return cExpressionRestAdditiveExpressionParserRuleCall_1_1_0; }
	}

	public class RelationalOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "relationalOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//relationalOp returns ecore::EString:
		//	"<=" | "<" | ">=" | ">";
		public ParserRule getRule() { return rule; }

		//"<=" | "<" | ">=" | ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_0() { return cLessThanSignEqualsSignKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "additiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1MultiplicativeExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cExpressionRestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionRestMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionRestAssignment_1_1.eContents().get(0);
		
		//additiveExpression:
		//	expression1=multiplicativeExpression (("+" | "-") expressionRest+=multiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//expression1=multiplicativeExpression (("+" | "-") expressionRest+=multiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//expression1=multiplicativeExpression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//multiplicativeExpression
		public RuleCall getExpression1MultiplicativeExpressionParserRuleCall_0_0() { return cExpression1MultiplicativeExpressionParserRuleCall_0_0; }

		//(("+" | "-") expressionRest+=multiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"+" | "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }

		//expressionRest+=multiplicativeExpression
		public Assignment getExpressionRestAssignment_1_1() { return cExpressionRestAssignment_1_1; }

		//multiplicativeExpression
		public RuleCall getExpressionRestMultiplicativeExpressionParserRuleCall_1_1_0() { return cExpressionRestMultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "multiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1UnaryExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cPercentSignKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Assignment cExpressionRestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionRestUnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionRestAssignment_1_1.eContents().get(0);
		
		//multiplicativeExpression:
		//	expression1=unaryExpression (("*" | "/" | "%") expressionRest+=unaryExpression)*;
		public ParserRule getRule() { return rule; }

		//expression1=unaryExpression (("*" | "/" | "%") expressionRest+=unaryExpression)*
		public Group getGroup() { return cGroup; }

		//expression1=unaryExpression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//unaryExpression
		public RuleCall getExpression1UnaryExpressionParserRuleCall_0_0() { return cExpression1UnaryExpressionParserRuleCall_0_0; }

		//(("*" | "/" | "%") expressionRest+=unaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"*" | "/" | "%"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }

		//"%"
		public Keyword getPercentSignKeyword_1_0_2() { return cPercentSignKeyword_1_0_2; }

		//expressionRest+=unaryExpression
		public Assignment getExpressionRestAssignment_1_1() { return cExpressionRestAssignment_1_1; }

		//unaryExpression
		public RuleCall getExpressionRestUnaryExpressionParserRuleCall_1_1_0() { return cExpressionRestUnaryExpressionParserRuleCall_1_1_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExp1Assignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExp1UnaryExpressionParserRuleCall_0_1_0 = (RuleCall)cExp1Assignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExp1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExp1UnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cExp1Assignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cPlusSignPlusSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExp1Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExp1UnaryExpressionParserRuleCall_2_1_0 = (RuleCall)cExp1Assignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusHyphenMinusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExp1Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExp1UnaryExpressionParserRuleCall_3_1_0 = (RuleCall)cExp1Assignment_3_1.eContents().get(0);
		private final Assignment cExp2Assignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cExp2UnaryExpressionNotPlusMinusParserRuleCall_4_0 = (RuleCall)cExp2Assignment_4.eContents().get(0);
		
		//unaryExpression:
		//	"+" exp1=unaryExpression | "-" exp1=unaryExpression | "++" exp1=unaryExpression | "--" exp1=unaryExpression |
		//	exp2=unaryExpressionNotPlusMinus;
		public ParserRule getRule() { return rule; }

		//"+" exp1=unaryExpression | "-" exp1=unaryExpression | "++" exp1=unaryExpression | "--" exp1=unaryExpression |
		//exp2=unaryExpressionNotPlusMinus
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+" exp1=unaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//exp1=unaryExpression
		public Assignment getExp1Assignment_0_1() { return cExp1Assignment_0_1; }

		//unaryExpression
		public RuleCall getExp1UnaryExpressionParserRuleCall_0_1_0() { return cExp1UnaryExpressionParserRuleCall_0_1_0; }

		//"-" exp1=unaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }

		//exp1=unaryExpression
		public Assignment getExp1Assignment_1_1() { return cExp1Assignment_1_1; }

		//unaryExpression
		public RuleCall getExp1UnaryExpressionParserRuleCall_1_1_0() { return cExp1UnaryExpressionParserRuleCall_1_1_0; }

		//"++" exp1=unaryExpression
		public Group getGroup_2() { return cGroup_2; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_2_0() { return cPlusSignPlusSignKeyword_2_0; }

		//exp1=unaryExpression
		public Assignment getExp1Assignment_2_1() { return cExp1Assignment_2_1; }

		//unaryExpression
		public RuleCall getExp1UnaryExpressionParserRuleCall_2_1_0() { return cExp1UnaryExpressionParserRuleCall_2_1_0; }

		//"--" exp1=unaryExpression
		public Group getGroup_3() { return cGroup_3; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_3_0() { return cHyphenMinusHyphenMinusKeyword_3_0; }

		//exp1=unaryExpression
		public Assignment getExp1Assignment_3_1() { return cExp1Assignment_3_1; }

		//unaryExpression
		public RuleCall getExp1UnaryExpressionParserRuleCall_3_1_0() { return cExp1UnaryExpressionParserRuleCall_3_1_0; }

		//exp2=unaryExpressionNotPlusMinus
		public Assignment getExp2Assignment_4() { return cExp2Assignment_4; }

		//unaryExpressionNotPlusMinus
		public RuleCall getExp2UnaryExpressionNotPlusMinusParserRuleCall_4_0() { return cExp2UnaryExpressionNotPlusMinusParserRuleCall_4_0; }
	}

	public class UnaryExpressionNotPlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unaryExpressionNotPlusMinus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTildeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cPrimaryParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_2_1_0 = (Keyword)cAlternatives_2_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		
		//unaryExpressionNotPlusMinus:
		//	"~" unaryExpression | "!" unaryExpression | primary ("++" | "--")?;
		public ParserRule getRule() { return rule; }

		//"~" unaryExpression | "!" unaryExpression | primary ("++" | "--")?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"~" unaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//"~"
		public Keyword getTildeKeyword_0_0() { return cTildeKeyword_0_0; }

		//unaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0_1() { return cUnaryExpressionParserRuleCall_0_1; }

		//"!" unaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }

		//unaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_1_1() { return cUnaryExpressionParserRuleCall_1_1; }

		//primary ("++" | "--")?
		public Group getGroup_2() { return cGroup_2; }

		//primary
		public RuleCall getPrimaryParserRuleCall_2_0() { return cPrimaryParserRuleCall_2_0; }

		//("++" | "--")?
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_2_1_0() { return cPlusSignPlusSignKeyword_2_1_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_2_1_1() { return cHyphenMinusHyphenMinusKeyword_2_1_1; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//primary:
		//	parExpression | literal;
		public ParserRule getRule() { return rule; }

		//parExpression | literal
		public Alternatives getAlternatives() { return cAlternatives; }

		//parExpression
		public RuleCall getParExpressionParserRuleCall_0() { return cParExpressionParserRuleCall_0; }

		//literal
		public RuleCall getLiteralParserRuleCall_1() { return cLiteralParserRuleCall_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOUBLEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExtendedIDParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJavaFunctionCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Keyword cTrueKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTRUEKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cFalseKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cFALSEKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//literal:
		//	INT | DOUBLE | STRING | extendedID | javaFunctionCall | "true" | "TRUE" | "false" | "FALSE";
		public ParserRule getRule() { return rule; }

		//INT | DOUBLE | STRING | extendedID | javaFunctionCall | "true" | "TRUE" | "false" | "FALSE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//DOUBLE
		public RuleCall getDOUBLEParserRuleCall_1() { return cDOUBLEParserRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//extendedID
		public RuleCall getExtendedIDParserRuleCall_3() { return cExtendedIDParserRuleCall_3; }

		//javaFunctionCall
		public RuleCall getJavaFunctionCallParserRuleCall_4() { return cJavaFunctionCallParserRuleCall_4; }

		//"true"
		public Keyword getTrueKeyword_5() { return cTrueKeyword_5; }

		//"TRUE"
		public Keyword getTRUEKeyword_6() { return cTRUEKeyword_6; }

		//"false"
		public Keyword getFalseKeyword_7() { return cFalseKeyword_7; }

		//"FALSE"
		public Keyword getFALSEKeyword_8() { return cFALSEKeyword_8; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "functionCall");
		private final RuleCall cJavaFunctionCallParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// ** EXPRESSIONS
		// *	END
		// ** ///LANGUAGE DEPENDENT
		////Expand list with more options
		//functionCall:
		//	javaFunctionCall;
		public ParserRule getRule() { return rule; }

		//javaFunctionCall
		public RuleCall getJavaFunctionCallParserRuleCall() { return cJavaFunctionCallParserRuleCall; }
	}

	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "functionDeclaration");
		private final Assignment cJavaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cJavaJavaFunctionDeclarationParserRuleCall_0 = (RuleCall)cJavaAssignment.eContents().get(0);
		
		//functionDeclaration:
		//	java=javaFunctionDeclaration;
		public ParserRule getRule() { return rule; }

		//java=javaFunctionDeclaration
		public Assignment getJavaAssignment() { return cJavaAssignment; }

		//javaFunctionDeclaration
		public RuleCall getJavaJavaFunctionDeclarationParserRuleCall_0() { return cJavaJavaFunctionDeclarationParserRuleCall_0; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "functionDefinition");
		private final Assignment cJavaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cJavaJavaFunctionDefinitionParserRuleCall_0 = (RuleCall)cJavaAssignment.eContents().get(0);
		
		//functionDefinition:
		//	java=javaFunctionDefinition;
		public ParserRule getRule() { return rule; }

		//java=javaFunctionDefinition
		public Assignment getJavaAssignment() { return cJavaAssignment; }

		//javaFunctionDefinition
		public RuleCall getJavaJavaFunctionDefinitionParserRuleCall_0() { return cJavaJavaFunctionDefinitionParserRuleCall_0; }
	}

	public class JavaFunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "javaFunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStaticKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPublicKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cPrivateKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cProtectedKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cReturnTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cReturnTypeAttributeTypeParserRuleCall_2_0_0 = (RuleCall)cReturnTypeAssignment_2_0.eContents().get(0);
		private final Keyword cVoidKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cArgListAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cArgListAttributeTypeParserRuleCall_5_0_0 = (RuleCall)cArgListAssignment_5_0.eContents().get(0);
		private final Assignment cArgListIDAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cArgListIDExtendedIDParserRuleCall_5_1_0 = (RuleCall)cArgListIDAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cArgListAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cArgListAttributeTypeParserRuleCall_5_2_1_0 = (RuleCall)cArgListAssignment_5_2_1.eContents().get(0);
		private final Assignment cArgListIDAssignment_5_2_2 = (Assignment)cGroup_5_2.eContents().get(2);
		private final RuleCall cArgListIDExtendedIDParserRuleCall_5_2_2_0 = (RuleCall)cArgListIDAssignment_5_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// ** JAVA NATIVE CODE
		// *	START
		// *	Based on http://www.antlr.org/grammar/1152141644268/Java.g
		// *  The following section is based on the above grammar because, like any ANTLR grammar, Xtext must
		// *	have no left-side recursion.
		// ** ///Methods
		//javaFunctionDeclaration:
		//	"static"? ("public" | "private" | "protected") (returnType=attributeType | "void") name=ID "(" (argList+=attributeType
		//	argListID+=extendedID ("," argList+=attributeType argListID+=extendedID)*)? ")";
		public ParserRule getRule() { return rule; }

		//"static"? ("public" | "private" | "protected") (returnType=attributeType | "void") name=ID "(" (argList+=attributeType
		//argListID+=extendedID ("," argList+=attributeType argListID+=extendedID)*)? ")"
		public Group getGroup() { return cGroup; }

		//"static"?
		public Keyword getStaticKeyword_0() { return cStaticKeyword_0; }

		//"public" | "private" | "protected"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"public"
		public Keyword getPublicKeyword_1_0() { return cPublicKeyword_1_0; }

		//"private"
		public Keyword getPrivateKeyword_1_1() { return cPrivateKeyword_1_1; }

		//"protected"
		public Keyword getProtectedKeyword_1_2() { return cProtectedKeyword_1_2; }

		//returnType=attributeType | "void"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//returnType=attributeType
		public Assignment getReturnTypeAssignment_2_0() { return cReturnTypeAssignment_2_0; }

		//attributeType
		public RuleCall getReturnTypeAttributeTypeParserRuleCall_2_0_0() { return cReturnTypeAttributeTypeParserRuleCall_2_0_0; }

		//"void"
		public Keyword getVoidKeyword_2_1() { return cVoidKeyword_2_1; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(argList+=attributeType argListID+=extendedID ("," argList+=attributeType argListID+=extendedID)*)?
		public Group getGroup_5() { return cGroup_5; }

		//argList+=attributeType
		public Assignment getArgListAssignment_5_0() { return cArgListAssignment_5_0; }

		//attributeType
		public RuleCall getArgListAttributeTypeParserRuleCall_5_0_0() { return cArgListAttributeTypeParserRuleCall_5_0_0; }

		//argListID+=extendedID
		public Assignment getArgListIDAssignment_5_1() { return cArgListIDAssignment_5_1; }

		//extendedID
		public RuleCall getArgListIDExtendedIDParserRuleCall_5_1_0() { return cArgListIDExtendedIDParserRuleCall_5_1_0; }

		//("," argList+=attributeType argListID+=extendedID)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//argList+=attributeType
		public Assignment getArgListAssignment_5_2_1() { return cArgListAssignment_5_2_1; }

		//attributeType
		public RuleCall getArgListAttributeTypeParserRuleCall_5_2_1_0() { return cArgListAttributeTypeParserRuleCall_5_2_1_0; }

		//argListID+=extendedID
		public Assignment getArgListIDAssignment_5_2_2() { return cArgListIDAssignment_5_2_2; }

		//extendedID
		public RuleCall getArgListIDExtendedIDParserRuleCall_5_2_2_0() { return cArgListIDExtendedIDParserRuleCall_5_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class JavaFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "javaFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclJavaFunctionDeclarationParserRuleCall_0_0 = (RuleCall)cDeclAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeBlockParserRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		
		//javaFunctionDefinition:
		//	decl=javaFunctionDeclaration code=block;
		public ParserRule getRule() { return rule; }

		//decl=javaFunctionDeclaration code=block
		public Group getGroup() { return cGroup; }

		//decl=javaFunctionDeclaration
		public Assignment getDeclAssignment_0() { return cDeclAssignment_0; }

		//javaFunctionDeclaration
		public RuleCall getDeclJavaFunctionDeclarationParserRuleCall_0_0() { return cDeclJavaFunctionDeclarationParserRuleCall_0_0; }

		//code=block
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//block
		public RuleCall getCodeBlockParserRuleCall_1_0() { return cCodeBlockParserRuleCall_1_0; }
	}

	public class JavaFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "javaFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameExtendedIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsExpressionListParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//javaFunctionCall:
		//	name=extendedID "(" args=expressionList? ")";
		public ParserRule getRule() { return rule; }

		//name=extendedID "(" args=expressionList? ")"
		public Group getGroup() { return cGroup; }

		//name=extendedID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//extendedID
		public RuleCall getNameExtendedIDParserRuleCall_0_0() { return cNameExtendedIDParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//args=expressionList?
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }

		//expressionList
		public RuleCall getArgsExpressionListParserRuleCall_2_0() { return cArgsExpressionListParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "blockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalVariableDeclarationStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//blockStatement:
		//	statement | localVariableDeclarationStatement;
		public ParserRule getRule() { return rule; }

		//statement | localVariableDeclarationStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }

		//localVariableDeclarationStatement
		public RuleCall getLocalVariableDeclarationStatementParserRuleCall_1() { return cLocalVariableDeclarationStatementParserRuleCall_1; }
	}

	public class LocalVariableDeclarationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "localVariableDeclarationStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLocalVariableDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//localVariableDeclarationStatement:
		//	localVariableDeclaration ";";
		public ParserRule getRule() { return rule; }

		//localVariableDeclaration ";"
		public Group getGroup() { return cGroup; }

		//localVariableDeclaration
		public RuleCall getLocalVariableDeclarationParserRuleCall_0() { return cLocalVariableDeclarationParserRuleCall_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class LocalVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "localVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAttributeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cDecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDecVariableDeclaratorsParserRuleCall_1_0 = (RuleCall)cDecAssignment_1.eContents().get(0);
		
		//localVariableDeclaration:
		//	type=attributeType dec=variableDeclarators;
		public ParserRule getRule() { return rule; }

		//type=attributeType dec=variableDeclarators
		public Group getGroup() { return cGroup; }

		//type=attributeType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//attributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_0_0() { return cTypeAttributeTypeParserRuleCall_0_0; }

		//dec=variableDeclarators
		public Assignment getDecAssignment_1() { return cDecAssignment_1; }

		//variableDeclarators
		public RuleCall getDecVariableDeclaratorsParserRuleCall_1_0() { return cDecVariableDeclaratorsParserRuleCall_1_0; }
	}

	public class VariableDeclaratorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variableDeclarators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVdVariableDeclaratorParserRuleCall_0_0 = (RuleCall)cVdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVdVariableDeclaratorParserRuleCall_1_1_0 = (RuleCall)cVdAssignment_1_1.eContents().get(0);
		
		//variableDeclarators:
		//	vd+=variableDeclarator ("," vd+=variableDeclarator)*;
		public ParserRule getRule() { return rule; }

		//vd+=variableDeclarator ("," vd+=variableDeclarator)*
		public Group getGroup() { return cGroup; }

		//vd+=variableDeclarator
		public Assignment getVdAssignment_0() { return cVdAssignment_0; }

		//variableDeclarator
		public RuleCall getVdVariableDeclaratorParserRuleCall_0_0() { return cVdVariableDeclaratorParserRuleCall_0_0; }

		//("," vd+=variableDeclarator)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//vd+=variableDeclarator
		public Assignment getVdAssignment_1_1() { return cVdAssignment_1_1; }

		//variableDeclarator
		public RuleCall getVdVariableDeclaratorParserRuleCall_1_1_0() { return cVdVariableDeclaratorParserRuleCall_1_1_0; }
	}

	public class VariableDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variableDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameExtendedIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		
		//variableDeclarator:
		//	name=extendedID ("=" exp=expression)?;
		public ParserRule getRule() { return rule; }

		//name=extendedID ("=" exp=expression)?
		public Group getGroup() { return cGroup; }

		//name=extendedID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//extendedID
		public RuleCall getNameExtendedIDParserRuleCall_0_0() { return cNameExtendedIDParserRuleCall_0_0; }

		//("=" exp=expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//exp=expression
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }

		//expression
		public RuleCall getExpExpressionParserRuleCall_1_1_0() { return cExpExpressionParserRuleCall_1_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionParExpressionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		private final Assignment cState1Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cState1StatementParserRuleCall_1_2_0 = (RuleCall)cState1Assignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cElseKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cState2Assignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cState2StatementParserRuleCall_1_3_1_0 = (RuleCall)cState2Assignment_1_3_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cControlAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cControlForControlParserRuleCall_2_2_0 = (RuleCall)cControlAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cStateAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cStateStatementParserRuleCall_2_4_0 = (RuleCall)cStateAssignment_2_4.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cWhileKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionParExpressionParserRuleCall_3_1_0 = (RuleCall)cConditionAssignment_3_1.eContents().get(0);
		private final Assignment cStateAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cStateStatementParserRuleCall_3_2_0 = (RuleCall)cStateAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cReturnKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRetValAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRetValExpressionParserRuleCall_4_1_0 = (RuleCall)cRetValAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cBreakKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cExpressionParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cTryKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTryBlockAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cTryBlockBlockParserRuleCall_8_1_0 = (RuleCall)cTryBlockAssignment_8_1.eContents().get(0);
		private final Keyword cCatchKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cCatchBlockAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cCatchBlockBlockParserRuleCall_8_3_0 = (RuleCall)cCatchBlockAssignment_8_3.eContents().get(0);
		
		//statement:
		//	block | "if" condition=parExpression state1=statement ("else" state2=statement)? | "for" "(" control=forControl ")"
		//	state=statement | "while" condition=parExpression state=statement | "return" retVal=expression? ";" | ";" | "break"
		//	";" | expression ";" | "try" tryBlock=block "catch" catchBlock=block;
		public ParserRule getRule() { return rule; }

		//block | "if" condition=parExpression state1=statement ("else" state2=statement)? | "for" "(" control=forControl ")"
		//state=statement | "while" condition=parExpression state=statement | "return" retVal=expression? ";" | ";" | "break" ";"
		//| expression ";" | "try" tryBlock=block "catch" catchBlock=block
		public Alternatives getAlternatives() { return cAlternatives; }

		//block
		public RuleCall getBlockParserRuleCall_0() { return cBlockParserRuleCall_0; }

		//"if" condition=parExpression state1=statement ("else" state2=statement)?
		public Group getGroup_1() { return cGroup_1; }

		//"if"
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }

		//condition=parExpression
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }

		//parExpression
		public RuleCall getConditionParExpressionParserRuleCall_1_1_0() { return cConditionParExpressionParserRuleCall_1_1_0; }

		//state1=statement
		public Assignment getState1Assignment_1_2() { return cState1Assignment_1_2; }

		//statement
		public RuleCall getState1StatementParserRuleCall_1_2_0() { return cState1StatementParserRuleCall_1_2_0; }

		//("else" state2=statement)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"else"
		public Keyword getElseKeyword_1_3_0() { return cElseKeyword_1_3_0; }

		//state2=statement
		public Assignment getState2Assignment_1_3_1() { return cState2Assignment_1_3_1; }

		//statement
		public RuleCall getState2StatementParserRuleCall_1_3_1_0() { return cState2StatementParserRuleCall_1_3_1_0; }

		//"for" "(" control=forControl ")" state=statement
		public Group getGroup_2() { return cGroup_2; }

		//"for"
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//control=forControl
		public Assignment getControlAssignment_2_2() { return cControlAssignment_2_2; }

		//forControl
		public RuleCall getControlForControlParserRuleCall_2_2_0() { return cControlForControlParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//state=statement
		public Assignment getStateAssignment_2_4() { return cStateAssignment_2_4; }

		//statement
		public RuleCall getStateStatementParserRuleCall_2_4_0() { return cStateStatementParserRuleCall_2_4_0; }

		//"while" condition=parExpression state=statement
		public Group getGroup_3() { return cGroup_3; }

		//"while"
		public Keyword getWhileKeyword_3_0() { return cWhileKeyword_3_0; }

		//condition=parExpression
		public Assignment getConditionAssignment_3_1() { return cConditionAssignment_3_1; }

		//parExpression
		public RuleCall getConditionParExpressionParserRuleCall_3_1_0() { return cConditionParExpressionParserRuleCall_3_1_0; }

		//state=statement
		public Assignment getStateAssignment_3_2() { return cStateAssignment_3_2; }

		//statement
		public RuleCall getStateStatementParserRuleCall_3_2_0() { return cStateStatementParserRuleCall_3_2_0; }

		//"return" retVal=expression? ";"
		public Group getGroup_4() { return cGroup_4; }

		//"return"
		public Keyword getReturnKeyword_4_0() { return cReturnKeyword_4_0; }

		//retVal=expression?
		public Assignment getRetValAssignment_4_1() { return cRetValAssignment_4_1; }

		//expression
		public RuleCall getRetValExpressionParserRuleCall_4_1_0() { return cRetValExpressionParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//"break" ";"
		public Group getGroup_6() { return cGroup_6; }

		//"break"
		public Keyword getBreakKeyword_6_0() { return cBreakKeyword_6_0; }

		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }

		//expression ";"
		public Group getGroup_7() { return cGroup_7; }

		//expression
		public RuleCall getExpressionParserRuleCall_7_0() { return cExpressionParserRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }

		//"try" tryBlock=block "catch" catchBlock=block
		public Group getGroup_8() { return cGroup_8; }

		//"try"
		public Keyword getTryKeyword_8_0() { return cTryKeyword_8_0; }

		//tryBlock=block
		public Assignment getTryBlockAssignment_8_1() { return cTryBlockAssignment_8_1; }

		//block
		public RuleCall getTryBlockBlockParserRuleCall_8_1_0() { return cTryBlockBlockParserRuleCall_8_1_0; }

		//"catch"
		public Keyword getCatchKeyword_8_2() { return cCatchKeyword_8_2; }

		//catchBlock=block
		public Assignment getCatchBlockAssignment_8_3() { return cCatchBlockAssignment_8_3; }

		//block
		public RuleCall getCatchBlockBlockParserRuleCall_8_3_0() { return cCatchBlockBlockParserRuleCall_8_3_0; }
	}

	public class ForControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "forControl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInitForInitParserRuleCall_0_0 = (RuleCall)cInitAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUpdateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUpdateForUpdateParserRuleCall_4_0 = (RuleCall)cUpdateAssignment_4.eContents().get(0);
		
		//forControl:
		//	init=forInit? ";" condition=expression? ";" update=forUpdate?;
		public ParserRule getRule() { return rule; }

		//init=forInit? ";" condition=expression? ";" update=forUpdate?
		public Group getGroup() { return cGroup; }

		//init=forInit?
		public Assignment getInitAssignment_0() { return cInitAssignment_0; }

		//forInit
		public RuleCall getInitForInitParserRuleCall_0_0() { return cInitForInitParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }

		//condition=expression?
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//update=forUpdate?
		public Assignment getUpdateAssignment_4() { return cUpdateAssignment_4; }

		//forUpdate
		public RuleCall getUpdateForUpdateParserRuleCall_4_0() { return cUpdateForUpdateParserRuleCall_4_0; }
	}

	public class ForInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "forInit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExpressionsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_0_0_0 = (RuleCall)cExpressionsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_0_1_1_0 = (RuleCall)cExpressionsAssignment_0_1_1.eContents().get(0);
		private final RuleCall cLocalVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//forInit:
		//	expressions+=expression ("," expressions+=expression)* | localVariableDeclaration;
		public ParserRule getRule() { return rule; }

		//expressions+=expression ("," expressions+=expression)* | localVariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//expressions+=expression ("," expressions+=expression)*
		public Group getGroup_0() { return cGroup_0; }

		//expressions+=expression
		public Assignment getExpressionsAssignment_0_0() { return cExpressionsAssignment_0_0; }

		//expression
		public RuleCall getExpressionsExpressionParserRuleCall_0_0_0() { return cExpressionsExpressionParserRuleCall_0_0_0; }

		//("," expressions+=expression)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//expressions+=expression
		public Assignment getExpressionsAssignment_0_1_1() { return cExpressionsAssignment_0_1_1; }

		//expression
		public RuleCall getExpressionsExpressionParserRuleCall_0_1_1_0() { return cExpressionsExpressionParserRuleCall_0_1_1_0; }

		//localVariableDeclaration
		public RuleCall getLocalVariableDeclarationParserRuleCall_1() { return cLocalVariableDeclarationParserRuleCall_1; }
	}

	public class ForUpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "forUpdate");
		private final RuleCall cExpressionListParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//forUpdate:
		//	expressionList;
		public ParserRule getRule() { return rule; }

		//expressionList
		public RuleCall getExpressionListParserRuleCall() { return cExpressionListParserRuleCall; }
	}

	public class ExtendedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "extendedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//extendedID returns ecore::EString:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DOUBLE returns ecore::EString:
		//	INT "." INT;
		public ParserRule getRule() { return rule; }

		//INT "." INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "attributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDateKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTimeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDoubleKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDoubleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntegerKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cIntegerKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cIntKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cBooleanKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cBooleanKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cStringKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cStringKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		////condictionalExpression covers all expressions except "="
		////See Expression section for details
		//attributeType returns ecore::EString:
		//	"Date" | "Time" | "Double" | "double" | "Integer" | "integer" | "int" | "Boolean" | "boolean" | "String" | "string";
		public ParserRule getRule() { return rule; }

		//"Date" | "Time" | "Double" | "double" | "Integer" | "integer" | "int" | "Boolean" | "boolean" | "String" | "string"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Date"
		public Keyword getDateKeyword_0() { return cDateKeyword_0; }

		//"Time"
		public Keyword getTimeKeyword_1() { return cTimeKeyword_1; }

		//"Double"
		public Keyword getDoubleKeyword_2() { return cDoubleKeyword_2; }

		//"double"
		public Keyword getDoubleKeyword_3() { return cDoubleKeyword_3; }

		//"Integer"
		public Keyword getIntegerKeyword_4() { return cIntegerKeyword_4; }

		//"integer"
		public Keyword getIntegerKeyword_5() { return cIntegerKeyword_5; }

		//"int"
		public Keyword getIntKeyword_6() { return cIntKeyword_6; }

		//"Boolean"
		public Keyword getBooleanKeyword_7() { return cBooleanKeyword_7; }

		//"boolean"
		public Keyword getBooleanKeyword_8() { return cBooleanKeyword_8; }

		//"String"
		public Keyword getStringKeyword_9() { return cStringKeyword_9; }

		//"string"
		public Keyword getStringKeyword_10() { return cStringKeyword_10; }
	}

	public class PhpFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "phpFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCodeblockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cCodeblockPhpBlockCrossReference_3_0 = (CrossReference)cCodeblockAssignment_3.eContents().get(0);
		private final RuleCall cCodeblockPhpBlockIDTerminalRuleCall_3_0_1 = (RuleCall)cCodeblockPhpBlockCrossReference_3_0.eContents().get(1);
		
		/// ** JAVA NATIVE CODE
		// *	END
		// ** /// PHP CODE
		//phpFunction:
		//	"public" "function" name=ID codeblock=[phpBlock];
		public ParserRule getRule() { return rule; }

		//"public" "function" name=ID codeblock=[phpBlock]
		public Group getGroup() { return cGroup; }

		//"public"
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }

		//"function"
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//codeblock=[phpBlock]
		public Assignment getCodeblockAssignment_3() { return cCodeblockAssignment_3; }

		//[phpBlock]
		public CrossReference getCodeblockPhpBlockCrossReference_3_0() { return cCodeblockPhpBlockCrossReference_3_0; }

		//ID
		public RuleCall getCodeblockPhpBlockIDTerminalRuleCall_3_0_1() { return cCodeblockPhpBlockIDTerminalRuleCall_3_0_1; }
	}

	public class PhpBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "phpBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeSTRINGTerminalRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//phpBlock:
		//	"{" code=STRING "}";
		public ParserRule getRule() { return rule; }

		//"{" code=STRING "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//code=STRING
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//STRING
		public RuleCall getCodeSTRINGTerminalRuleCall_1_0() { return cCodeSTRINGTerminalRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class RubyFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rubyFunction");
		private final RuleCall cRUBY_FUNCTIONTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Ruby Code
		//rubyFunction returns ecore::EString:
		//	RUBY_FUNCTION;
		public ParserRule getRule() { return rule; }

		//RUBY_FUNCTION
		public RuleCall getRUBY_FUNCTIONTerminalRuleCall() { return cRUBY_FUNCTIONTerminalRuleCall; }
	}
	
	
	private BlockElements pBlock;
	private ParExpressionElements pParExpression;
	private AssignmentOperatorElements pAssignmentOperator;
	private ExpressionListElements pExpressionList;
	private ExpressionElements pExpression;
	private ConditionalExpressionElements pConditionalExpression;
	private ConditionalOrExpressionElements pConditionalOrExpression;
	private ConditionalAndExpressionElements pConditionalAndExpression;
	private EqualityExpressionElements pEqualityExpression;
	private RelationalExpressionElements pRelationalExpression;
	private RelationalOpElements pRelationalOp;
	private AdditiveExpressionElements pAdditiveExpression;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private UnaryExpressionElements pUnaryExpression;
	private UnaryExpressionNotPlusMinusElements pUnaryExpressionNotPlusMinus;
	private PrimaryElements pPrimary;
	private LiteralElements pLiteral;
	private FunctionCallElements pFunctionCall;
	private FunctionDeclarationElements pFunctionDeclaration;
	private FunctionDefinitionElements pFunctionDefinition;
	private JavaFunctionDeclarationElements pJavaFunctionDeclaration;
	private JavaFunctionDefinitionElements pJavaFunctionDefinition;
	private JavaFunctionCallElements pJavaFunctionCall;
	private BlockStatementElements pBlockStatement;
	private LocalVariableDeclarationStatementElements pLocalVariableDeclarationStatement;
	private LocalVariableDeclarationElements pLocalVariableDeclaration;
	private VariableDeclaratorsElements pVariableDeclarators;
	private VariableDeclaratorElements pVariableDeclarator;
	private StatementElements pStatement;
	private ForControlElements pForControl;
	private ForInitElements pForInit;
	private ForUpdateElements pForUpdate;
	private ExtendedIDElements pExtendedID;
	private DOUBLEElements pDOUBLE;
	private AttributeTypeElements pAttributeType;
	private PhpFunctionElements pPhpFunction;
	private PhpBlockElements pPhpBlock;
	private RubyFunctionElements pRubyFunction;
	private TerminalRule tRUBY_FUNCTION;
	private TerminalRule tDEF;
	private TerminalRule tEND;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public JavaGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// ** EXPRESSIONS (JAVA and UMPLE)
	// *	START
	// *	Based on http://www.antlr.org/grammar/1152141644268/Java.g
	// *  The following section is based on the above grammar because, like any ANTLR grammar, Xtext must
	// *	have no left-side recursion.
	// ** ///block:	javaBlock;
	//block:
	//	"{" blocks+=blockStatement* "}";
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//parExpression:
	//	"(" expression ")";
	public ParExpressionElements getParExpressionAccess() {
		return (pParExpression != null) ? pParExpression : (pParExpression = new ParExpressionElements());
	}
	
	public ParserRule getParExpressionRule() {
		return getParExpressionAccess().getRule();
	}

	//assignmentOperator returns ecore::EString:
	//	"=" | "+=" | "-=";
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return (pAssignmentOperator != null) ? pAssignmentOperator : (pAssignmentOperator = new AssignmentOperatorElements());
	}
	
	public ParserRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}

	//expressionList:
	//	expressions+=expression ("," expressions+=expression)*;
	public ExpressionListElements getExpressionListAccess() {
		return (pExpressionList != null) ? pExpressionList : (pExpressionList = new ExpressionListElements());
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}

	//expression:
	//	expression1=conditionalExpression (assignmentOperator expression2=expression)?;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//conditionalExpression:
	//	expression1=conditionalOrExpression ("?" expression2=expression ":" expression3=expression)?;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return (pConditionalExpression != null) ? pConditionalExpression : (pConditionalExpression = new ConditionalExpressionElements());
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	//conditionalOrExpression:
	//	expression1=conditionalAndExpression ("||" expressionRest+=conditionalAndExpression)*;
	public ConditionalOrExpressionElements getConditionalOrExpressionAccess() {
		return (pConditionalOrExpression != null) ? pConditionalOrExpression : (pConditionalOrExpression = new ConditionalOrExpressionElements());
	}
	
	public ParserRule getConditionalOrExpressionRule() {
		return getConditionalOrExpressionAccess().getRule();
	}

	//conditionalAndExpression:
	//	expression1=equalityExpression ("&&" expressionRest+=equalityExpression)*;
	public ConditionalAndExpressionElements getConditionalAndExpressionAccess() {
		return (pConditionalAndExpression != null) ? pConditionalAndExpression : (pConditionalAndExpression = new ConditionalAndExpressionElements());
	}
	
	public ParserRule getConditionalAndExpressionRule() {
		return getConditionalAndExpressionAccess().getRule();
	}

	//equalityExpression:
	//	expression1=relationalExpression (("==" | "!=") expressionRest+=relationalExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return (pEqualityExpression != null) ? pEqualityExpression : (pEqualityExpression = new EqualityExpressionElements());
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//relationalExpression:
	//	expression1=additiveExpression (relationalOp expressionRest+=additiveExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//relationalOp returns ecore::EString:
	//	"<=" | "<" | ">=" | ">";
	public RelationalOpElements getRelationalOpAccess() {
		return (pRelationalOp != null) ? pRelationalOp : (pRelationalOp = new RelationalOpElements());
	}
	
	public ParserRule getRelationalOpRule() {
		return getRelationalOpAccess().getRule();
	}

	//additiveExpression:
	//	expression1=multiplicativeExpression (("+" | "-") expressionRest+=multiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//multiplicativeExpression:
	//	expression1=unaryExpression (("*" | "/" | "%") expressionRest+=unaryExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//unaryExpression:
	//	"+" exp1=unaryExpression | "-" exp1=unaryExpression | "++" exp1=unaryExpression | "--" exp1=unaryExpression |
	//	exp2=unaryExpressionNotPlusMinus;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//unaryExpressionNotPlusMinus:
	//	"~" unaryExpression | "!" unaryExpression | primary ("++" | "--")?;
	public UnaryExpressionNotPlusMinusElements getUnaryExpressionNotPlusMinusAccess() {
		return (pUnaryExpressionNotPlusMinus != null) ? pUnaryExpressionNotPlusMinus : (pUnaryExpressionNotPlusMinus = new UnaryExpressionNotPlusMinusElements());
	}
	
	public ParserRule getUnaryExpressionNotPlusMinusRule() {
		return getUnaryExpressionNotPlusMinusAccess().getRule();
	}

	//primary:
	//	parExpression | literal;
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//literal:
	//	INT | DOUBLE | STRING | extendedID | javaFunctionCall | "true" | "TRUE" | "false" | "FALSE";
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	/// ** EXPRESSIONS
	// *	END
	// ** ///LANGUAGE DEPENDENT
	////Expand list with more options
	//functionCall:
	//	javaFunctionCall;
	public FunctionCallElements getFunctionCallAccess() {
		return (pFunctionCall != null) ? pFunctionCall : (pFunctionCall = new FunctionCallElements());
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//functionDeclaration:
	//	java=javaFunctionDeclaration;
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return (pFunctionDeclaration != null) ? pFunctionDeclaration : (pFunctionDeclaration = new FunctionDeclarationElements());
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//functionDefinition:
	//	java=javaFunctionDefinition;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return (pFunctionDefinition != null) ? pFunctionDefinition : (pFunctionDefinition = new FunctionDefinitionElements());
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	/// ** JAVA NATIVE CODE
	// *	START
	// *	Based on http://www.antlr.org/grammar/1152141644268/Java.g
	// *  The following section is based on the above grammar because, like any ANTLR grammar, Xtext must
	// *	have no left-side recursion.
	// ** ///Methods
	//javaFunctionDeclaration:
	//	"static"? ("public" | "private" | "protected") (returnType=attributeType | "void") name=ID "(" (argList+=attributeType
	//	argListID+=extendedID ("," argList+=attributeType argListID+=extendedID)*)? ")";
	public JavaFunctionDeclarationElements getJavaFunctionDeclarationAccess() {
		return (pJavaFunctionDeclaration != null) ? pJavaFunctionDeclaration : (pJavaFunctionDeclaration = new JavaFunctionDeclarationElements());
	}
	
	public ParserRule getJavaFunctionDeclarationRule() {
		return getJavaFunctionDeclarationAccess().getRule();
	}

	//javaFunctionDefinition:
	//	decl=javaFunctionDeclaration code=block;
	public JavaFunctionDefinitionElements getJavaFunctionDefinitionAccess() {
		return (pJavaFunctionDefinition != null) ? pJavaFunctionDefinition : (pJavaFunctionDefinition = new JavaFunctionDefinitionElements());
	}
	
	public ParserRule getJavaFunctionDefinitionRule() {
		return getJavaFunctionDefinitionAccess().getRule();
	}

	//javaFunctionCall:
	//	name=extendedID "(" args=expressionList? ")";
	public JavaFunctionCallElements getJavaFunctionCallAccess() {
		return (pJavaFunctionCall != null) ? pJavaFunctionCall : (pJavaFunctionCall = new JavaFunctionCallElements());
	}
	
	public ParserRule getJavaFunctionCallRule() {
		return getJavaFunctionCallAccess().getRule();
	}

	//blockStatement:
	//	statement | localVariableDeclarationStatement;
	public BlockStatementElements getBlockStatementAccess() {
		return (pBlockStatement != null) ? pBlockStatement : (pBlockStatement = new BlockStatementElements());
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}

	//localVariableDeclarationStatement:
	//	localVariableDeclaration ";";
	public LocalVariableDeclarationStatementElements getLocalVariableDeclarationStatementAccess() {
		return (pLocalVariableDeclarationStatement != null) ? pLocalVariableDeclarationStatement : (pLocalVariableDeclarationStatement = new LocalVariableDeclarationStatementElements());
	}
	
	public ParserRule getLocalVariableDeclarationStatementRule() {
		return getLocalVariableDeclarationStatementAccess().getRule();
	}

	//localVariableDeclaration:
	//	type=attributeType dec=variableDeclarators;
	public LocalVariableDeclarationElements getLocalVariableDeclarationAccess() {
		return (pLocalVariableDeclaration != null) ? pLocalVariableDeclaration : (pLocalVariableDeclaration = new LocalVariableDeclarationElements());
	}
	
	public ParserRule getLocalVariableDeclarationRule() {
		return getLocalVariableDeclarationAccess().getRule();
	}

	//variableDeclarators:
	//	vd+=variableDeclarator ("," vd+=variableDeclarator)*;
	public VariableDeclaratorsElements getVariableDeclaratorsAccess() {
		return (pVariableDeclarators != null) ? pVariableDeclarators : (pVariableDeclarators = new VariableDeclaratorsElements());
	}
	
	public ParserRule getVariableDeclaratorsRule() {
		return getVariableDeclaratorsAccess().getRule();
	}

	//variableDeclarator:
	//	name=extendedID ("=" exp=expression)?;
	public VariableDeclaratorElements getVariableDeclaratorAccess() {
		return (pVariableDeclarator != null) ? pVariableDeclarator : (pVariableDeclarator = new VariableDeclaratorElements());
	}
	
	public ParserRule getVariableDeclaratorRule() {
		return getVariableDeclaratorAccess().getRule();
	}

	//statement:
	//	block | "if" condition=parExpression state1=statement ("else" state2=statement)? | "for" "(" control=forControl ")"
	//	state=statement | "while" condition=parExpression state=statement | "return" retVal=expression? ";" | ";" | "break"
	//	";" | expression ";" | "try" tryBlock=block "catch" catchBlock=block;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//forControl:
	//	init=forInit? ";" condition=expression? ";" update=forUpdate?;
	public ForControlElements getForControlAccess() {
		return (pForControl != null) ? pForControl : (pForControl = new ForControlElements());
	}
	
	public ParserRule getForControlRule() {
		return getForControlAccess().getRule();
	}

	//forInit:
	//	expressions+=expression ("," expressions+=expression)* | localVariableDeclaration;
	public ForInitElements getForInitAccess() {
		return (pForInit != null) ? pForInit : (pForInit = new ForInitElements());
	}
	
	public ParserRule getForInitRule() {
		return getForInitAccess().getRule();
	}

	//forUpdate:
	//	expressionList;
	public ForUpdateElements getForUpdateAccess() {
		return (pForUpdate != null) ? pForUpdate : (pForUpdate = new ForUpdateElements());
	}
	
	public ParserRule getForUpdateRule() {
		return getForUpdateAccess().getRule();
	}

	//extendedID returns ecore::EString:
	//	ID ("." ID)*;
	public ExtendedIDElements getExtendedIDAccess() {
		return (pExtendedID != null) ? pExtendedID : (pExtendedID = new ExtendedIDElements());
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//DOUBLE returns ecore::EString:
	//	INT "." INT;
	public DOUBLEElements getDOUBLEAccess() {
		return (pDOUBLE != null) ? pDOUBLE : (pDOUBLE = new DOUBLEElements());
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}

	////condictionalExpression covers all expressions except "="
	////See Expression section for details
	//attributeType returns ecore::EString:
	//	"Date" | "Time" | "Double" | "double" | "Integer" | "integer" | "int" | "Boolean" | "boolean" | "String" | "string";
	public AttributeTypeElements getAttributeTypeAccess() {
		return (pAttributeType != null) ? pAttributeType : (pAttributeType = new AttributeTypeElements());
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	/// ** JAVA NATIVE CODE
	// *	END
	// ** /// PHP CODE
	//phpFunction:
	//	"public" "function" name=ID codeblock=[phpBlock];
	public PhpFunctionElements getPhpFunctionAccess() {
		return (pPhpFunction != null) ? pPhpFunction : (pPhpFunction = new PhpFunctionElements());
	}
	
	public ParserRule getPhpFunctionRule() {
		return getPhpFunctionAccess().getRule();
	}

	//phpBlock:
	//	"{" code=STRING "}";
	public PhpBlockElements getPhpBlockAccess() {
		return (pPhpBlock != null) ? pPhpBlock : (pPhpBlock = new PhpBlockElements());
	}
	
	public ParserRule getPhpBlockRule() {
		return getPhpBlockAccess().getRule();
	}

	//// Ruby Code
	//rubyFunction returns ecore::EString:
	//	RUBY_FUNCTION;
	public RubyFunctionElements getRubyFunctionAccess() {
		return (pRubyFunction != null) ? pRubyFunction : (pRubyFunction = new RubyFunctionElements());
	}
	
	public ParserRule getRubyFunctionRule() {
		return getRubyFunctionAccess().getRule();
	}

	//// Terminals
	//terminal RUBY_FUNCTION:
	//	DEF->END;
	public TerminalRule getRUBY_FUNCTIONRule() {
		return (tRUBY_FUNCTION != null) ? tRUBY_FUNCTION : (tRUBY_FUNCTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RUBY_FUNCTION"));
	} 

	//terminal DEF:
	//	"def";
	public TerminalRule getDEFRule() {
		return (tDEF != null) ? tDEF : (tDEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DEF"));
	} 

	//terminal END:
	//	"end";
	public TerminalRule getENDRule() {
		return (tEND != null) ? tEND : (tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "END"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
