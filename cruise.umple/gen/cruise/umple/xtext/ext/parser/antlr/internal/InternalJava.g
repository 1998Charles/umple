/*
* generated by Xtext
*/
grammar InternalJava;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package cruise.umple.xtext.ext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package cruise.umple.xtext.ext.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import cruise.umple.xtext.ext.services.JavaGrammarAccess;

}

@parser::members {

 	private JavaGrammarAccess grammarAccess;
 	
    public InternalJavaParser(TokenStream input, IAstFactory factory, JavaGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("cruise/umple/xtext/ext/parser/antlr/internal/InternalJava.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "block";	
   	}
   	
   	@Override
   	protected JavaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleblock
entryRuleblock returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlockRule(), currentNode); }
	 iv_ruleblock=ruleblock 
	 { $current=$iv_ruleblock.current; } 
	 EOF 
;

// Rule block
ruleblock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'{' 
    {
        createLeafNode(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockAccess().getBlocksBlockStatementParserRuleCall_1_0(), currentNode); 
	    }
		lv_blocks_1_0=ruleblockStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"blocks",
	        		lv_blocks_1_0, 
	        		"blockStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleparExpression
entryRuleparExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParExpressionRule(), currentNode); }
	 iv_ruleparExpression=ruleparExpression 
	 { $current=$iv_ruleparExpression.current; } 
	 EOF 
;

// Rule parExpression
ruleparExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getParExpressionAccess().getLeftParenthesisKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getParExpressionAccess().getExpressionParserRuleCall_1(), currentNode); 
    }
    this_expression_1=ruleexpression
    { 
        $current = $this_expression_1.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getParExpressionAccess().getRightParenthesisKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleassignmentOperator
entryRuleassignmentOperator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentOperatorRule(), currentNode); } 
	 iv_ruleassignmentOperator=ruleassignmentOperator 
	 { $current=$iv_ruleassignmentOperator.current.getText(); }  
	 EOF 
;

// Rule assignmentOperator
ruleassignmentOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0(), null); 
    }

    |
	kw='+=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_1(), null); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getHyphenMinusEqualsSignKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleexpressionList
entryRuleexpressionList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionListRule(), currentNode); }
	 iv_ruleexpressionList=ruleexpressionList 
	 { $current=$iv_ruleexpressionList.current; } 
	 EOF 
;

// Rule expressionList
ruleexpressionList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expressions_0_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_0_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getExpressionListAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expressions_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleexpression=ruleexpression 
	 { $current=$iv_ruleexpression.current; } 
	 EOF 
;

// Rule expression
ruleexpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getExpression1ConditionalExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression1_0_0=ruleconditionalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression1",
	        		lv_expression1_0_0, 
	        		"conditionalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getAssignmentOperatorParserRuleCall_1_0(), currentNode); 
    }
ruleassignmentOperator
    { 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getExpression2ExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expression2_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression2",
	        		lv_expression2_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleconditionalExpression
entryRuleconditionalExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConditionalExpressionRule(), currentNode); }
	 iv_ruleconditionalExpression=ruleconditionalExpression 
	 { $current=$iv_ruleconditionalExpression.current; } 
	 EOF 
;

// Rule conditionalExpression
ruleconditionalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalExpressionAccess().getExpression1ConditionalOrExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression1_0_0=ruleconditionalOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression1",
	        		lv_expression1_0_0, 
	        		"conditionalOrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'?' 
    {
        createLeafNode(grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalExpressionAccess().getExpression2ExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expression2_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression2",
	        		lv_expression2_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalExpressionAccess().getExpression3ExpressionParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_expression3_4_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression3",
	        		lv_expression3_4_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleconditionalOrExpression
entryRuleconditionalOrExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConditionalOrExpressionRule(), currentNode); }
	 iv_ruleconditionalOrExpression=ruleconditionalOrExpression 
	 { $current=$iv_ruleconditionalOrExpression.current; } 
	 EOF 
;

// Rule conditionalOrExpression
ruleconditionalOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getExpression1ConditionalAndExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression1_0_0=ruleconditionalAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression1",
	        		lv_expression1_0_0, 
	        		"conditionalAndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'||' 
    {
        createLeafNode(grammarAccess.getConditionalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getExpressionRestConditionalAndExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expressionRest_2_0=ruleconditionalAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressionRest",
	        		lv_expressionRest_2_0, 
	        		"conditionalAndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleconditionalAndExpression
entryRuleconditionalAndExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConditionalAndExpressionRule(), currentNode); }
	 iv_ruleconditionalAndExpression=ruleconditionalAndExpression 
	 { $current=$iv_ruleconditionalAndExpression.current; } 
	 EOF 
;

// Rule conditionalAndExpression
ruleconditionalAndExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getExpression1EqualityExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression1_0_0=ruleequalityExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression1",
	        		lv_expression1_0_0, 
	        		"equalityExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'&&' 
    {
        createLeafNode(grammarAccess.getConditionalAndExpressionAccess().getAmpersandAmpersandKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getExpressionRestEqualityExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expressionRest_2_0=ruleequalityExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressionRest",
	        		lv_expressionRest_2_0, 
	        		"equalityExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleequalityExpression
entryRuleequalityExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEqualityExpressionRule(), currentNode); }
	 iv_ruleequalityExpression=ruleequalityExpression 
	 { $current=$iv_ruleequalityExpression.current; } 
	 EOF 
;

// Rule equalityExpression
ruleequalityExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getExpression1RelationalExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression1_0_0=rulerelationalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression1",
	        		lv_expression1_0_0, 
	        		"relationalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'==' 
    {
        createLeafNode(grammarAccess.getEqualityExpressionAccess().getEqualsSignEqualsSignKeyword_1_0_0(), null); 
    }

    |	'!=' 
    {
        createLeafNode(grammarAccess.getEqualityExpressionAccess().getExclamationMarkEqualsSignKeyword_1_0_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getExpressionRestRelationalExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expressionRest_3_0=rulerelationalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressionRest",
	        		lv_expressionRest_3_0, 
	        		"relationalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulerelationalExpression
entryRulerelationalExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationalExpressionRule(), currentNode); }
	 iv_rulerelationalExpression=rulerelationalExpression 
	 { $current=$iv_rulerelationalExpression.current; } 
	 EOF 
;

// Rule relationalExpression
rulerelationalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getExpression1AdditiveExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression1_0_0=ruleadditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression1",
	        		lv_expression1_0_0, 
	        		"additiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getRelationalOpParserRuleCall_1_0(), currentNode); 
    }
rulerelationalOp
    { 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getExpressionRestAdditiveExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expressionRest_2_0=ruleadditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressionRest",
	        		lv_expressionRest_2_0, 
	        		"additiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulerelationalOp
entryRulerelationalOp returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationalOpRule(), currentNode); } 
	 iv_rulerelationalOp=rulerelationalOp 
	 { $current=$iv_rulerelationalOp.current.getText(); }  
	 EOF 
;

// Rule relationalOp
rulerelationalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='<=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_0(), null); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_1(), null); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_2(), null); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_3(), null); 
    }
)
    ;





// Entry rule entryRuleadditiveExpression
entryRuleadditiveExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdditiveExpressionRule(), currentNode); }
	 iv_ruleadditiveExpression=ruleadditiveExpression 
	 { $current=$iv_ruleadditiveExpression.current; } 
	 EOF 
;

// Rule additiveExpression
ruleadditiveExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExpression1MultiplicativeExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression1_0_0=rulemultiplicativeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression1",
	        		lv_expression1_0_0, 
	        		"multiplicativeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'+' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_0(), null); 
    }

    |	'-' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_0_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExpressionRestMultiplicativeExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expressionRest_3_0=rulemultiplicativeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressionRest",
	        		lv_expressionRest_3_0, 
	        		"multiplicativeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulemultiplicativeExpression
entryRulemultiplicativeExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionRule(), currentNode); }
	 iv_rulemultiplicativeExpression=rulemultiplicativeExpression 
	 { $current=$iv_rulemultiplicativeExpression.current; } 
	 EOF 
;

// Rule multiplicativeExpression
rulemultiplicativeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExpression1UnaryExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression1_0_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression1",
	        		lv_expression1_0_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'*' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getAsteriskKeyword_1_0_0(), null); 
    }

    |	'/' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getSolidusKeyword_1_0_1(), null); 
    }

    |	'%' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getPercentSignKeyword_1_0_2(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExpressionRestUnaryExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expressionRest_4_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressionRest",
	        		lv_expressionRest_4_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleunaryExpression
entryRuleunaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryExpressionRule(), currentNode); }
	 iv_ruleunaryExpression=ruleunaryExpression 
	 { $current=$iv_ruleunaryExpression.current; } 
	 EOF 
;

// Rule unaryExpression
ruleunaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'+' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getPlusSignKeyword_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getExp1UnaryExpressionParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_exp1_1_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp1",
	        		lv_exp1_1_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'-' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getHyphenMinusKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getExp1UnaryExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp1_3_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp1",
	        		lv_exp1_3_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'++' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getPlusSignPlusSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getExp1UnaryExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_exp1_5_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp1",
	        		lv_exp1_5_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'--' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getHyphenMinusHyphenMinusKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getExp1UnaryExpressionParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_exp1_7_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp1",
	        		lv_exp1_7_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getExp2UnaryExpressionNotPlusMinusParserRuleCall_4_0(), currentNode); 
	    }
		lv_exp2_8_0=ruleunaryExpressionNotPlusMinus		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp2",
	        		lv_exp2_8_0, 
	        		"unaryExpressionNotPlusMinus", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleunaryExpressionNotPlusMinus
entryRuleunaryExpressionNotPlusMinus returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusRule(), currentNode); }
	 iv_ruleunaryExpressionNotPlusMinus=ruleunaryExpressionNotPlusMinus 
	 { $current=$iv_ruleunaryExpressionNotPlusMinus.current; } 
	 EOF 
;

// Rule unaryExpressionNotPlusMinus
ruleunaryExpressionNotPlusMinus returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'~' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getTildeKeyword_0_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionParserRuleCall_0_1(), currentNode); 
    }
    this_unaryExpression_1=ruleunaryExpression
    { 
        $current = $this_unaryExpression_1.current; 
        currentNode = currentNode.getParent();
    }
)
    |(	'!' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getExclamationMarkKeyword_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionParserRuleCall_1_1(), currentNode); 
    }
    this_unaryExpression_3=ruleunaryExpression
    { 
        $current = $this_unaryExpression_3.current; 
        currentNode = currentNode.getParent();
    }
)
    |(
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getPrimaryParserRuleCall_2_0(), currentNode); 
    }
    this_primary_4=ruleprimary
    { 
        $current = $this_primary_4.current; 
        currentNode = currentNode.getParent();
    }
(	'++' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getPlusSignPlusSignKeyword_2_1_0(), null); 
    }

    |	'--' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getHyphenMinusHyphenMinusKeyword_2_1_1(), null); 
    }
)?))
;





// Entry rule entryRuleprimary
entryRuleprimary returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryRule(), currentNode); }
	 iv_ruleprimary=ruleprimary 
	 { $current=$iv_ruleprimary.current; } 
	 EOF 
;

// Rule primary
ruleprimary returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getParExpressionParserRuleCall_0(), currentNode); 
    }
    this_parExpression_0=ruleparExpression
    { 
        $current = $this_parExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getLiteralParserRuleCall_1(), currentNode); 
    }
    this_literal_1=ruleliteral
    { 
        $current = $this_literal_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleliteral
entryRuleliteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralRule(), currentNode); }
	 iv_ruleliteral=ruleliteral 
	 { $current=$iv_ruleliteral.current; } 
	 EOF 
;

// Rule literal
ruleliteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(RULE_INT
    { 
    createLeafNode(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getDOUBLEParserRuleCall_1(), currentNode); 
    }
ruleDOUBLE
    { 
        currentNode = currentNode.getParent();
    }

    |RULE_STRING
    { 
    createLeafNode(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_2(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getExtendedIDParserRuleCall_3(), currentNode); 
    }
ruleextendedID
    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getJavaFunctionCallParserRuleCall_4(), currentNode); 
    }
    this_javaFunctionCall_4=rulejavaFunctionCall
    { 
        $current = $this_javaFunctionCall_4.current; 
        currentNode = currentNode.getParent();
    }

    |	'true' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getTrueKeyword_5(), null); 
    }

    |	'TRUE' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getTRUEKeyword_6(), null); 
    }

    |	'false' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getFalseKeyword_7(), null); 
    }

    |	'FALSE' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getFALSEKeyword_8(), null); 
    }
)
;











// Entry rule entryRulejavaFunctionDeclaration
entryRulejavaFunctionDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getJavaFunctionDeclarationRule(), currentNode); }
	 iv_rulejavaFunctionDeclaration=rulejavaFunctionDeclaration 
	 { $current=$iv_rulejavaFunctionDeclaration.current; } 
	 EOF 
;

// Rule javaFunctionDeclaration
rulejavaFunctionDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'static' 
    {
        createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getStaticKeyword_0(), null); 
    }
)?(	'public' 
    {
        createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getPublicKeyword_1_0(), null); 
    }

    |	'private' 
    {
        createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getPrivateKeyword_1_1(), null); 
    }

    |	'protected' 
    {
        createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getProtectedKeyword_1_2(), null); 
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionDeclarationAccess().getReturnTypeAttributeTypeParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_returnType_4_0=ruleattributeType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"returnType",
	        		lv_returnType_4_0, 
	        		"attributeType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |	'void' 
    {
        createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getVoidKeyword_2_1(), null); 
    }
)(
(
		lv_name_6_0=RULE_ID
		{
			createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_6_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getLeftParenthesisKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionDeclarationAccess().getArgListAttributeTypeParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_argList_8_0=ruleattributeType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argList",
	        		lv_argList_8_0, 
	        		"attributeType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionDeclarationAccess().getArgListIDExtendedIDParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_argListID_9_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argListID",
	        		lv_argListID_9_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getCommaKeyword_5_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionDeclarationAccess().getArgListAttributeTypeParserRuleCall_5_2_1_0(), currentNode); 
	    }
		lv_argList_11_0=ruleattributeType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argList",
	        		lv_argList_11_0, 
	        		"attributeType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionDeclarationAccess().getArgListIDExtendedIDParserRuleCall_5_2_2_0(), currentNode); 
	    }
		lv_argListID_12_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argListID",
	        		lv_argListID_12_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getJavaFunctionDeclarationAccess().getRightParenthesisKeyword_6(), null); 
    }
)
;





// Entry rule entryRulejavaFunctionDefinition
entryRulejavaFunctionDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getJavaFunctionDefinitionRule(), currentNode); }
	 iv_rulejavaFunctionDefinition=rulejavaFunctionDefinition 
	 { $current=$iv_rulejavaFunctionDefinition.current; } 
	 EOF 
;

// Rule javaFunctionDefinition
rulejavaFunctionDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionDefinitionAccess().getDeclJavaFunctionDeclarationParserRuleCall_0_0(), currentNode); 
	    }
		lv_decl_0_0=rulejavaFunctionDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"decl",
	        		lv_decl_0_0, 
	        		"javaFunctionDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionDefinitionAccess().getCodeBlockParserRuleCall_1_0(), currentNode); 
	    }
		lv_code_1_0=ruleblock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"code",
	        		lv_code_1_0, 
	        		"block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulejavaFunctionCall
entryRulejavaFunctionCall returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getJavaFunctionCallRule(), currentNode); }
	 iv_rulejavaFunctionCall=rulejavaFunctionCall 
	 { $current=$iv_rulejavaFunctionCall.current; } 
	 EOF 
;

// Rule javaFunctionCall
rulejavaFunctionCall returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionCallAccess().getNameExtendedIDParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getJavaFunctionCallAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJavaFunctionCallAccess().getArgsExpressionListParserRuleCall_2_0(), currentNode); 
	    }
		lv_args_2_0=ruleexpressionList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaFunctionCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"args",
	        		lv_args_2_0, 
	        		"expressionList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	')' 
    {
        createLeafNode(grammarAccess.getJavaFunctionCallAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleblockStatement
entryRuleblockStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlockStatementRule(), currentNode); }
	 iv_ruleblockStatement=ruleblockStatement 
	 { $current=$iv_ruleblockStatement.current; } 
	 EOF 
;

// Rule blockStatement
ruleblockStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getBlockStatementAccess().getStatementParserRuleCall_0(), currentNode); 
    }
    this_statement_0=rulestatement
    { 
        $current = $this_statement_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getBlockStatementAccess().getLocalVariableDeclarationStatementParserRuleCall_1(), currentNode); 
    }
    this_localVariableDeclarationStatement_1=rulelocalVariableDeclarationStatement
    { 
        $current = $this_localVariableDeclarationStatement_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulelocalVariableDeclarationStatement
entryRulelocalVariableDeclarationStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLocalVariableDeclarationStatementRule(), currentNode); }
	 iv_rulelocalVariableDeclarationStatement=rulelocalVariableDeclarationStatement 
	 { $current=$iv_rulelocalVariableDeclarationStatement.current; } 
	 EOF 
;

// Rule localVariableDeclarationStatement
rulelocalVariableDeclarationStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLocalVariableDeclarationStatementAccess().getLocalVariableDeclarationParserRuleCall_0(), currentNode); 
    }
    this_localVariableDeclaration_0=rulelocalVariableDeclaration
    { 
        $current = $this_localVariableDeclaration_0.current; 
        currentNode = currentNode.getParent();
    }
	';' 
    {
        createLeafNode(grammarAccess.getLocalVariableDeclarationStatementAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRulelocalVariableDeclaration
entryRulelocalVariableDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLocalVariableDeclarationRule(), currentNode); }
	 iv_rulelocalVariableDeclaration=rulelocalVariableDeclaration 
	 { $current=$iv_rulelocalVariableDeclaration.current; } 
	 EOF 
;

// Rule localVariableDeclaration
rulelocalVariableDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getTypeAttributeTypeParserRuleCall_0_0(), currentNode); 
	    }
		lv_type_0_0=ruleattributeType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalVariableDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"attributeType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getDecVariableDeclaratorsParserRuleCall_1_0(), currentNode); 
	    }
		lv_dec_1_0=rulevariableDeclarators		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalVariableDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dec",
	        		lv_dec_1_0, 
	        		"variableDeclarators", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulevariableDeclarators
entryRulevariableDeclarators returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableDeclaratorsRule(), currentNode); }
	 iv_rulevariableDeclarators=rulevariableDeclarators 
	 { $current=$iv_rulevariableDeclarators.current; } 
	 EOF 
;

// Rule variableDeclarators
rulevariableDeclarators returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclaratorsAccess().getVdVariableDeclaratorParserRuleCall_0_0(), currentNode); 
	    }
		lv_vd_0_0=rulevariableDeclarator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclaratorsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"vd",
	        		lv_vd_0_0, 
	        		"variableDeclarator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getVariableDeclaratorsAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclaratorsAccess().getVdVariableDeclaratorParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_vd_2_0=rulevariableDeclarator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclaratorsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"vd",
	        		lv_vd_2_0, 
	        		"variableDeclarator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulevariableDeclarator
entryRulevariableDeclarator returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableDeclaratorRule(), currentNode); }
	 iv_rulevariableDeclarator=rulevariableDeclarator 
	 { $current=$iv_rulevariableDeclarator.current; } 
	 EOF 
;

// Rule variableDeclarator
rulevariableDeclarator returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclaratorAccess().getNameExtendedIDParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleextendedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclaratorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"extendedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getVariableDeclaratorAccess().getEqualsSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclaratorAccess().getExpExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclaratorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_rulestatement=rulestatement 
	 { $current=$iv_rulestatement.current; } 
	 EOF 
;

// Rule statement
rulestatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getBlockParserRuleCall_0(), currentNode); 
    }
    this_block_0=ruleblock
    { 
        $current = $this_block_0.current; 
        currentNode = currentNode.getParent();
    }

    |(	'if' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getIfKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getConditionParExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_condition_2_0=ruleparExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_2_0, 
	        		"parExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getState1StatementParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_state1_3_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"state1",
	        		lv_state1_3_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'else' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getElseKeyword_1_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getState2StatementParserRuleCall_1_3_1_0(), currentNode); 
	    }
		lv_state2_5_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"state2",
	        		lv_state2_5_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |(	'for' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getForKeyword_2_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getLeftParenthesisKeyword_2_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getControlForControlParserRuleCall_2_2_0(), currentNode); 
	    }
		lv_control_8_0=ruleforControl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"control",
	        		lv_control_8_0, 
	        		"forControl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getRightParenthesisKeyword_2_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getStateStatementParserRuleCall_2_4_0(), currentNode); 
	    }
		lv_state_10_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"state",
	        		lv_state_10_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'while' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getWhileKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getConditionParExpressionParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_condition_12_0=ruleparExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_12_0, 
	        		"parExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getStateStatementParserRuleCall_3_2_0(), currentNode); 
	    }
		lv_state_13_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"state",
	        		lv_state_13_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'return' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getReturnKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getRetValExpressionParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_retVal_15_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"retVal",
	        		lv_retVal_15_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	';' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getSemicolonKeyword_4_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getSemicolonKeyword_5(), null); 
    }

    |(	'break' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getBreakKeyword_6_0(), null); 
    }
	';' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getSemicolonKeyword_6_1(), null); 
    }
)
    |(
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall_7_0(), currentNode); 
    }
    this_expression_20=ruleexpression
    { 
        $current = $this_expression_20.current; 
        currentNode = currentNode.getParent();
    }
	';' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getSemicolonKeyword_7_1(), null); 
    }
)
    |(	'try' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getTryKeyword_8_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getTryBlockBlockParserRuleCall_8_1_0(), currentNode); 
	    }
		lv_tryBlock_23_0=ruleblock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tryBlock",
	        		lv_tryBlock_23_0, 
	        		"block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'catch' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getCatchKeyword_8_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getCatchBlockBlockParserRuleCall_8_3_0(), currentNode); 
	    }
		lv_catchBlock_25_0=ruleblock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"catchBlock",
	        		lv_catchBlock_25_0, 
	        		"block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleforControl
entryRuleforControl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getForControlRule(), currentNode); }
	 iv_ruleforControl=ruleforControl 
	 { $current=$iv_ruleforControl.current; } 
	 EOF 
;

// Rule forControl
ruleforControl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForControlAccess().getInitForInitParserRuleCall_0_0(), currentNode); 
	    }
		lv_init_0_0=ruleforInit		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForControlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"init",
	        		lv_init_0_0, 
	        		"forInit", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	';' 
    {
        createLeafNode(grammarAccess.getForControlAccess().getSemicolonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForControlAccess().getConditionExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_condition_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForControlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	';' 
    {
        createLeafNode(grammarAccess.getForControlAccess().getSemicolonKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForControlAccess().getUpdateForUpdateParserRuleCall_4_0(), currentNode); 
	    }
		lv_update_4_0=ruleforUpdate		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForControlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"update",
	        		lv_update_4_0, 
	        		"forUpdate", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleforInit
entryRuleforInit returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getForInitRule(), currentNode); }
	 iv_ruleforInit=ruleforInit 
	 { $current=$iv_ruleforInit.current; } 
	 EOF 
;

// Rule forInit
ruleforInit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForInitAccess().getExpressionsExpressionParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_expressions_0_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForInitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_0_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getForInitAccess().getCommaKeyword_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForInitAccess().getExpressionsExpressionParserRuleCall_0_1_1_0(), currentNode); 
	    }
		lv_expressions_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForInitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getForInitAccess().getLocalVariableDeclarationParserRuleCall_1(), currentNode); 
    }
    this_localVariableDeclaration_3=rulelocalVariableDeclaration
    { 
        $current = $this_localVariableDeclaration_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleforUpdate
entryRuleforUpdate returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getForUpdateRule(), currentNode); }
	 iv_ruleforUpdate=ruleforUpdate 
	 { $current=$iv_ruleforUpdate.current; } 
	 EOF 
;

// Rule forUpdate
ruleforUpdate returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getForUpdateAccess().getExpressionListParserRuleCall(), currentNode); 
    }
    this_expressionList_0=ruleexpressionList
    { 
        $current = $this_expressionList_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleextendedID
entryRuleextendedID returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExtendedIDRule(), currentNode); } 
	 iv_ruleextendedID=ruleextendedID 
	 { $current=$iv_ruleextendedID.current.getText(); }  
	 EOF 
;

// Rule extendedID
ruleextendedID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0(), null); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1(), null); 
    }
)*)
    ;





// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDOUBLERule(), currentNode); } 
	 iv_ruleDOUBLE=ruleDOUBLE 
	 { $current=$iv_ruleDOUBLE.current.getText(); }  
	 EOF 
;

// Rule DOUBLE
ruleDOUBLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_0(), null); 
    }

	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDOUBLEAccess().getFullStopKeyword_1(), null); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_2(), null); 
    }
)
    ;





// Entry rule entryRuleattributeType
entryRuleattributeType returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeTypeRule(), currentNode); } 
	 iv_ruleattributeType=ruleattributeType 
	 { $current=$iv_ruleattributeType.current.getText(); }  
	 EOF 
;

// Rule attributeType
ruleattributeType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='Date' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getDateKeyword_0(), null); 
    }

    |
	kw='Time' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getTimeKeyword_1(), null); 
    }

    |
	kw='Double' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getDoubleKeyword_2(), null); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getDoubleKeyword_3(), null); 
    }

    |
	kw='Integer' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getIntegerKeyword_4(), null); 
    }

    |
	kw='integer' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getIntegerKeyword_5(), null); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getIntKeyword_6(), null); 
    }

    |
	kw='Boolean' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getBooleanKeyword_7(), null); 
    }

    |
	kw='boolean' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getBooleanKeyword_8(), null); 
    }

    |
	kw='String' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getStringKeyword_9(), null); 
    }

    |
	kw='string' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeTypeAccess().getStringKeyword_10(), null); 
    }
)
    ;











RULE_RUBY_FUNCTION : RULE_DEF ( options {greedy=false;} : . )*RULE_END;

RULE_DEF : 'def';

RULE_END : 'end';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


