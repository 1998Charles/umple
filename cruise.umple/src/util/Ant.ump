
namespace cruise.umple.util;

external Task {};

/**
 * Defines an Ant task to use in Ant-like build environments
 */
class UmplecAntTask {
  depend org.apache.tools.ant.*;
  depend cruise.umple.UmpleConsoleConfig;
  depend cruise.umple.UmpleConsoleMain;
  depend java.util.*;
  depend java.util.stream.*;
  depend java.io.File;
  depend java.nio.file.*;

  isA Task;

  // The method executing the task
  void execute() throws BuildException {

    this.linkedFiles.stream().map(LinkedFile::getSrc).map(p -> cwd.relativize(p)).map(Path::toString).forEach(this.cfg::addLinkedFile);

  	UmpleConsoleMain console = new UmpleConsoleMain(cfg);
    int res = console.runConsole();

    if (res != 0) {
      throw new BuildException("Error running Umple task: " + res + ".");
    }

  }

  internal UmpleConsoleConfig cfg = new UmpleConsoleConfig("");
  internal Path cwd = Paths.get(System.getProperty("user.dir"));


  public void setSrc(File aSrc) {
    Path ufile = cwd.relativize(aSrc.toPath());

  	this.cfg.setUmpleFile(ufile.toString());
  	}

  public void setLinkedFile(String linkedFile) {
  	this.cfg.addLinkedFile(linkedFile);
  }

  public void setGenerate(String generate) {
    this.cfg.setGenerate(generate);
  }

  public void setOverride(boolean override) {
    this.cfg.setOverride(override);
  }

  internal List<LinkedFile> linkedFiles = new ArrayList<>(4);

  public LinkedFile createLinkedFile() {
    LinkedFile f = new LinkedFile();
    linkedFiles.add(f);
    return f;
  }

  protected static class LinkedFile {
    private Path p = null;

    public void setSrc(File f) { this.p = f.toPath(); }
    public Path getSrc() { return this.p; } 

    public String toString() {
      return "LinkedFile{src=" + p.toString() + "}";
    }
  }

}
