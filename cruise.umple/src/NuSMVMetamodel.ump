namespace cruise.umple.nusmv;

class NuSMVModule {
  	identifier;
  	String [] parameters;
	private String printParameters() {
		String temp = "";
		int size = parameters.size();
		if(size > 1) {
  			for(int i = 0; i < size - 1 ; i++)
  				temp += parameters.get(i) + " , ";
  			temp += parameters.get(size-1);
  		} 
  		else 
  			temp = parameters.get(0);
		return temp;
	}
  
  	1 -> 1 ModuleBody;
  	comment <<!
-- This defines a NuSMV module for <<=identifier>> --
!>>
	output <<!MODULE <<=getIdentifier()>><<#if(parameters.size() != 0){#>> ( <<=printParameters()>> )<<=moduleBody.toString()>><<#}
else {#>><<=moduleBody.toString()>><<#}#>>!>>
  emit toString()(comment, output);
}

class ModuleBody {

  1 -> 1..* ModuleElement;
	
	//Defines the template for outputting the instance of this class
	output <<!<<#for(ModuleElement me : moduleElements){#>>
<<=me.toString()>><<#}#>>!>>
  emit toString()(output);
}

class ModuleElement {
    lazy header;
}

class VarDeclaration {
  
  isA ModuleElement;
  after constructor { setHeader("VAR"); }
  1 -> 1..* VariableSpecifier;

  comment <<!
   -- This part declares state variables for the given NuSMV module --
!>>
  output <<!   <<=getHeader()>>
    <<#for(VariableSpecifier vs : variableSpecifiers){#>>
     <<=vs.toString()>><<#}#>>!>>
  emit toString()(comment, output);
}

class VariableSpecifier {
  
  identifier;
  String [] typeSpecifier;
  lazy boolean isBracketed;
  lazy String typeName;
  
  after constructor { isBracketed = false; typeName = ""; }
  
  public String print() {
    String temp = "";
    if(typeSpecifier.size() > 0){
		for(int i = 0; i < typeSpecifier.size() - 1 ; i++)
  	  		temp += typeSpecifier.get(i) + " , ";
  		temp += typeSpecifier.get(typeSpecifier.size() - 1);
  	}
	return temp;
  }
	
  output <<!
  <<#if(typeSpecifier.size() == 1 && !isBracketed){#>><<=getIdentifier()>> : <<=typeSpecifier.get(0)>>;<<#}
  else if( isBracketed ){#>><<=getIdentifier()>> : <<=getTypeName()>>( <<=print()>> );<<#}
  else {#>><<=getIdentifier()>> : { <<=print()>> };<<#}#>>!>>
  emit toString()(output);
}

class IVarDeclaration {
  
  isA ModuleElement;
  after constructor { setHeader("IVAR");}

  1 -> 1..* VariableSpecifier;
  comment <<!
   -- This part declares input variables for the given NuSMV module --
  !>>
  output <<! <<=getHeader()>>
    <<#for(VariableSpecifier vs : variableSpecifiers){#>>
     <<=vs.toString()>>
    <<#}#>>!>>
  emit toString()( comment, output );
}

class DefineDeclaration {
  
  isA ModuleElement;
  after constructor { setHeader("DEFINE");}
  1 -> 1..* DefineBody;
  comment <<!
   -- This part defines macros that summarize the transitions and guards (if any) of the given NuSMV module --
  !>>
  output <<! <<=getHeader()>>
  <<#for(DefineBody db : defineBodies){#>><<=db.toString()>>
  <<#}#>>!>>
  emit toString()(comment, output); 
}

class DefineBody {
  identifier;
  1 -> 1 BasicExpression;
  
  output <<!
     <<=getIdentifier()>> :=<<=basicExpression.toString()>>;!>>
  emit toString()(output);
}

class BasicExpression {
	//Association definition
	0..1 parent -- 0..2 BasicExpression children;
	//Variable Declarations
	identifier;
  	lazy Boolean bracketed;
	lazy Boolean displayNegation;
	operator { AND, OR, XOR, XNOR, IMPLY, IFF, EQ, NE, LT, GT, LE, GE, NULL, NOT, MOD, PLUS, MUL, MINUS, DIV };
  	after constructor { setBracketed(false); }
	after constructor { setDisplayNegation(false); }
    
  public String convertOperator(){
		String op = getOperatorFullName();
		switch( op ){
			case "AND" : 		return " & ";
			case "OR" :      		return " | ";
			case "XOR" :    	return " xor ";
			case "XNOR" : 	return " xnor ";
			case "IMPLY" : 	return " -> ";
			case "IFF" : 			return " <-> ";
			case "EQ" : 			return " = ";
			case "NE" : 			return " != ";
			case "LT" : 			return " < ";
			case "GT" : 			return " > ";
			case "LE" : 			return " <= ";
			case "GE" : 			return " >= ";
            case "MINUS" : 	return " - ";
            case "NOT" : 		return " ! ";
			case "MOD" : return " mod ";
			case "PLUS" : return " + ";
			case "MUL" : return " * ";
			case "DIV" : return " / ";
			
			default : 				return "";
		}
  }
	public String getExpression() {
  		String op = convertOperator();
  		String temp = "";
		if(children.size() == 0)
      		return getIdentifier();
    	if(getChildren().size() == 1)
				if(getBracketed()) {
					temp += "( ";
					temp += getChildren().get(0) == null ? getChildren().get(1).getExpression() : getChildren().get(0).getExpression() + " )";
				}
      			else  
      				temp = getChildren().get(0) == null ? getChildren().get(1).getExpression() : getChildren().get(0).getExpression();
    	else
				if(getBracketed())
					temp = "( "+ getChildren().get(0).getExpression() + op + getChildren().get(1).getExpression()+" )";
      			else 
      				temp = getChildren().get(0).getExpression() + op + getChildren().get(1).getExpression();   	
      	if(getDisplayNegation())
      		return " !"+temp;
      	return temp;
	}	

  //Template for formatting output
  output <<! <<=getExpression()>>!>>
  emit toString()(output);
}

class CTLSpecification {
	isA ModuleElement;
	after constructor { setHeader("CTLSPEC"); }
	1 -> 1 CTLExpression;
  	//Template for formatting output
  	output <<!<<=getHeader()>>  <<=cTLExpression.toString()>>!>>
  	emit toString()(output);
}

class InvarExpression {
	isA BasicExpression;
	invarOperator { next };
	lazy Boolean qualified;
	after constructor { setQualified(false); }
	
    public String getExpression() {
  		String op = convertOperator();
  		String temp = "";
		if(getChildren().size() == 0)
      		return getIdentifier();
    	if(getChildren().size() == 1)
				if(getBracketed()) {
					temp += "( ";
					temp += getChildren().get(0) == null ? getChildren().get(1).getExpression() : getChildren().get(0).getExpression() + " )";
				}
      			else  
      				temp = getChildren().get(0) == null ? getChildren().get(1).getExpression() : getChildren().get(0).getExpression();
    	else
				if(getBracketed())
					temp = "( "+ getChildren().get(0).getExpression() + op + getChildren().get(1).getExpression()+" )";
      			else 
      				temp = getChildren().get(0).getExpression() + op + getChildren().get(1).getExpression();   	
      	if(getDisplayNegation())
      		temp = " !"+temp;
      	if( qualified )
      		return getInvarOperatorFullName() + temp;
      	return temp;
	}	
	//Template for formatting output
  output <<! <<=getExpression()>>!>>
  emit toString()(output);
}

class CTLExpression {
	isA BasicExpression;
	ctlOperator { EG, EX, EF, AG, AX, AF, E, A, U };
	lazy Boolean qualified;
	after constructor { setQualified(false); }
	
    public String getExpression() {
  		String op = convertOperator();
  		String temp = "";
		if(getChildren().size() == 0)
      		return getIdentifier();
    	if(getChildren().size() == 1)
				if(getBracketed()) {
					temp += "( ";
					temp += getChildren().get(0) == null ? getChildren().get(1).getExpression() : getChildren().get(0).getExpression() + " )";
				}
      			else  
      				temp = getChildren().get(0) == null ? getChildren().get(1).getExpression() : getChildren().get(0).getExpression();
    	else
				if(getBracketed())
					temp = "( "+ getChildren().get(0).getExpression() + op + getChildren().get(1).getExpression()+" )";
      			else 
      				temp = getChildren().get(0).getExpression() + op + getChildren().get(1).getExpression();   	
      	if(getDisplayNegation())
      		temp = " !"+temp;
      	if( qualified )
      		return getCtlOperatorFullName() + temp;
      	return temp;
	}	
	//Template for formatting output
  output <<! <<=getExpression()>>!>>
  emit toString()(output);
}

class NextExpression {
  isA BasicExpression;
  1 -> 1 BasicExpression;
  
  output <<!next( <<=getIdentifier()>> ) =<<=basicExpression.toString()>>!>>
  emit getExpression()(output);
}

class AssignConstraint {

  isA ModuleElement;
  after constructor { setHeader("ASSIGN"); }

	//Association Definition
  1 -> 1..* Assign; 

	private <E> boolean has( List<E> objectList, E whatToFind ) {
  		boolean yes = false;
  		for(E st : objectList) {
  			if( st.equals(whatToFind) ) {
  				yes = true;
  				break;
  			}
  		}
  		return yes;
	} 

	private String getVarNames(){
		List<String> names = new ArrayList<String>();
		for( Assign assign : assigns ) {
			if(! has( names, assign.getIdentifier()))
				names.add(assign.getIdentifier());
		}		

		if( names.size() == 1)
			return names.get(0);
		String temp = "";
		int i = 0;
		while( i < names.size() - 1 ){
			temp += names.get(i) +", ";
			i++;
		}
		temp += names.get(i);
		return temp;
	}
  comment <<!
   -- This part defines logic for the assignment of values to state variable "<<=getVarNames()>>" of this NuSMV module --
  !>>
  output <<! <<=getHeader()>>
 <<#for(Assign assign : assigns){#>><<=assign.toString()>>
 <<#}#>>!>>
  emit toString()(comment, output);
}

class Assign {
		
  identifier;
  1 -> 1 BasicExpression;
  public String toString() { return null; }
}

class SimpleAssign {
	isA Assign;
  
  //Template for formatting output
  output <<!
    <<=getIdentifier()>> :=<<=getBasicExpression().toString()>>;!>>
  emit toString()(output);
}

class InitAssign {
	isA Assign;

  //Template for formatting output
  output <<!
     init( <<=getIdentifier()>> ) :=<<=getBasicExpression().toString()>>;!>>
  emit toString()(output);
}

class NextAssign {
	isA Assign;
  
  //Template for formatting output
  output <<!
     next( <<=getIdentifier()>> ) :=<<=getBasicExpression().toString()>>;!>>
  emit toString()(output);
}

class CaseExpression {
  isA BasicExpression;
  1 -> 1..* CaseStatement;
  
  output <<! case
  <<#for(CaseStatement stmt : caseStatements){#>><<=stmt.toString()>>
  <<#}#>>
     esac!>>
  emit toString()(output);
}

class CaseStatement {
  1 -> 2 BasicExpression;
  
  //Template for formatting output
  output <<!
      <<=basicExpressions.get(0).toString()>> :<<=basicExpressions.get(1).toString()>>;!>>
  emit toString()(output);
}

class TransConstraint {
  
  isA ModuleElement;
  after constructor { setHeader("TRANS"); setTerminated(false); }

	//Associations with basic expressions
	1 -> 1 BasicExpression;

	lazy Boolean terminated;
    
  //Template for formatting output
  output <<! <<=getHeader()>>
   <<#if(terminated){#>> <<=basicExpression.toString()>>;
  <<#}
   else{#>> <<=basicExpression.toString()>>
  <<#}#>>!>>
  emit toString()(output);
}

class InitConstraint {
  
  isA ModuleElement;
  after constructor { setHeader("INIT"); setTerminated(false); }
	lazy Boolean terminated; 

	//Defines associations with basic expressions
	1 -> 1 BasicExpression;  

	//Template for formatting output
  output <<! <<=getHeader()>>
  <<#if(terminated){#>>  <<=basicExpression.toString()>>;
  <<#}
  else{#>>  <<=basicExpression.toString()>>
  <<#}#>>!>>
  emit toString()(output); 
}

class InvarConstraint {
  
  isA ModuleElement;
  after constructor { setHeader("INVARSPEC"); setTerminated(false); }
  
  //Defines associations with basic expressions
  1 -> 1 InvarExpression;
  lazy Boolean terminated;
  //Template for formatting output
  output <<!   <<=getHeader()>>
  <<#if(terminated){#>>  <<=invarExpression.toString()>>;
  <<#}
  else{#>>  <<=invarExpression.toString()>>
  <<#}#>>!>>
  emit toString()(output); 
}
