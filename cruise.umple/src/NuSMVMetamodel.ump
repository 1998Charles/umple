namespace cruise.umple.nusmv;

class NuSMVModule
{

  //depend cruise.umple.compiler.*;
  
  // Attributes declaration
  name; 
  startState;
  String [] args;
  
  //Associations of module object
  * -- 0..1 AssignPart;
  * -- 0..1 TransitionPart;
  * -- 0..1 DeclarationPart;
  
  // This defines the print method for nusmv modules
  output <<!<<#if(args.size() == 0){#>>

MODULE <<=getName()>><<#}
  else{
  	String temp = "";
		int size = args.size();
		if(size > 1) {
  		for(int i = 0; i < size - 1 ; i++)
  			temp += args.get(i) + " , ";
  		temp += args.get(size-1);
  	} 
  	else 
  		temp = args.get(0);
  		
  	#>>

MODULE <<=getName()>>( <<=temp>> )<<#}#>>

  <<#if(declarationPart != null){#>>

  <<=declarationPart.toString()>><<#}#>>

  <<#if(assignPart != null){#>>
	
  <<=assignPart.toString(handle, dot)>><<#}#>>
  <<#if(transitionPart != null){#>>

  <<=transitionPart.toString(handle, dot)>><<#}#>>

  !>>
  	emit toString(String handle,String dot)(output);
}

class AssignPart 
{
  name;
  startState;
	varName;
  after constructor { setName("ASSIGN"); }
	
	private String print(String handle, String dot) {
		if(varName != "")
			return varName;
		else
			return handle+dot+"state";
	}

  output <<!<<=getName()>>
  	init(<<=print(handle,dot)>>) := <<=startState>>;!>>
	emit toString(String handle,String dot)(output);
}

class DeclarationStatement
{
  name;
  public String toString(){ return ""; }
}

class DeclarationPart
{
  name;
  * -- 1..* DeclarationStatement;
  after constructor { setName("VAR"); }
  
   
  private String writeStatements()
  {
		int n = declarationStatements.size();
		String temp = "";
  	if(n == 1) 
			return declarationStatements.get(0).toString();
  	else {
			if(n > 1) {
  			for(int i = 0; i < n - 1 ; i++)
  				temp += declarationStatements.get(i).toString() + "\n    ";
  			temp += declarationStatements.get(n-1).toString();
  		}
  	}
  	return temp;
  }
  
  output <<!<<=getName()>> 
    <<=writeStatements()>> !>>
  	emit toString()(output);
}

class EnumerationElement
{
  value;
}

class VarDeclarationStatement
{
  isA DeclarationStatement;
  type;
  String [] arguments;
  
  // This defines the print method for nusmv modules
	private String writeElements()
	{
		String temp = "";
		for(int i = 0; i < arguments.size() - 1 ; i++)
  			temp += arguments.get(i) + " , ";
  		temp += arguments.get(arguments.size() - 1);
		return temp;
	}

  output <<!<<#if(arguments.size() == 0){#>><<=getName()>> : <<=getType()>>;<<#}
  else{#>><<=getName()>> : <<=getType()>>( <<=writeElements()>> );<<#}#>>!>>
  emit toString()(output);
}

class EnumerationStatement 
{
  isA DeclarationStatement;
  * -> 1..* EnumerationElement;
  
  private String writeElements(int size)
  {
	int n = size;
	String temp = "";
  	if(n == 1) return enumerationElements.get(0).getValue();
  	else {
  		int i = 0;
  		while(i < n - 1)
  		{
  			temp += enumerationElements.get(i).getValue() + " , ";
  			i++;
  		}
  		temp += enumerationElements.get(i).getValue();
  	}
  		return temp;
  }
  
  output <<!<<=  getName()>> : { <<=writeElements(numberOfEnumerationElements())>> }; !>>
  emit toString()(output);
  
}

class TransitionPart 
{
  name;
  after constructor { setName("TRANS"); } 
  * -- * ComplexTransition;
  * -- * SimpleTransition;
  * -- * NuSMVTransition;
  
  private String writeTransitions(int size, String handle, String dot)
  {
	int n = size;
	String temp = "";
		if(size == 0) return "";
  	if(n == 1) return nuSMVTransitions.get(0).toString(handle , dot);
  	else {
  		int i = 0;
  		while(i < n - 1)
  		{
  			temp += nuSMVTransitions.get(i).toString(handle , dot) + " &\n    ";
  			i++;
  		}
  		temp += nuSMVTransitions.get(i).toString(handle , dot);
  	}
  	return temp;
  }  
  
  output <<!
  <<=getName()>>
  <<#for(ComplexTransition ctrans : getComplexTransitions())
    addNuSMVTransition(ctrans);#>>
  <<#for(SimpleTransition strans : getSimpleTransitions())
   addNuSMVTransition(strans);#>>
<<=writeTransitions(numberOfNuSMVTransitions(), handle, dot)>>!>>
  emit toString(String handle, String dot)(output);
}

class NextExpression 
{
	name;
	value;
	varName;
}

class NuSMVTransition
{
	fromState;
	varName;
  public String toString(String handle,String dot) { return null; }
}

class ComplexTransition 
{
  isA NuSMVTransition;
  * -- 2..* SimpleTransition;
  
  private String writeTransitions(int size,String handle,String dot)
  {
	int n = size;
	String temp = "";
  	if(n == 1) return simpleTransitions.get(0).printMe(handle , dot);
  	else {
  		int i = 0;
  		while(i < n - 1)
  		{
  			temp += simpleTransitions.get(i).printMe(handle , dot) + "|\n    ";
  			i++;
  		}
  		temp += simpleTransitions.get(i).printMe(handle , dot);
  	}
  		return temp;
  }
  
  output <<!( (<<=getVarName()>> = <<=simpleTransitions.get(0).getFromState()>>) -> (
    <<=writeTransitions(numberOfSimpleTransitions(), handle, dot)>>) )!>>
  emit toString(String handle , String dot)(output);
}

class SimpleTransition 
{
  isA NuSMVTransition;
  1 -> 1..* NextExpression;
  event;
  public String toString(String handle, String dot)
  {
    if(getEvent().contains("__autotransition") )
    	return printTransitionWithAutoEvent(handle,dot);
    if(getEvent() == "")
    	return printTransitionWithNoEvent(handle,dot);
    return printNormalTransition(handle,dot);
  }

  private String computeDot(int i)
	{
		return getNextExpression(i).getVarName() == ""? "" : ".";
	}
  
  public String convertToString()
  {
  	String temp = "";
    //String dot = getVarName() == ""? "" : ".";
  	int size = numberOfNextExpressions();
  	if(size == 0)
  		return temp;
  	if(size == 1)
  		return "next("+getNextExpression(0).getVarName()+computeDot(0)+
  			getNextExpression(0).getName()+") = "+getNextExpression(0).getValue(); 
  	for(int i = 0; i < size - 1;i++)
  		temp += "next("+getNextExpression(i).getVarName()+computeDot(i)+
  			getNextExpression(i).getName()+") = "+getNextExpression(i).getValue()+" & ";
  	temp += "next("+getNextExpression(size-1).getVarName()+computeDot(size - 1)+
  			getNextExpression(size-1).getName()+") = "+getNextExpression(size-1).getValue();
  	return temp;
  }
  
  //This print transitions without an event, but source and target states.
  outputWithAutoEvent <<!( (<<=handle>><<=dot>>event = <<=getEvent()>>) -> ( <<=convertToString()>>) )!>>
  	emit printTransitionWithAutoEvent(String handle,String dot)(outputWithAutoEvent);
  
  //This print transitions without an event, but source and target states.
  outputWithNoEvent <<!( (<<=getVarName()>> = <<=getFromState()>>) -> ( <<=convertToString()>>) )!>>
  	emit printTransitionWithNoEvent(String handle,String dot)(outputWithNoEvent);
  
  //This prints transitions with event, and source and target states. 
  output <<!( (<<=getVarName()>> = <<=getFromState()>>) -> (
  	   <<=handle>><<=dot>>event = <<=getEvent()>> & <<=convertToString()>>) )!>>
  	emit printNormalTransition(String handle,String dot)(output);
  	
  //This prints transitions with event and traget state.	
  output1 <<!  (<<=handle>><<=dot>>event = <<=getEvent()>> & <<=convertToString()>>)  !>>
    emit printMe(String handle , String dot)(output1);
    
}
