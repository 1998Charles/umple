module cruise.umple.GenerateUmple

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtext.generator.parser.antlr.*

var umpleGrammarURI = "classpath:/cruise/umple/Umple.xtext"
var file.extensions = "ump"
var projectName = "cruise.umple"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
		platformUri = "${runtimeProject}/.."
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.xtext.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.xtext.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.xtext.ui"
		
		// UMPLE FRAGMENTS
		language = {
			uri = umpleGrammarURI
			fileExtensions = file.extensions
			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}
			// generates Java API for the generated EPackages 
			fragment = ecore.EcoreGeneratorFragment {
				//referencedGenModels="platform:/resource/cruise.umple.xtext.ext.java/src-gen/cruise/umple/xtext/ext/Java.genmodel"
			}
			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}
			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment {
			}
			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
			// scoping and exporting API 
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = builder.BuilderIntegrationFragment {}
			// formatter API 
			fragment = formatting.FormatterFragment {}
			// labeling API 
			fragment = labeling.LabelProviderFragment {}
			// outline API 
			fragment = outline.TransformerFragment {}
			fragment = outline.OutlineNodeAdapterFactoryFragment {}
			fragment = outline.QuickOutlineFragment {}
			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}
			// content assist API  
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			// generates a more lightweight Antlr parser and lexer tailored for content assist  
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}		
	}
		
}

}
