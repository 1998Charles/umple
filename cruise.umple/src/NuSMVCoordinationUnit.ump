namespace cruise.umple.nusmv;

use NuSMVMetamodel.ump;

class NuSMVCoordinator
{
  depend cruise.umple.compiler.*;
  depend java.util.*;
  
  public String changeNameCase(String str)
  {
    char[] stringArray = str.trim().toCharArray();
    stringArray[0] = Character.toUpperCase(stringArray[0]);
    str = new String(stringArray);
    return str;
  }
  
  public NuSMVModule generateSimpleModule(StateMachine sm)
  {
    NuSMVModule module = new NuSMVModule(changeNameCase(sm.getFullName()), 
    		sm.getStartState().getName()); 
  	module.setDeclarationPart(generateVariables(sm));
  	module.setAssignPart(generateAssign(sm));
  	module.setTransitionPart(genTransition(sm, genStateVariables(sm)));	
  	return module;
  }
  
  public boolean isNested(StateMachine sm)
  {
  	boolean yes = false;
  	for(State st : sm.getStates()) {
  		if(st.numberOfNestedStateMachines() > 0) {
  			yes = true;
  			break;
  		}
  	}
  	return yes;
  }
  
  public StringBuilder genModuleForNestedMachine(StateMachine sm , String handle , String dot) {
  	
  	StringBuilder code = new StringBuilder();
  	//This defines and adds the thin-line module to the output code -- Step (1)
  	NuSMVModule placeHolder = genPlaceHolderModule(sm);
  	code.append(placeHolder.print(handle , dot));
  	EnumerationStatement svar = genStateVariables(sm);		
  	//This defines and adds the parent module to the output code -- Step (2)
  	NuSMVModule parent = genParentModule(sm, placeHolder.getName(),svar);
  	code.append(parent.print(handle , dot));
  	
  	for( State st : sm.getStates() ) {
  		if(st.hasNestedStateMachines())
  		{
  			for( StateMachine ism : st.getNestedStateMachines() ) {
  			
  				//Case when ism is inner statemachine
  				NuSMVModule iModule = genInnerModule(ism,handle,svar);
  			
  				code.append(iModule.print(handle , dot));
  			}
  		}
  	}
  	return code;  	
  }
  
  public NuSMVModule genPlaceHolderModule(StateMachine sm)
  {
  	NuSMVModule module = new NuSMVModule(changeNameCase(sm.getFullName())+"_Handle","");
  	module.setDeclarationPart(generateVariables(sm));
  	return module;
  }
  
  public NuSMVModule genInnerModule(StateMachine sm, String handle, EnumerationStatement stateVar) {
  	NuSMVModule module = new NuSMVModule(changeNameCase(sm.getParentState().getName()),"");
  	module.addArg(handle);
  	
  	/*for(StateMachine s : sm.getNestedStateMachines()){
  		System.out.println(s.getFullName());
  		System.out.println("----------------------");
  	}*/
  	
  	List<Transition> trans = sm.getAllTransitions();
  	for(Transition t : trans)
  		System.out.println("Source:"+t.getFromState().getName() + " - Event :"+ t.getEvent().getName()+" - Target:"+t.getNextState().getName());
  	module.setTransitionPart(genTransition(sm , stateVar));
  	return module;
  }
  
  public String lookUpStateDetail(EnumerationStatement stateVariables, String str)
  {
  	for(EnumerationElement e : stateVariables.getEnumerationElements())
  	{
  		if(e.getValue().contains("_"+str))
  			return e.getValue();
  	}
  	return null;
  }
  
  
  public NuSMVModule genParentModule(StateMachine sm, String pHolder, EnumerationStatement svar)
  {
  	String name = changeNameCase(sm.getFullName());
  	NuSMVModule module = new NuSMVModule(changeNameCase(sm.getFullName()),"");
  	
  	//This makes a copy of a thin-line module in the state machine
  	VarDeclarationStatement varDec = new VarDeclarationStatement(
  			"VAR", pHolder, "handle");
  	module.setDeclarationPart(new DeclarationPart("VAR", varDec));
  	module.setAssignPart(generateAssign(sm));
  	module.setTransitionPart(genTransition(sm,svar));
  	
  	/*ArrayDeque<String> str = genListOfStateMachineNames(sm);
  	while(str.size() > 0){
  		System.out.println(str.size()+ " " +str.remove());
  		//System.out
  		System.out.println("----------------------");
  	}*/
  	
  	return module;
  }
  
  //public TransitionPart genTransPart()
  
space <<!

!>>
  output <<!-- This file is generated from <<=model.getUmpleFile().getFileName()>> --!>>
  emit commentModel(UmpleModel model)(output,space); 
 
  public DeclarationPart generateVariables(StateMachine sm)
  {
  	EnumerationElement temp = new EnumerationElement("");
  	EnumerationStatement decTransition = new EnumerationStatement("event", temp);
  		
  	//Creates events (transitions) list
  	for(Event e : sm.getAllEvents())
  	{
  		EnumerationElement transitionElement = new EnumerationElement(e.getName());
  		//if(e.getName().contains("__autotransition"))
  		  //continue;
  		decTransition.addEnumerationElement(transitionElement);
  	}
  	decTransition.removeEnumerationElement(temp);
  	DeclarationPart dPart = new DeclarationPart("", genStateVariables(sm), decTransition);
  	return dPart;
  }
  
  public EnumerationStatement genStateVariables(StateMachine sm)
  {
  	EnumerationElement temp = new EnumerationElement("");
  	EnumerationStatement decState = new EnumerationStatement("state",temp);
  	//EnumerationStatement decTransition = new EnumerationStatement("event",temp);
  	EnumerationStatement decState2 = new EnumerationStatement("state",temp);
  	//Creates states list  			
  	for(State st : sm.getStates())
  	{
  		EnumerationElement stateElement = new EnumerationElement(sm.getName()+"_"+st.getName());
  		decState.addEnumerationElement(stateElement);
  		if(st.hasNestedStateMachines())
  		{
  			for(StateMachine nsm : st.getNestedStateMachines())
  				decState2 = genStateVariables(nsm);
  				
  			for(EnumerationElement de : decState2.getEnumerationElements())
  				decState.addEnumerationElement(de);
  		}	
  	}
  	decState.removeEnumerationElement(temp);
  	return decState;
  }
  
  public EnumerationStatement genStateManager(StateMachine sm)
  {
  	EnumerationElement temp = new EnumerationElement(sm.getFullName());
  	EnumerationStatement decState = new EnumerationStatement("sm_manager",temp);
  	//EnumerationStatement decTransition = new EnumerationStatement("event",temp);
  	EnumerationStatement decState2 = new EnumerationStatement("sm_manager",temp);
  	//Creates states list  			
  	for(State st : sm.getStates())
  	{
  		EnumerationElement smElement = new EnumerationElement(sm.getFullName());
  		decState.addEnumerationElement(smElement);
  		if(st.hasNestedStateMachines())
  		{
  			for(StateMachine nsm : st.getNestedStateMachines())
  				decState2 = genStateVariables(nsm);
  				
  			for(EnumerationElement de : decState2.getEnumerationElements())
  				decState.addEnumerationElement(de);
  		}	
  	}
  	decState.removeEnumerationElement(temp);
  	return decState;
  }
  	
  public AssignPart generateAssign(StateMachine sm)
  {
  	AssignPart apart = new AssignPart("",sm.getName()+"_"+sm.getStartState().getName());	
  		return apart;
  }
  
  private ArrayDeque<String> genListOfStateMachineNames(StateMachine sm) {
  	ArrayDeque<String> temp = new ArrayDeque<String>();
  	temp.add(sm.getName());
  	
  	for(State st : sm.getStates())
  	{
  		if(st.hasNestedStateMachines())
  		{
  			ArrayDeque<String> temp1 = new ArrayDeque<String>();
  			for(StateMachine smm : st.getNestedStateMachines()){  				
  				temp1.add(smm.getName());
  				int i = 0;
  				ArrayDeque<String> temp2 = new ArrayDeque<String>();
  				for(State stt : smm.getStates()){
  					if(stt.hasNestedStateMachines() && i < stt.getNestedStateMachines().size()){
  						temp2 = genListOfStateMachineNames(stt.getNestedStateMachine(i));
  							i++;
  					}
  				}
  				temp1.add(temp2.remove());
  			}
  			while(temp1.size() > 0)
  				temp.add(temp1.remove());
  		}
  	}
  	
  	return temp;
  }
  
  private boolean has(List<String> str, String find)
  {
  	boolean yes = false;
  	for(String st : str)
  	{
  		if(st.equals(find))
  		{
  			yes = true;
  			break;
  		}
  	}
  	return yes;
  }
  
  private boolean has(List<Transition> str, Transition find)
  {
  	boolean yes = false;
  	for(Transition st : str)
  	{
  		if(st.equals(find))
  		{
  			yes = true;
  			break;
  		}
  	}
  	return yes;
  }
  
  private List<String> getFinalStates(StateMachine sm)
  {
  	List<String> temp = new ArrayList<String>(); 
  	for(State st : sm.getStates())
  	{
  		if(st.getTransitions().size() == 0 && has(temp,st.getName()) == false) {
  			temp.add(st.getName());
  		}
  	}
  	return temp;
  }
  
  private List<Transition> hasAutoTransitions(StateMachine sm)
  {
  	List<Transition> trList = new ArrayList<Transition>();
  	for(State st : sm.getStates())
  	{
  		for(Transition tr : st.getTransitions())
  		{
  			if(tr.getEvent().getName().contains("__autotransition") && ! has(trList,tr))
  				trList.add(tr);
  		}
  	}
  	return trList;
  }
  	
  public TransitionPart genTransition(StateMachine sm, EnumerationStatement stateVariables)
  {
  	TransitionPart tpart = new TransitionPart("TRANS");
    SimpleTransition temp = new SimpleTransition("","","");
  	SimpleTransition temp1 = new SimpleTransition("","","");
  	
  	boolean hasAutoTransition = hasAutoTransitions(sm).size() > 0;
  	boolean hasNestedMachine = false;
  	for(State st : sm.getStates())
  	{
  		if(st.hasNestedStateMachines())
  			hasNestedMachine = true;
  		if(st.numberOfTransitions() > 1)
  		{
  			ComplexTransition ctrans = new ComplexTransition("","","",temp1,temp);
  			for(Transition tr : st.getTransitions())
  			{
  			    
  				SimpleTransition smt = new 
  				SimpleTransition( lookUpStateDetail(stateVariables,tr.getFromState().getName()), 
  					lookUpStateDetail(stateVariables,tr.getNextState().getName()),	tr.getEvent().getName()	);
  					ctrans.addSimpleTransition(smt);
  				
  				/*if(hasAutoTransition)
  			    	for(Transition transition : hasAutoTransitions(sm)) {
  			    		SimpleTransition smtt = new 
  							SimpleTransition( transition.getFromState().getName(), transition.getNextState().getName(),	
  							transition.getEvent().getName()	);
  								ctrans.addSimpleTransition(smtt);
  			    	}*/	
  			}
  			ctrans.removeSimpleTransition(temp);
  			ctrans.removeSimpleTransition(temp1);
  			tpart.addComplexTransition(ctrans);	
  		}
  		int i = 0;
  		if(st.numberOfTransitions() == 1)
  		{
  			Transition trb = st.getTransition(0);
  			SimpleTransition strans = new SimpleTransition(	lookUpStateDetail(stateVariables,trb.getFromState().getName()), 
  					lookUpStateDetail(stateVariables,trb.getNextState().getName()), trb.getEvent().getName() );
  			tpart.addSimpleTransition(strans);
  			
  			/*if(hasAutoTransition) {
  				Transition tran = st.getTransition(0);
  				SimpleTransition smt = new SimpleTransition(tran.getFromState().getName(), tran.getNextState().getName(), tran.getEvent().getName() );
  					tpart.addSimpleTransition(smt);
  				
  				ComplexTransition ctrans = new ComplexTransition("","","",temp1,smt);
  				for(Transition tra : hasAutoTransitions(sm)) {
  			    		SimpleTransition smtt = new 
  							SimpleTransition( tra.getFromState().getName(), tra.getNextState().getName(),	
  							tra.getEvent().getName()	);
  							ctrans.addSimpleTransition(smtt);
  			    }
  				ctrans.removeSimpleTransition(temp1);
  				tpart.addComplexTransition(ctrans);	
  		 	}*/
  		}
  	}
  	
  	if(getFinalStates(sm).size() != 0) {
  		for(String str : getFinalStates(sm))
  		{
  			if(hasNestedMachine || sm.hasParentState())
  			{
  				SimpleTransition stran = new SimpleTransition(lookUpStateDetail(stateVariables,str),"handle.state","");
  				tpart.addSimpleTransition(stran);
  			}
  			else {
  				SimpleTransition stran = new SimpleTransition(lookUpStateDetail(stateVariables,str),"state","");
  				tpart.addSimpleTransition(stran);
  			}
  		}
  	}
  	return tpart;
  }
}

//public List<TransitionPart> 