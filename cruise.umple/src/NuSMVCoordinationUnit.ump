namespace cruise.umple.nusmv;

use NuSMVMetamodel.ump;

class NuSMVCoordinator
{
  depend cruise.umple.compiler.*;
  depend java.util.*;

	space <<!

!>>
  output <<!-- This file is generated from <<=model.getUmpleFile().getFileName()>> --!>>
  emit commentModel(UmpleModel model)(output,space); 
  
  	/**
  * This changes the first caharacter of a given string.
  * @param str the given string.
  * @param index value 0 - Lowercase, 1 - Uppercase, Otherwise no change
  * @return the resulting string value.
  */
  public String changeNameCase(String str , int index) {
    	char[] stringArray = str.trim().toCharArray();
    	if(index == 1)
    		stringArray[0] = Character.toUpperCase(stringArray[0]);
    	if(index == 0)
    		stringArray[0] = Character.toLowerCase(stringArray[0]);
    	str = new String(stringArray);
    	return str;
  	}
  	
  	public boolean isNested(StateMachine sm) {
  		boolean yes = false;
  		for(State st : sm.getStates()) 
  			if(st.numberOfNestedStateMachines() > 0) {
  				yes = true;
  				break;
  			}
  		return yes;
  	}
  	
  	public StringBuilder generateSystem( List<NuSMVModule> modules ) {
  		StringBuilder temp = new StringBuilder();
  		for( NuSMVModule mod : modules )
  			temp.append(mod.toString()+"\n");
  		return temp;
  	}
  	  	
  	private NuSMVModule generateParentModule( StateMachine sm, UmpleClass uClass ) {
  		VariableSpecifier xxx = getEventList( sm );
  		
  		ModuleBody body = new ModuleBody( new IVarDeclaration( xxx ) );
		VarDeclaration vdec = new VarDeclaration( getStateList( sm ) );
		for( VariableSpecifier vs : generateSpecifiersForAttributesOf( uClass ) )
			vdec.addVariableSpecifier(vs);
		
  		body.addModuleElement( vdec );
  		//Adding define declaration to module body
  		body.addModuleElement( getDefineDeclaration(sm) );
  		body.addModuleElement( getAssignConstraint( sm, sm) );
		
		//Adding assign constraints for all the attributes
		for( AssignConstraint constraint : getAssignConstraint( uClass ))
			body.addModuleElement( constraint );
		
  		NuSMVModule module = new NuSMVModule( changeNameCase( sm.getFullName(), 1 ), body );
  		generateParameters( module, sm, sm ); 
  		return module;
  	}
  	
	private <E> boolean has( List<E> objectList, E whatToFind ) {
  		boolean yes = false;
  		for(E st : objectList) {
  			if( st.equals(whatToFind) ) {
  				yes = true;
  				break;
  			}
  		}
  		return yes;
	}
  	
  	private void generateParameters( NuSMVModule module, StateMachine parent, StateMachine sm ) {
  		List<StateMachine> smList = generateStateMachineList( parent );
  		for(StateMachine stm : smList) 
			if( !stm.getFullName().equals(sm.getFullName()) ) 
				module.addParameter( "_"+changeNameCase(stm.getFullName(), 0) );	
  	}
  	
	private VariableSpecifier generateVariableSpecifierForMain( StateMachine sm, StateMachine root ) {
		String identifier = changeNameCase( sm.getFullName(), 0);
		List<StateMachine> smList = generateStateMachineList( root );
		VariableSpecifier vs = new VariableSpecifier(identifier);
  		for(StateMachine stm : smList )
			if( !stm.getFullName().equals(sm.getFullName()) )
				vs.addTypeSpecifier(changeNameCase( stm.getFullName(), 0 ) ); 
		vs.setIsBracketed(true);
		vs.setTypeName( changeNameCase(sm.getFullName(), 1) );
		return vs;
	}
	
  	private List<StateMachine> generateStateMachineList( StateMachine sm ) {
		List<StateMachine> temp = new ArrayList<StateMachine>();
		temp.add(sm);
		for(State st : sm.getStates())
			if(st.hasNestedStateMachines()) {
				if(!has(temp, st.getStateMachine()))
					temp.add(st.getStateMachine());
				for(StateMachine stm : st.getNestedStateMachines()) {
					for(StateMachine stt : generateStateMachineList(stm))
						temp.add(stt);
				}
			}
		return temp;				
	}
	
	private List<State> getCompositeStates(StateMachine sm) {
		List<State> temp = new ArrayList<State>();
		for(State st : sm.getStates())
			if(st.hasNestedStateMachines())
				temp.add(st);
		return temp;				
	}
	
	private List<NuSMVModule> generateModuleForCompositeStatesOf( StateMachine root, StateMachine parent ) {
		List<NuSMVModule> nestedMachines = new ArrayList<NuSMVModule>();
  		for( State st :  getCompositeStates(parent) ) {
  			for( StateMachine stm : st.getNestedStateMachines() ) {
  				NuSMVModule module = generateModuleForSubstate(stm, root);
  				generateParameters( module, root, stm ); 
				nestedMachines.add( module );
  				if( isNested( stm ) )
  					for( NuSMVModule innerModule : generateModuleForCompositeStatesOf( root, stm ) )
						nestedMachines.add( innerModule );
  			}
  		}
		return nestedMachines;
	}
  	
  	public List<NuSMVModule> generateModuleForNestedStateMachine( StateMachine sm, UmpleClass uClass ) {
  		List<NuSMVModule> temp = new ArrayList<NuSMVModule>();
  		//Generates the parent state machine  		
  		NuSMVModule module = generateParentModule( sm, uClass );
  		temp.add(module);
  		StateMachine root = sm;
  		for( NuSMVModule mod : generateModuleForCompositeStatesOf( root, sm ) )
  			temp.add( mod );
			
		//Generating the main module for the statemachine
  		ModuleBody body = new ModuleBody(genMainVariableFor( sm ));
		for( StateMachine smm : generateStateMachineList( sm ) )
			generateSpecForStateReachability( smm, body );
		
		NuSMVModule mainmodule = new NuSMVModule("main", body);	
		temp.add(mainmodule);
  		return temp;
  	}
  	
  	//This generates modules generated from a simple state machine including its main
  	public List<NuSMVModule> generateModuleForSimpleStateMachine( StateMachine sm, UmpleClass uClass ) {
  
  		List<NuSMVModule> temp = new ArrayList<NuSMVModule>();
  		//Generating and setting the parent module
  		temp.add( generateParentModule(sm, uClass) );
  		
  		//Generating the main module for the statemachine
  		ModuleBody body = new ModuleBody(genMainVariableFor( sm ));
  		NuSMVModule module = new NuSMVModule("main", body);	
  		generateSpecForStateReachability( sm, body ); 
  		temp.add( module );
  		return temp;
  	}
  	
  	//This generates a module for a substate given the state machine of the state and the root state machine
  	public NuSMVModule generateModuleForSubstate( StateMachine sm, StateMachine root ) {
  		ModuleBody body = new ModuleBody( new VarDeclaration(getStateList(sm)) );
  		//Adding define declaration to module body
  		body.addModuleElement( getAssignConstraint( sm, root) );
  		NuSMVModule module = new NuSMVModule( changeNameCase(sm.getFullName(),1), body );	
  		return module;
  	}
  	
  	private int getObjectIdentity( StateMachine sm, Object obj) {
  		int pos = 1;
		if( obj instanceof Transition )
			for(Transition trans : sm.getAllTransitions() ) {
				if(trans.equals( (Transition) obj) )
					return pos;
				pos++;
			}
		if( obj instanceof Guard ) {
			pos = 1;
			for(Guard guard : getAllGuards( sm ) ) {
				if(guard.equals(( Guard ) obj ))
					return pos;
				pos++;
			}
		}
  		return -1;
  	}
	
	/*private int getGuardIdentity( StateMachine sm, Guard gr) {
  		int pos = 1;
  		for(Guard guard : getAllGuards( sm ) ) {
  			if(guard.equals(gr))
  				return pos;
  			pos++;
  		}
  		return -1;
  	}*/
  	
  	private void generateSpecForStateReachability( StateMachine sm, ModuleBody body ) {
  		
  		for( State st : sm.getStates() ) {
  			BasicExpression bexp1 = new BasicExpression(changeNameCase(sm.getFullName(), 0)+".state");
    		BasicExpression bexp2 = new BasicExpression(changeNameCase(st.getStateMachine().getFullName(),1)+"_"+st.getName());
    		CTLExpression cexp = new CTLExpression("ctl");
    		cexp.addChild(bexp1);
    		cexp.addChild(bexp2);
    		cexp.setOperator(BasicExpression.Operator.EQ);
    		cexp.setBracketed(true);
    		cexp.setQualified(true);
    		cexp.setCtlOperator(CTLExpression.CtlOperator.EF);
    		CTLSpecification cspec = new CTLSpecification(cexp);
    		body.addModuleElement(cspec);
    	}
  	}
  	
  	private AssignConstraint getAssignConstraint( StateMachine sm, StateMachine root) {
  		BasicExpression bexp;
  		if( sm.getParentState() == null )
  			bexp = new BasicExpression(changeNameCase(sm.getFullName(),1)+"_"+sm.getStartState().getName());
  		else
  			bexp = new BasicExpression("null");
  		InitAssign ia = new InitAssign("state", bexp);
  		AssignConstraint ac = new AssignConstraint(ia);
  		ac.addAssign(getNextAssign( sm, root ));
  		return ac;
  	}
	
	private List<AssignConstraint> getAssignConstraint( UmpleClass uClass ) {
		List<AssignConstraint> constraints = new ArrayList<AssignConstraint>();
		
		for( Attribute attribute : uClass.getAllAttributes() ) {
			BasicExpression bexp = new BasicExpression("");
			
			if( attribute.getValue() != null ){
				String value = attribute.getValue();
				switch( value ){
					case "true" : bexp = new BasicExpression("TRUE"); break;
					case "false" : bexp = new BasicExpression("FALSE"); break;
					default : bexp = new BasicExpression(value);
				}
			}
			else if( attribute.getValue() == null && (attribute.getType().equals("Boolean") || attribute.getType().equals("boolean")))
				bexp = new BasicExpression("FALSE");
			else if( attribute.getValue() == null && (attribute.getType().equals("Integer") || attribute.getType().equals("int")))
				bexp = new BasicExpression("0");
			else if( attribute.getValue() == null && (attribute.getType().equals("Float") || attribute.getType().equals("float")))
				bexp = new BasicExpression("0.0");
			
			InitAssign initialVal = new InitAssign(attribute.getName(), bexp);
			AssignConstraint assignConstraint = new AssignConstraint( initialVal );
			constraints.add( assignConstraint );
		}
  		return constraints;
  	}
	
	private CaseStatement initializeCompositeStartState( State state ) {
		
		BasicExpression bexp3 = new BasicExpression( "expr" );
		
		if( state.isIsStartState() && state.getStateMachine().getParentState() != null ) {
			State bioparent = state.getStateMachine().getParentState();
  			BasicExpression bexp1 = new BasicExpression("_"+changeNameCase(bioparent.getStateMachine().getFullName(), 0)+".state");
  			BasicExpression bexp2 = new BasicExpression(changeNameCase(bioparent.getStateMachine().getFullName(),1)+"_"+bioparent.getName());
			bexp3.addChild( bexp1 );
  			bexp3.addChild( bexp2 );
  			bexp3.setOperator( BasicExpression.Operator.EQ );
			BasicExpression st = new BasicExpression( changeNameCase(state.getStateMachine().getFullName(),1)+"_"+state.getName() ); 
			return new CaseStatement( bexp3, st );
  		}
		return null;		
	}
  	
  	private NextAssign getNextAssign( StateMachine sm, StateMachine root ) {
  		BasicExpression bexp1 = new BasicExpression("state");
    	BasicExpression bexp2 = new BasicExpression("TRUE");
    	CaseStatement temp = new CaseStatement(bexp2, bexp1);
    	CaseExpression expr = new CaseExpression("",temp);
    	for(State st : sm.getStates() ) {
    		CaseStatement cstatement = getCaseStatement(sm, st, root);
    		if( cstatement != null)
    			expr.addCaseStatement(cstatement);
    	}
		if( sm.getParentState() != null && getCaseStatementForNullState(sm.getParentState(), root) != null )
			expr.addCaseStatement( getCaseStatementForNullState(sm.getParentState(), root) );
		
		//Initializing composite start states
		for(State st : sm.getStates() )
			if( initializeCompositeStartState( st ) != null )
				expr.addCaseStatement( initializeCompositeStartState( st ) );
			
		CaseStatement otherwise = new CaseStatement(bexp2, bexp1);
    	expr.addCaseStatement( otherwise );
    	expr.removeCaseStatement(temp);
		
    	NextAssign na = new NextAssign("state", expr);
    	return na;
  	}
		
	//Harvesting transitions for any given orthogonal state or region
	public List<Transition> getAllTransitionsForOrthogonalState( State st ) {
		List<Transition> results = new ArrayList<Transition>();
		if( !st.isIsConcurrent() )
			for( StateMachine sm : st.getNestedStateMachines() ) 
				for( Transition trans : getAllTransitions( sm ) )
					results.add( trans );
		return results;
	}
	
	//Harvesting transitions for a state machine
	//Also generates a list of next transitions for a state and its substates (where possible).
  	//That is transition that enables or activates a state
	private List<Transition> getAllTransitions( Object obj ) {
		List<Transition> results = new ArrayList<Transition>();
		if( obj instanceof StateMachine ){
			
			for( State st : ( (StateMachine) obj).getStates() ) {
				for( Transition trans : st.getNextTransition() )
					results.add( trans );
					if( st.hasNestedStateMachines() )
						for( StateMachine smm : st.getNestedStateMachines() )
							for( Transition transition : getAllTransitions( smm ) )
								results.add( transition );
			}
		}
		else if( obj instanceof State ){
			if( !((State) obj).hasNestedStateMachines() ) {
				return ((State) obj).getNextTransition();
			}
			else {
				for( Transition tr : ((State) obj).getNextTransition() )
					results.add(tr);
		
				for( StateMachine smm : ((State) obj).getNestedStateMachines() )
					for( Transition transition : getAllTransitions( smm ) )
						results.add( transition );
			}
		}
		return results;
	}
	
	public void printList( List<Transition> input, StateMachine root ) {
		String results = "";
		for( Transition element : input )
			results += getObjectIdentity( root, element ) +" ";
		System.out.println( results );
	}
  	
  	//Generates a list of next transitions for a state and its substates (where possible).
  	//That is transition that enables or activates a state
  	/*private List<Transition> getAllTransitions( State st ) {
		if( !st.hasNestedStateMachines() ) {
			return st.getNextTransition();
		}
		else {	
			List<Transition> allTransitions = new ArrayList<Transition>();
			for( Transition tr : st.getNextTransition() )
				allTransitions.add(tr);
		
			for( StateMachine sm : st.getNestedStateMachines() )
				for( Transition transition : getAllTransitions( sm ) )
					allTransitions.add( transition );
		    return allTransitions;
		}
  	}*/
	
	private CaseStatement getCaseStatementForNullState( State st, StateMachine root ) {
	
		List<Transition> trans = getAllTransitions(st);
		if( st.hasNestedStateMachines() )
			for( Transition transition : st.getNextTransition() )
				trans.remove( transition );
			
		int counter = 0;
		BasicExpression rt = new BasicExpression("root");
		for( Transition tr : root.getAllTransitions() ) {
			BasicExpression bexp;
			if( !has( trans, tr ) ) {
				bexp = new BasicExpression("_"+changeNameCase(root.getFullName(),0)+".t"+getObjectIdentity( root, tr) );	
				rt = getExpressionTreeFor( rt, bexp );
				counter++;
			}
		}
		if(counter > 0) {
  			BasicExpression state = new BasicExpression( "null" ); 
  			return new CaseStatement( rt, state );
  		}
  		return null;
	}
  	
  	private CaseStatement getCaseStatement( StateMachine sm, State st, StateMachine parent ) {
  		int counter = 0;
  		BasicExpression root = new BasicExpression("root");
  		for( Transition tr : getAllTransitions(st) ) {
			BasicExpression bexp;
			if(!parent.equals(sm))
				bexp = new BasicExpression("_"+changeNameCase(parent.getFullName(),0)+".t"+getObjectIdentity( parent, tr) );	
			else	
				bexp = new BasicExpression("t"+getObjectIdentity( parent, tr) );
  			root = getExpressionTreeFor( root, bexp );	
  			counter++;
  		}
  		/*if( st.isIsStartState() && st.getStateMachine().getParentState() != null ) {
  			State bioparent = st.getStateMachine().getParentState();
  			BasicExpression bexp1 = new BasicExpression("_"+changeNameCase(bioparent.getStateMachine().getFullName(), 0)+".state");
  			BasicExpression bexp2 = new BasicExpression(changeNameCase(tr.getFromState().getStateMachine().getFullName(),1)+"_"+bioparent.getName());
  			BasicExpression bexp3 = new BasicExpression("expr");
  			bexp3.addChild(bexp1);
  			bexp3.addChild(bexp2);
  			bexp3.setOperator( bexp1.getOperator().EQ );
  			if(root.getChildren().size() == 0)
  				root = bexp3;
  			else
  				root = getExpressionTreeFor( root, bexp3 );
  			counter++;
  		}*/  			
  		if(counter > 0) {
  			BasicExpression state = new BasicExpression( changeNameCase(st.getStateMachine().getFullName(),1)+"_"+st.getName() ); 
  			return new CaseStatement( root, state );
  		}
  		return null;
  	}
  	
  	//This adds expression to activate a composite start state
  	public Stack<State> ancestorStack( State st ) {
		if(st.getStateMachine().getParentState() == null)
			return null;
		Stack<State> ancestors = new Stack<State>();
		ancestors.push(st);
		State parent = st.getStateMachine().getParentState();
		while( parent != null && parent.isIsStartState() ) {
			ancestors.push(parent);
			parent = parent.getStateMachine().getParentState();
		}
		return ancestors;		
	}
  	
  	private BasicExpression getExpressionTreeFor( BasicExpression root, BasicExpression bexp ) {
  		if( root.getChildren().size() < 2) {
  			root.addChild(bexp); 
  			root.setOperator(BasicExpression.Operator.OR);
  		}
  		else {
  			BasicExpression temp = new BasicExpression(root.getChildren().get(0).getIdentifier());
  			temp.addChild(root.getChildren().get(0));
  			temp.addChild(bexp);
  			temp.setOperator(BasicExpression.Operator.OR);
  			root.addChild(temp);
  		}
  		return root;
  	}
  	
  	private VarDeclaration genMainVariableFor( StateMachine sm ) {
  		VariableSpecifier vs = new VariableSpecifier(changeNameCase(sm.getFullName(), 0));	
  		vs.addTypeSpecifier( changeNameCase(sm.getFullName(), 1));
  		VarDeclaration vdec = new VarDeclaration(vs); 
  		if(!isNested(sm)) 
  			return vdec;
		List<StateMachine> smList = generateStateMachineList( sm );	
  		for( StateMachine smm : smList ) {
  			VariableSpecifier vss = generateVariableSpecifierForMain( smm, sm );
  			vdec.addVariableSpecifier(vss);
  		}
		vdec.removeVariableSpecifier( vs );
  		return vdec;
  	}
  	
  	//Generates event enumeration for a given state machine
  	private  VariableSpecifier getEventList( StateMachine sm ) {
  		VariableSpecifier vs = new VariableSpecifier("event");
  		for( Event event : sm.getAllEvents() ) 
  			vs.addTypeSpecifier("ev_"+event.getName());
  		if( sm.getAllEvents().size() == 1 )
  			vs.addTypeSpecifier("ev_null");
  		return vs;
  	}
  	
  	//Generates state enumeration for a given state machine
  	private VariableSpecifier getStateList(StateMachine sm) {
  		VariableSpecifier vs = new VariableSpecifier("state");
  		for(State st : sm.getStates())
  			vs.addTypeSpecifier(changeNameCase(st.getStateMachine().getFullName(),1)+"_"+st.getName());
  		if(sm.getParentState() != null || sm.getStates().size() == 1)
  			vs.addTypeSpecifier("null");
  		return vs;
  	}
	
	private List<VariableSpecifier> generateSpecifiersForAttributesOf( UmpleClass uClass ){
		List<VariableSpecifier> attributes = new ArrayList<VariableSpecifier>();
		
		for( Attribute attribute : uClass.getAllAttributes() ){
			VariableSpecifier vs = new VariableSpecifier( attribute.getName() );
			String type = attribute.getFullType();
			//System.out.println( attribute.getValue() );
			switch( type ){
				case "Float" : vs.addTypeSpecifier("real"); attributes.add( vs ); break; 
				case "Boolean" : vs.addTypeSpecifier("boolean"); attributes.add( vs ); break;
				case "Integer" : vs.addTypeSpecifier("integer"); attributes.add( vs ); break;
				default : ;
			}
		}
		return attributes;
	}
  		
  	//Generates the define part for all the transitions of the system
  	private DefineDeclaration getDefineDeclaration( StateMachine sm ) {
  		BasicExpression temp = new BasicExpression("null");
  		DefineBody dnull = new DefineBody("null", temp);
  		DefineDeclaration ddec = new DefineDeclaration(dnull);
  		for( Transition tr : sm.getAllTransitions() ) {
  			BasicExpression bexp = composeExpressionFor( tr, sm );
  			DefineBody dBody = new DefineBody("t"+getObjectIdentity( sm, tr) , bexp);
  			ddec.addDefineBody(dBody);
  		}
		for( Guard gr : getAllGuards(sm) ) {
  			DefineBody dBody = new DefineBody("g"+getObjectIdentity( sm, gr) , generateRHS( gr ));
  			ddec.addDefineBody(dBody);
  		}
  		ddec.removeDefineBody(dnull);
  		return ddec;
  	}
  	
  	private BasicExpression composeExpressionFor( Transition tr, StateMachine sm ) {
  		BasicExpression bexp1 = new BasicExpression("event");
  		BasicExpression bexp2 = new BasicExpression("ev_"+tr.getEvent().getName());
  		BasicExpression bexp3 = new BasicExpression("eventExpr"); 
  		bexp3.addChild(bexp1);
  		bexp3.addChild(bexp2);
  		bexp3.setOperator(BasicExpression.Operator.EQ);
  		
  		BasicExpression bexp4 = generateRHS(tr.getFromState());
  		BasicExpression bexp5 = new BasicExpression(changeNameCase(tr.getFromState().getStateMachine().getFullName(),1)+"_"+tr.getFromState().getName());
  		BasicExpression bexp6 = new BasicExpression("stateExpr");
  		bexp6.addChild(bexp4);
  		bexp6.addChild(bexp5);
  		bexp6.setOperator(BasicExpression.Operator.EQ); 
  			
  		BasicExpression bexp = new BasicExpression("state");
  		bexp.addChild(bexp3);
  		bexp.addChild(bexp6);
		
		BasicExpression fBexp = new BasicExpression("fExp");
		fBexp.setOperator( BasicExpression.Operator.AND );
		if( tr.getGuard() != null ) {
			BasicExpression guard = new BasicExpression("g"+getObjectIdentity( sm, tr.getGuard()));
			fBexp.addChild(bexp);
			fBexp.addChild(guard);
			return fBexp;
		}
  		  		
  		return bexp;
  	}
  	
  	private BasicExpression generateRHS( Object obj ) {
  		BasicExpression bexp4 = null;
		if( obj instanceof State ) {
			State st = ( State ) obj;
			State state = st.getStateMachine().getParentState(); 
			if( state != null ) {
				StateMachine sm = st.getStateMachine();
				String name = changeNameCase("_" + sm.getFullName(), 0);
				bexp4 = new BasicExpression(name + ".state"); 
			}
			else 
				bexp4 = new BasicExpression("state");
		}
		if( obj instanceof Guard ) {
			Guard guard = ( Guard ) obj;
			bexp4 = new BasicExpression( getExpression( guard.getQueuedExpression() ) );
		}
  		return bexp4;
  	}
	
	//checks the input string and reports if it is an operator or not
	private boolean isOperator(String variable){
		switch( variable ){
			case "+" : return true;
			case "-" : return true;
			case "*" : return true;
			case "/" : return true;
			case "%" : return true;
			case "&&" : return true;
			case "||" : return true;
			case "==" : return true;
			case "!=" : return true;
			case ">=" : return true;
			case "<=" : return true;
			case "<" : return true;
			case ">" : return true;
			case ">>" : return true;
			case "<<" : return true;
			case "+=" : return true;
			case "-=" : return true;
			case "*=" : return true;
			case "%=" : return true;
			case "/=" : return true;
			case ">>=" : return true;
			case "<<=" : return true;
			default : return false;
		}		
	}
	
	public String getExpression( ArrayDeque<String> nodes ) {
		String temp = "", lastVariable = "";
		while( nodes.size() > 1) {
			String variable = nodes.poll();
			if( isOperator(variable) )
				temp += " "+ mapOperator( variable ) +" ";
			else	
				temp += variable;
			lastVariable = variable;
		}
		temp += mapOperator( nodes.poll() );
		return temp;	
	}
	
	private String mapOperator( String value ) {
		switch( value ) {
			case "&&" : return "&";
			case "||" : return "|";
			case "%" : return "mod";
			case "==" : return "=";
			//case "object==" : return "=";
			case "true" : return "TRUE";
			case "false" : return "FALSE";
			default : return value;
		}
	}
	
	private List<Guard> getAllGuards( StateMachine sm ) {
		List<Guard> allGuards = new ArrayList<Guard>();
		for( Transition transition : sm.getAllTransitions() ) {
			if( transition.getGuard() != null && !has(allGuards, transition.getGuard())) {
				Guard guard = transition.getGuard();
				allGuards.add( guard );
			}
		}
		return allGuards;
	}
  }