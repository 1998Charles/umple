/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This class provides helper methods of trace related code generation.

Please refer to GeneratorHelper_Code.ump for more details.

*/

namespace cruise.umple.compiler;

class GeneratorHelper
{
  
private static void postpareTrace(UmpleModel aModel)
  {}

  // Currently no internal trace entities to remove at the class level
  private static void postpareTrace(UmpleClass aClass)
  {}
  
  public static void prepareTraceDirectiveAttributeInject( TraceDirective traceDirective, CodeTranslator t, Attribute_TraceItem traceAttr, Attribute attr, String attrCode, String conditionType) 
  {
	  if( traceAttr.getTraceSet() == true && traceAttr.getTraceGet() == false )
		  prepareTraceDirectiveInject(traceDirective,t,attr,attrCode,conditionType,"setMethod");
	  else if( traceAttr.getTraceSet() == false && traceAttr.getTraceGet() == true )
		  prepareTraceDirectiveInject(traceDirective,t,attr,attrCode,conditionType,"getMethod");
	  else if( traceAttr.getTraceSet() == true && traceAttr.getTraceGet() == true )
	  {
		  prepareTraceDirectiveInject(traceDirective,t,attr,attrCode,conditionType,"setMethod");
		  prepareTraceDirectiveInject(traceDirective,t,attr,attrCode,conditionType,"getMethod");
	  }
  }
  
  public static void prepareTraceRecordAttributeInject( TraceDirective traceDirective, CodeTranslator t, Attribute attr, String attrCode, String conditionType) 
  {
	  prepareTraceDirectiveInject(traceDirective,t,attr,attrCode,conditionType,"setMethod");
  }
  
  // Assigns and prepares trace code injection before calling "injectTraceDirective"
  //  + setMethod: What is the name of the setMethod we are attaching the trace to
  //  + attrCode: What is the trace code that should be executed
  public static void prepareTraceDirectiveInject( TraceDirective traceDirective, CodeTranslator t, Attribute attr, String attrCode, String conditionType, String method) 
  {
	  Map<String,String> lookups = new HashMap<String,String>();
	  lookups.put("Code",attrCode);
	  if( method.equals("setMethod") )
		  lookups.put("setMethod",t.translate("setMethod",attr));
	  if( method.equals("getMethod") )
		  lookups.put("getMethod",t.translate("getMethod",attr));
	  String injectionType = "after";
	    
	  if( "where".equals(conditionType) )
		  injectionType = "before";  
	  else if( "until".equals(conditionType) || "after".equals(conditionType) )
		  injectionType = "after";
	  if( method.equals("setMethod") )
		  injectTraceDirective(traceDirective,lookups,injectionType,"setMethod");
	  if( method.equals("getMethod") )
		  injectTraceDirective(traceDirective,lookups,injectionType,"getMethod");
  }
  
  public static void prepareTraceDirectiveInjectStateMachine( TraceDirective traceDirective, CodeTranslator t, StateMachine stm, String stmCode, String injectionType) 
  {
	  Map<String,String> lookups = new HashMap<String,String>();
	  lookups.put("Code",stmCode);
	  lookups.put("setMethod",t.translate("setMethod",stm));
	  injectTraceDirective(traceDirective,lookups,injectionType,"setMethod");
  }
  
  public static void tmp( TraceDirective traceDirective, CodeTranslator t, StateMachine stm, String stmCode, String injectionType) 
  {
	  Map<String,String> lookups = new HashMap<String,String>();
	  lookups.put("Code",stmCode);
	  lookups.put("exitMethod",t.translate("exitMethod",stm));
	  tmp2(traceDirective,lookups,injectionType);
  }
  public static void tmp2(TraceDirective traceDirective, Map<String,String> lookups, String injectionType)
  {
    UmpleClass aClass = traceDirective.getUmpleClass();
    String setMethod = lookups.get("exitMethod");
    String code = lookups.get("Code");

    CodeInjection set = new CodeInjection(injectionType, setMethod, code);
    set.setIsInternal(true);
    aClass.addCodeInjection(set);  
  }
  // Inject the necessary "before" and "after" hooks to call the trace, this method expects the following action semantic lookups
  //  + setMethod: What is the name of the setMethod we are attaching the trace to
  //  + attributeCode: What is the trace code that should be executed
  public static void injectTraceDirective(TraceDirective traceDirective, Map<String,String> lookups, String injectionType, String method)
  {
    UmpleClass aClass = traceDirective.getUmpleClass();
    String Method = lookups.get(method);
    String code = lookups.get("Code");

    CodeInjection set = new CodeInjection(injectionType, Method, code);
    set.setIsInternal(true);
    aClass.addCodeInjection(set);  
  }

  // Add a StringTracer class to support "String" tracing - typically used for testing, this methods 
  // expects the following action semantic lookups
  //  + packageName: What package should this class belong to?
  //  + extraCode: What is the code required to execute the trace 
  public static void prepareStringTracer(UmpleModel model, Map<String,String> lookups)
  {
    UmpleClass aClass = model.addUmpleClass("StringTracer");
    
    if (aClass.numberOfAttributes() == 0)
    {
      aClass.setIsInternal(true);
      aClass.setIsSingleton(true); 
      aClass.setPackageName(lookups.get("packageName"));
      Attribute traces = new Attribute("traces","String",null,null,false);
      traces.setIsList(true);
      aClass.addAttribute(traces);
      aClass.appendExtraCode(lookups.get("extraCode"));
    }
    aClass.createGeneratedClass(model);
  }
}

