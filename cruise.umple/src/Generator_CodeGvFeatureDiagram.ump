/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This file generates .gv files for use by Graphviz, representing the feature diagram along in the Umple model. To generate for this format, use 
  generate GvFeatureDiagram;
in your umple file, or the command line option
  -g GvFeatureDiagram

*/

namespace cruise.umple.compiler;

class GvFeatureDiagramGenerator {
  depend cruise.umple.compiler.FeatureLink.FeatureConnectingOpType;
  UmpleModel model = null;
  // Template for what will appear at the start of each graph file
  graphStart(umpleVersion) <<! /*This code was generated using the UMPLE <<=umpleVersion>> modeling language! */
  
digraph FeatureModel { 
  node [shape=rectangle]  
  edge [arrowhead=none] 
!>>

  emit graphStart()(graphStart(UmpleModel.VERSION_NUMBER));
  
  public void generateFeatureNodeShape(FeatureLink featureLink , StringBuilder code)
  {
    FeatureNode featureNode = ((FeatureNode) featureLink.getTargetFeature(0));
    FeatureNode sourceFeatureNode = featureLink.getSourceFeature();
    int indentLevel = 2;
    appendSpaces(code,indentLevel);
    if(featureNode.getIsLeaf())
    {
      if(featureLink.getFeatureConnectingOpType().equals(FeatureConnectingOpType.Multiplicity))
      {
        MultiplicityFeatureConnectingOpType multiplicityFeatureLink = (MultiplicityFeatureConnectingOpType) featureLink;
        int upperBound = multiplicityFeatureLink.getMultiplicity().getUpperBound();
        int lowerBound = multiplicityFeatureLink.getMultiplicity().getLowerBound();        
        String minMax =""+lowerBound+".."+upperBound;
        code.append(sourceFeatureNode.getUniqueFeatureNodeName() + getGvMultiplicityShape(minMax));
        indentLevel+=2;
        List<FeatureNode> featureNodes = featureLink.getTargetFeature();
        for(int i=0 ; i < featureNodes.size(); i++){
          FeatureLeaf fLeaf = ((FeatureLeaf)featureNodes.get(i));
          appendSpaces(code,indentLevel);
          code.append(sourceFeatureNode.getUniqueFeatureNodeName() +" -> "+ fLeaf.getName()+" ;"+"\n");
        }
      }
      else 
      {// link source to leaf node 
        code.append(""+sourceFeatureNode.getUniqueFeatureNodeName()+" -> "+featureNode.getName()+" ");
        code.append(getGvTargetShape(featureLink.getFeatureConnectingOpType()));
        code.append(" ;"+"\n");    
      }
    }
    else //if the node is not leaf node 
    {
      code.append(getGvNodeShape(featureLink.getFeatureConnectingOpType(),featureNode.getUniqueFeatureNodeName()));
      appendSpaces(code,indentLevel);
      code.append(""+sourceFeatureNode.getUniqueFeatureNodeName()+" -> "+featureNode.getUniqueFeatureNodeName()+" ;"+"\n");
      List<FeatureLink> outgoingLinks = featureNode.getSourceFeatureLink();
      for(int i=0 ; i<outgoingLinks.size(); i++){
        generateFeatureNodeShape(outgoingLinks.get(i),code);
      }
    }
  }

  //This overrides the superclass's method.
  public void generate(){
    StringBuilder code = new StringBuilder();
    // Output basic gv file header
    if(getModel().getFeatureModel() == null)
    {
      code.append("/* Umple code does not have feature diagram. */");
      return;
    }
    _graphStart(0,code);
     // Iterate through each root feature. 
    for (FeatureNode featureNode : getModel().getFeatureModel().getRootFeatures())
    {
      List <FeatureLink> featureNodeOutLinks = featureNode.getSourceFeatureLink();
      for(FeatureLink flink : featureNodeOutLinks)
      {
        code.append("  "+featureNode.getUniqueFeatureNodeName()+" [label=\""+featureNode.getName()+" \" ]; \n");
        generateFeatureNodeShape(flink,code);
      }		    
    }

    terminateCode(code);
    // code.append(" \n } \n");
  }

  public static String getGvTargetShape(FeatureConnectingOpType featureConnectingOpType)
  { 
    switch(featureConnectingOpType)
    {
      case Exclude:
      return "["+"arrowhead=normal color=red constraint=false label=exclude "+"]";
      case Include:
      return "["+ "arrowhead=normal color=blue constraint=false label=include "+"]";
      case Optional:
      return "[arrowhead=odot]";
      case Conjunctive:
      return "[arrowhead=dot]";
      default:
      return "";
    }
  }

  public static String getGvMultiplicityShape(String minMax)
  {
    return "[label=\""+minMax + "\"]"+ ";"+"\n";
  }
  public static String getGvNodeShape(FeatureConnectingOpType featureConnectingOpType , String nodeName)
  { 
    String end = ";"+"\n";
    switch(featureConnectingOpType)
    {
      case Conjunctive:
      return nodeName+" [label=\" and \" ] "+end;
      case Disjunctive:
      return nodeName+" [label=\"\" shape=triangle fixedsize=true  color=black width=.3 height=0.3 margin=0 ] "+end;
      case XOR:
      return nodeName+" [label=\"\" shape=triangle fixedsize=true style=filled color=black width=.3 height=0.3 margin=0 ]"+end;
      case Multiplicity://
      //return nodeName+" [label=\"multiplicity\"]";
      return "\n";
      default:
      return nodeName +end;
    }
  }

  protected void terminateCode(StringBuilder code){ 
    code.append("\n }\n");
    model.setCode(code.toString());
    writeModel();
  }

  protected String generatorType() { 
    return "GvFeatureDiagram";
  }
  // copied from "Generator_SuperGvGenerator.ump"
  private void appendSpaces(StringBuilder code, int numSpaces) 
  {
    for(int i=0; i<numSpaces; i++) 
    {
      code.append(" ");
    }
  }

  /**
   * Output the graphviz file to a file with the .gv suffix
   */
  // copied from "Generator_SuperGvGenerator.ump"
   protected void writeModel(){
    try
    {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName()
          + generatorType() + ".gv";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException("There was a problem with generating GraphViz feature model code." + e, e);
    }
  }

}
