/*
 * This Umple file modify the following classes:
 * UmpleInternalParser,
 * Transition,
 * Guard
 */


namespace cruise.umple.compiler;

//************************************************************************************* 
//************************************NEW CLASS****************************************
//*************************************************************************************  
class UmpleInternalParser
{

//----------------------------------------------------------------------------  
//---------------------------------Start--------------------------------------
//----------------------------------------------------------------------------   
  private void copyStateMachinesFromTraiToClass(UmpleClass inClass) {
    Map<UmpleTrait, List<StateMachine>> traiStateMachine = new HashMap<UmpleTrait, List<StateMachine>>();
	Map<UmpleTrait, List<StateMachine>> tempTraiStateMachine = new HashMap<UmpleTrait, List<StateMachine>>();
	for (UmpleTrait uTrait : inClass.getExtendsTraits()) {
		tempTraiStateMachine = gatherStateMachinesFromTrait(uTrait,inClass.getGeneralTPAppliedByName(uTrait.getName()),inClass);
		CheckSMFromTraitIsNotAvaialbleInOtherTraits(traiStateMachine, tempTraiStateMachine, inClass);
		if ( ! getParseResult().getWasSuccess() ) return;
		if (!CheckSMFromTraitIsNotAvaialbleInClass(inClass,tempTraiStateMachine)) return;
		AddStateMachineMapToAnother(traiStateMachine,tempTraiStateMachine);
	}
	for (UmpleTrait t1 : traiStateMachine.keySet()) {
		for (StateMachine sMachine : traiStateMachine.get(t1)) {
			sMachine.setUmpleClass(inClass);
    		inClass.addStateMachine(sMachine);		
		}
	}
  }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
  private Map<UmpleTrait, List<StateMachine>> gatherStateMachinesFromTrait (UmpleTrait inTrait,GeneralTPApplied inGTPApplied, UmpleClass inClass) 
  {
    Map<UmpleTrait, List<StateMachine>> traiStateMachine = new HashMap<UmpleTrait, List<StateMachine>>(); 
  	Map<UmpleTrait, List<StateMachine>> tempTraiStateMachine = new HashMap<UmpleTrait, List<StateMachine>>();
  	//----------------------------------------------------------------------------------------
		checkValidityOfSMTemplateSignature(inGTPApplied,inTrait);
  	//----------------------------------------------------------------------------------------
  	List<StateMachine> lSMachine = new ArrayList<StateMachine>();	  
  	for (StateMachine sMachine : inTrait.getStateMachines()) {
  	 	StateMachine stTemp = ApplyTypeParametersToStateMachine(sMachine,inGTPApplied,inClass, inTrait);
  		if (stTemp!=null)	lSMachine.add(stTemp);
  	}
  	traiStateMachine.put(inTrait,lSMachine);
  	//----------------------------------------------------------------------------------------
  	for (UmpleTrait uTrait : inTrait.getExtendsTraits()) {
  		tempTraiStateMachine = gatherStateMachinesFromTrait(uTrait,inTrait.getGeneralTPAppliedByName(uTrait.getName()),inClass);	 
  		if ( ! getParseResult().getWasSuccess() ) return traiStateMachine;
  		if (!CheckSMFromTraitIsNotAvaialbleInOtherTraits(traiStateMachine,tempTraiStateMachine,inTrait)) return traiStateMachine;
  		AddStateMachineMapToAnother(traiStateMachine,tempTraiStateMachine);
  	}
  	return traiStateMachine;
  }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------  
  private void checkValidityOfSMTemplateSignature(GeneralTPApplied inGTPApplied, UmpleTrait inTrait) {
  	if (inGTPApplied!=null){
	  	for (StateMachineTemplateSignature smTSignature : inGTPApplied.getStateMachineTemplateSignatures()) {
	  		StateMachine sm = inTrait.getStateMachine(smTSignature.getStateMachine());
	 			if ( sm == null ){
	 				getParseResult().addErrorMessage(new ErrorMessage(230,inTrait.getPosition(0),inTrait.getName(),smTSignature.getStateMachine()));	
	 				return;
	 			} else {	 				
	 				for (String s : smTSignature.getStates()){
	 					State tState = sm.findState(s, false);
	 					if (tState==null){
	 		 				getParseResult().addErrorMessage(new ErrorMessage(230,inTrait.getPosition(0),inTrait.getName(),s));	
	 		 				return;
	 					} else{
	 						if(tState.hasNestedStateMachines()) sm = tState.getNestedStateMachine(0);
	 					}	
	 				}
	 			}
	  	}	 
  	}
	}
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------  

   private StateMachine ApplyTypeParametersToStateMachine(StateMachine inSMachine, GeneralTPApplied inGTPApplied, UmpleClass inClass, UmpleTrait inTrait){
    StateMachine newSt = getNewStateMachine(inSMachine);
    String track=null;
    String mapped=null;
    Map<String, String> nameMapping = new HashMap<String, String>();
//    Map<String, String> reversedNameMapping = new HashMap<String, String>();
  	 if (inGTPApplied!=null){
  		 for (StateMachineTemplateSignature smTSignature : inGTPApplied.getStateMachineTemplateSignatures()) {
  			 if (smTSignature.getModifier().equals("-")) return null;
  			 mapped = nameMapping.get(smTSignature.getStateMachine());
  			 if (mapped==null) mapped = smTSignature.getStateMachine();
  			 track = smTSignature.getStateMachine();
  			 if (newSt.getName().equals(mapped)){
  				 if (smTSignature.numberOfStates()<=0) {
  					 newSt.setName(smTSignature.getAlias());
  					 for (State s : newSt.getStates()) s.setStateMachine(newSt);
  					 nameMapping.put(track, smTSignature.getAlias());
//  					 reversedNameMapping.put(smTSignature.getAlias(), track);
  				 } 
  				 else{ 
  					 StateMachine smTemp = newSt;
  					 State tState=null;
  					 for (String s : smTSignature.getStates()){
  						 track = track+"."+s;
  						 mapped = nameMapping.get(track);
  						 if (mapped==null) mapped = s;
  						 tState = smTemp.findState(mapped, false);
		 					 if(tState.hasNestedStateMachines()){
		 						 smTemp = tState.getNestedStateMachine(0);
		 						 String str;
		 						 str="ddd";
		 					 }
  					 }
  					 if (smTemp!=null) {
  						 tState.setName(smTSignature.getAlias());	
  						 if (tState.hasNestedStateMachines()) {
  							 smTemp.setName(smTSignature.getAlias());
  							 String T;
  							 T="sdlflkn";
  						 }
  						 nameMapping.put(track, smTSignature.getAlias());
  					 }
  				 } 					
				}
			}
  	 }
  	 return newSt;
  }

  
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------  
   private boolean CheckSMFromTraitIsNotAvaialbleInClass(UmpleClass inClass, Map<UmpleTrait, List<StateMachine>> inTempTraiStateMachine){
    for (UmpleTrait uTrait : inTempTraiStateMachine.keySet()) {
		for (StateMachine tSMachine : inTempTraiStateMachine.get(uTrait)) {
			for(StateMachine cSMachine : inClass.getStateMachines()){
				if (compareStateMachineName(cSMachine, tSMachine)){
					getParseResult().addErrorMessage(new ErrorMessage(226,inClass.getPosition(0),tSMachine.getName(),uTrait.getName(),"class",inClass.getName()));
					return false;
				}else {
					if (cSMachine.getName().equals(tSMachine.getName())) addExtraStatesAnsTransitions(cSMachine, tSMachine);
				}
			}
		}
	}
	return true;
  }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private boolean CheckSMFromTraitIsNotAvaialbleInOtherTraits(Map<UmpleTrait, List<StateMachine>> inTraiStateMachine, Map<UmpleTrait, List<StateMachine>> inTempTraiStateMachine, UmpleClassifier inUmpleClassifier){
    for(UmpleTrait tUTrait : inTempTraiStateMachine.keySet()){
		for (StateMachine tSMachine : inTempTraiStateMachine.get(tUTrait)) {
			for(UmpleTrait uTrait : inTraiStateMachine.keySet()){
				for (StateMachine sMachine : inTraiStateMachine.get(uTrait)) {
					if (compareStateMachineName(sMachine, tSMachine)){
						if (inUmpleClassifier instanceof UmpleTrait){
							if (uTrait.equals(((UmpleTrait)inUmpleClassifier)) ){
								getParseResult().addErrorMessage(new ErrorMessage(226,inUmpleClassifier.getPosition(0),sMachine.getName(),tUTrait.getName(),"trait",inUmpleClassifier.getName()));
								return false;
							} 							
							else if(!tUTrait.equals(uTrait)) {
								getParseResult().addErrorMessage(new ErrorMessage(227,inUmpleClassifier.getPosition(0),sMachine.getName(),tUTrait.getName(),"trait",inUmpleClassifier.getName(),uTrait.getName()));
								return false;
							}															
						} else if(inUmpleClassifier instanceof UmpleClass){
							if(!tUTrait.equals(uTrait)){
								getParseResult().addErrorMessage(new ErrorMessage(227,inUmpleClassifier.getPosition(0),sMachine.getName(),tUTrait.getName(),"class",inUmpleClassifier.getName(),uTrait.getName()));
								return false;
							}
						}
					} else {
						if (sMachine.getName().equals(tSMachine.getName())) addExtraStatesAnsTransitions(sMachine, tSMachine);
					}	
				}
			}
		}
	}
	return true;
  }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
private void AddStateMachineMapToAnother(Map<UmpleTrait, List<StateMachine>> inTraitStateMachine,	Map<UmpleTrait, List<StateMachine>> inTempTraiStateMachine) {
    for (UmpleTrait uTrait : inTempTraiStateMachine.keySet()) {
		if (inTraitStateMachine.containsKey(uTrait)){
			inTraitStateMachine.get(uTrait).addAll(inTempTraiStateMachine.get(uTrait));
		} else{
			inTraitStateMachine.put(uTrait, inTempTraiStateMachine.get(uTrait));
		}	
	}
}
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
  private StateMachine getNewStateMachine(StateMachine sMachine) {
	StateMachine stNew = new StateMachine(sMachine.getName());
	 stNew.setPooled(sMachine.getPooled());
	 stNew.setQueued(sMachine.getQueued());
	 for (State element : sMachine.getStates()) {
	 	stNew.addState(element);
	 }
	return stNew;
 }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private boolean compareStateMachineName(StateMachine inSMachine1, StateMachine inSMachine2){
    if(inSMachine1.getName().equals(inSMachine2.getName()) && inSMachine1.numberOfStates()==inSMachine2.numberOfStates()){
	    	if (!inSMachine1.getStartState().getName().equals(inSMachine2.getStartState().getName())){
	    		UmpleClassifier uClassifier = inSMachine1.getUmpleClass();
	      	if (uClassifier==null) {
	      		uClassifier = inSMachine1.getUmpleTrait();
	      		getParseResult().addErrorMessage(new ErrorMessage(228,uClassifier.getPosition(0),inSMachine1.getName(),"tait", uClassifier.getName()));
	      	} else {
	      		getParseResult().addErrorMessage(new ErrorMessage(228,uClassifier.getPosition(0),inSMachine1.getName(),"class", uClassifier.getName()));
	      	}
	    	}
		  	return compareStatesAndTransitions(inSMachine1,inSMachine2);
		  	
		} else{
			return false;
		}
  }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
  private boolean compareStatesAndTransitions(StateMachine inSMachine1, StateMachine inSMachine2) {
	  for (State state : inSMachine2.getStates()) {
		  State mainState = inSMachine1.findState(state.getName());
		  if (mainState ==null){
			  return false;
		  }
		  for(Transition trans : state.getTransitions() ){
			  boolean find = false;
			  for(Transition mainlTrans : mainState.getTransitions() ){
				  if (trans.isEqualToTransition(mainlTrans)){ find = true; }
			  }
			  if(!find) return false;
		  }
	  }
	  return true;
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
  private void addExtraStatesAnsTransitions(StateMachine inSMachine1, StateMachine inSMachine2) {
    for (State state : inSMachine2.getStates()) {
		  State mainState = inSMachine1.findState(state.getName());
		  if (mainState==null){
			  inSMachine1.addState(state);
		  } else {
			  for (int i = 0; i < state.numberOfTransitions(); i++) {
				  boolean find = false;
				  for(Transition mainlTrans : mainState.getTransitions() ){
					  if (state.getTransition(i).isEqualToTransition(mainlTrans)){ find = true; }
				  }
				  if(!find) {		
				  	state.getTransition(i).setNextState(inSMachine1.findState(state.getTransition(i).getNextState().getName()));
					  mainState.addTransition(state.getTransition(i));
				  }
			  }
		  }

	  }
  }

//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------


//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------




//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------

}


//************************************************************************************* 
//************************************NEW CLASS****************************************
//*************************************************************************************  
class Transition{
  boolean isEqualToTransition(Transition inTransition){
  	if (inTransition.equals(null)) return false;
    if (!getEvent().equals(inTransition.getEvent())) return false;
    if (getAutoTransition()!=inTransition.getAutoTransition()) return false;
	  if (getEvent().numberOfParams() != inTransition.getEvent().numberOfParams()) return false;
	  for (int i = 0; i < inTransition.getEvent().numberOfParams(); i++) {
		  if (!getEvent().getParam(i).getType().equals(inTransition.getEvent().getParam(i).getType())) return false;
	  }
	  
	  if (getGuard()!=null){
		  if (!getGuard().isEqualToGuard(inTransition.getGuard())) return false; 
	  } else {
	  	if (inTransition.getGuard()!=null) 	return false;
	  }

	  if (getAction()!=null){
	  	//Please the following equals API is generated automatically.It must be checked always and make sure it's correct.
		  if (!getAction().equals(inTransition.getAction())) return false; 
	  } else {
	  	if (inTransition.getAction()!=null) 	return false;
	  }
    return true;
	}
}


//************************************************************************************* 
//************************************NEW CLASS****************************************
//*************************************************************************************  

class Guard{
	depend java.util.Iterator;
	
	//TODO inserted by Vahda [Nov 30, 2015,4:49:56 PM]: please provide a comprehensive comparison
  //This comparison just supports sequential comparing of boolean operations. If the order is changed then it'll show false.
  boolean isEqualToGuard(Guard inGuard) {
  	if (inGuard==null) return false;
		if (getNumberOfElements()!=inGuard.getNumberOfElements()) return false;
		Iterator<ConstraintVariable> main = iterator();
		Iterator<ConstraintVariable> compareTo = inGuard.iterator();
		while(main.hasNext()&& compareTo.hasNext()){
			ConstraintVariable mCV = main.next();
			ConstraintVariable cCV = compareTo.next();
			if (mCV.getType()!=cCV.getType()) return false;
			if (mCV instanceof ConstraintOperator && cCV instanceof ConstraintOperator) {
				ConstraintOperator new_name1 = (ConstraintOperator) mCV;
				ConstraintOperator new_name2 = (ConstraintOperator) cCV;
			  if (!new_name1.getValue().equals(new_name2.getValue())) return false;
			}
			if (mCV instanceof ConstraintNamed && cCV instanceof ConstraintNamed) {
				ConstraintNamed new_name1 = (ConstraintNamed) mCV;
				ConstraintNamed new_name2 = (ConstraintNamed) cCV;
			  if (!new_name1.getName().equals(new_name2.getName())) return false;
			}
			if (mCV instanceof ConstraintLiteral && cCV instanceof ConstraintLiteral) {
				ConstraintLiteral new_name1 = (ConstraintLiteral) mCV;
				ConstraintLiteral new_name2 = (ConstraintLiteral) cCV;
			  if (!new_name1.getValue().equals(new_name2.getValue())) return false;
			}
			
		}
  	return true;
  	}
}