/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

namespace example{
#include <java.util.*.h>;
#include "Mentor.h";

  

  //Mentor State Machines
  enum Status { Ok, NotOkay, NotOk }
  private Status status;
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 Mentor::Mentor()
  {
    howLongUntilOk = 3;
    setStatus(Status.Ok);
  }

  //------------------------
  // INTERFACE
  //------------------------

  bool Mentor::setHowLongUntilOk(int& aHowLongUntilOk)
  {
    bool wasSet = false;
    howLongUntilOk = aHowLongUntilOk;
    wasSet = true;
    return wasSet;
  }

  int Mentor::getHowLongUntilOk()
  {
    return howLongUntilOk;
  }

  String Mentor::getStatusFullName()
  {
    String answer = status.toString();
    return answer;
  }

  Status Mentor::getStatus()
  {
    return status;
  }

  bool Mentor::timeoutOkToNotOk()
  {
    boolean wasEventProcessed = false;

    switch (status)
    {
      case Ok:
        exitStatus();
        setStatus(Status.NotOk);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool Mentor::timeoutNotOkayToOk()
  {
    boolean wasEventProcessed = false;

    switch (status)
    {
      case NotOkay:
        exitStatus();
        setStatus(Status.Ok);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  private void Mentor::exitStatus()
  {
    switch(status)
    {
      case Ok:
        stopTimeoutOkToNotOkHandler();
        break;
      case NotOkay:
        stopTimeoutNotOkayToOkHandler();
        break;
    }
  }

  private void Mentor::setStatus(Status aStatus)
  {
    status = aStatus;

    // entry actions and do activities
    switch(status)
    {
      case Ok:
        startTimeoutOkToNotOkHandler();
        break;
      case NotOkay:
        startTimeoutNotOkayToOkHandler();
        break;
    }
  }

  void Mentor::startTimeoutOkToNotOkHandler()
  {
    timeoutOkToNotOkHandler = new TimedEventHandler(this,"timeoutOkToNotOk",4);
  }

  void Mentor::stopTimeoutOkToNotOkHandler()
  {
    timeoutOkToNotOkHandler.stop();
  }

  void Mentor::startTimeoutNotOkayToOkHandler()
  {
    timeoutNotOkayToOkHandler = new TimedEventHandler(this,"timeoutNotOkayToOk",howLongUntilOk);
  }

  void Mentor::stopTimeoutNotOkayToOkHandler()
  {
    timeoutNotOkayToOkHandler.stop();
  }

  public static class TimedEventHandler extends TimerTask  
  {
    private Mentor controller;
    private String timeoutMethodName;
    private double howLongInSeconds;
    private Timer timer;
    
    public TimedEventHandler(Mentor aController, String aTimeoutMethodName, double aHowLongInSeconds)
    {
      controller = aController;
      timeoutMethodName = aTimeoutMethodName;
      howLongInSeconds = aHowLongInSeconds;
      timer = new Timer();
      timer.schedule(this, (long)howLongInSeconds*1000);
    }
    
    public void Mentor::stop()
    {
      timer.cancel();
    }
    
    public void Mentor::run ()
    {
      if ("timeoutOkToNotOk" == timeoutMethodName)
      {
        boolean shouldRestart = !controller.timeoutOkToNotOk();
        if (shouldRestart)
        {
          controller.startTimeoutOkToNotOkHandler();
        }
        return;
      }
      if ("timeoutNotOkayToOk" == timeoutMethodName)
      {
        boolean shouldRestart = !controller.timeoutNotOkayToOk();
        if (shouldRestart)
        {
          controller.startTimeoutNotOkayToOkHandler();
        }
        return;
      }
    }
  }

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
Mentor::~Mentor()
  {}

}