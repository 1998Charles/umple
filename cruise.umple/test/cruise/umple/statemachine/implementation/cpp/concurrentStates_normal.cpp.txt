/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

namespace example{
#include "LightFixture.h";

  

  //LightFixture State Machines
  enum Status { Off, On }
  enum StatusMotorIdle { Null, MotorIdle, MotorRunning }
  enum StatusFanIdle { Null, FanIdle, FanRunning }
  private Status status;
  private StatusMotorIdle statusMotorIdle;
  private StatusFanIdle statusFanIdle;
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 LightFixture::LightFixture()
  {
    setStatus(Status.Off);
    if (statusMotorIdle == null) { setStatusMotorIdle(StatusMotorIdle.Null); }
    if (statusFanIdle == null) { setStatusFanIdle(StatusFanIdle.Null); }
  }

  //------------------------
  // INTERFACE
  //------------------------

  String LightFixture::getStatusFullName()
  {
    String answer = status.toString();
    if (statusMotorIdle != StatusMotorIdle.Null) { answer += "." + statusMotorIdle.toString(); }
    if (statusFanIdle != StatusFanIdle.Null) { answer += "." + statusFanIdle.toString(); }
    return answer;
  }

  Status LightFixture::getStatus()
  {
    return status;
  }

  StatusMotorIdle LightFixture::getStatusMotorIdle()
  {
    return statusMotorIdle;
  }

  StatusFanIdle LightFixture::getStatusFanIdle()
  {
    return statusFanIdle;
  }

  bool LightFixture::turnOn()
  {
    boolean wasEventProcessed = false;

    switch (status)
    {
      case Off:
        setStatus(Status.On);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool LightFixture::enterOn()
  {
    boolean wasEventProcessed = false;

    switch (statusMotorIdle)
    {
      case Null:
        setStatusMotorIdle(StatusMotorIdle.MotorIdle);
        wasEventProcessed = true;
        break;
    }

    switch (statusFanIdle)
    {
      case Null:
        setStatusFanIdle(StatusFanIdle.FanIdle);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool LightFixture::exitOn()
  {
    boolean wasEventProcessed = false;

    switch (statusMotorIdle)
    {
      case MotorIdle:
        setStatusMotorIdle(StatusMotorIdle.Null);
        wasEventProcessed = true;
        break;
      case MotorRunning:
        setStatusMotorIdle(StatusMotorIdle.Null);
        wasEventProcessed = true;
        break;
    }

    switch (statusFanIdle)
    {
      case FanIdle:
        setStatusFanIdle(StatusFanIdle.Null);
        wasEventProcessed = true;
        break;
      case FanRunning:
        setStatusFanIdle(StatusFanIdle.Null);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool LightFixture::flip()
  {
    boolean wasEventProcessed = false;

    switch (statusMotorIdle)
    {
      case MotorIdle:
        setStatusMotorIdle(StatusMotorIdle.MotorRunning);
        wasEventProcessed = true;
        break;
      case MotorRunning:
        setStatusMotorIdle(StatusMotorIdle.MotorIdle);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool LightFixture::flop()
  {
    boolean wasEventProcessed = false;

    switch (statusFanIdle)
    {
      case FanIdle:
        setStatusFanIdle(StatusFanIdle.FanRunning);
        wasEventProcessed = true;
        break;
      case FanRunning:
        setStatusFanIdle(StatusFanIdle.FanIdle);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  private void LightFixture::exitStatus()
  {
    switch(status)
    {
      case On:
        exitOn();
        break;
    }
  }

  private void LightFixture::setStatus(Status aStatus)
  {
    status = aStatus;

    // entry actions and do activities
    switch(status)
    {
      case On:
        if (statusMotorIdle == StatusMotorIdle.Null) { setStatusMotorIdle(StatusMotorIdle.MotorIdle); }
        if (statusFanIdle == StatusFanIdle.Null) { setStatusFanIdle(StatusFanIdle.FanIdle); }
        break;
    }
  }

  private void LightFixture::setStatusMotorIdle(StatusMotorIdle aStatusMotorIdle)
  {
    statusMotorIdle = aStatusMotorIdle;
    if (status != Status.On && aStatusMotorIdle != StatusMotorIdle.Null) { setStatus(Status.On); }
  }

  private void LightFixture::setStatusFanIdle(StatusFanIdle aStatusFanIdle)
  {
    statusFanIdle = aStatusFanIdle;
    if (status != Status.On && aStatusFanIdle != StatusFanIdle.Null) { setStatus(Status.On); }
  }

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
LightFixture::~LightFixture()
  {}

}