/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

namespace example{
#include "LightFixture.h";

  

  //LightFixture State Machines
  enum Bulb { Off, On }
  enum BulbOn { Null, Normal, Dimmed }
  private Bulb bulb;
  private BulbOn bulbOn;
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 LightFixture::LightFixture()
  {
    setBulb(Bulb.Off);
    if (bulbOn == null) { setBulbOn(BulbOn.Null); }
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 LightFixture::LightFixture(const LightFixture & lightfixture)
  {  }
  	
  //------------------------
  // Operator =
  //------------------------

 LightFixture LightFixture::operator=(const LightFixture & lightfixture)
  {  }

  //------------------------
  // INTERFACE
  //------------------------

  String LightFixture::getBulbFullName()
  {
    String answer = bulb.toString();
    if (bulbOn != BulbOn.Null) { answer += "." + bulbOn.toString(); }
    return answer;
  }

  Bulb LightFixture::getBulb()
  {
    return bulb;
  }

  BulbOn LightFixture::getBulbOn()
  {
    return bulbOn;
  }

  bool LightFixture::flip()
  {
    boolean wasEventProcessed = false;

    switch (bulb)
    {
      case Off:
        setBulb(Bulb.On);
        wasEventProcessed = true;
        break;
      case On:
        exitBulb();
        setBulb(Bulb.Off);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  private bool LightFixture::enterOn()
  {
    boolean wasEventProcessed = false;

    switch (bulbOn)
    {
      case Null:
        setBulbOn(BulbOn.Normal);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  private bool LightFixture::exitOn()
  {
    boolean wasEventProcessed = false;

    switch (bulbOn)
    {
      case Normal:
        setBulbOn(BulbOn.Null);
        wasEventProcessed = true;
        break;
      case Dimmed:
        setBulbOn(BulbOn.Null);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool LightFixture::touch()
  {
    boolean wasEventProcessed = false;

    switch (bulbOn)
    {
      case Normal:
        setBulbOn(BulbOn.Dimmed);
        wasEventProcessed = true;
        break;
      case Dimmed:
        setBulb(Bulb.Off);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  private void LightFixture::exitBulb()
  {
    switch(bulb)
    {
      case On:
        exitOn();
        break;
    }
  }

  private void LightFixture::setBulb(Bulb aBulb)
  {
    bulb = aBulb;

    // entry actions and do activities
    switch(bulb)
    {
      case On:
        if (bulbOn == BulbOn.Null) { setBulbOn(BulbOn.Normal); }
        break;
    }
  }

  private void LightFixture::setBulbOn(BulbOn aBulbOn)
  {
    bulbOn = aBulbOn;
    if (bulb != Bulb.On && aBulbOn != BulbOn.Null) { setBulb(Bulb.On); }
  }

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
LightFixture::~LightFixture()
  {}

}