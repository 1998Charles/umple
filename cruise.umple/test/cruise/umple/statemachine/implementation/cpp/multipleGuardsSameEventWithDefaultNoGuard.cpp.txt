/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

namespace example{
#include "LightFixture.h";

  

  //LightFixture State Machines
  enum Bulb { On, Off, Amber }
  private Bulb bulb;
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 LightFixture::LightFixture()
  {
    brightness = 0;
    setBulb(Bulb.On);
  }

  //------------------------
  // INTERFACE
  //------------------------

  bool LightFixture::setBrightness(int& aBrightness)
  {
    bool wasSet = false;
    brightness = aBrightness;
    wasSet = true;
    return wasSet;
  }

  int LightFixture::getBrightness()
  {
    return brightness;
  }

  String LightFixture::getBulbFullName()
  {
    String answer = bulb.toString();
    return answer;
  }

  Bulb LightFixture::getBulb()
  {
    return bulb;
  }

  bool LightFixture::push()
  {
    boolean wasEventProcessed = false;

    switch (bulb)
    {
      case On:
        if (brightness < 1)
        {
          setBulb(Bulb.Off);
          wasEventProcessed = true;
          break;
        }
        if (brightness > 10)
        {
          setBulb(Bulb.Amber);
          wasEventProcessed = true;
          break;
        }
        setBulb(Bulb.On);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  private void LightFixture::setBulb(Bulb aBulb)
  {
    bulb = aBulb;
  }

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
LightFixture::~LightFixture()
  {}

}