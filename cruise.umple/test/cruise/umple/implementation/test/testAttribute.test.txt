/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/



////---- Tests for  attribute ----/////
Test A {
  //tests for :id

      test attribute_id {
    
    assertTrue( a.setId("RandomString1"));
    assertTrue( a.getId() =="RandomString1");
    assertTrue( a.setId("RandomString2"));
    assertTrue( a.getId()=="RandomString2");
    assertFalse( a.getId() =="RandomString1");
             
	}

 //tests for :number

      test attribute_number {
    
      assertTrue( a.setNumber(123)));
      assertTrue( a.getNumber() == 123));
          
	}

 //tests for :number2

      test attribute_number2 {
    
      assertTrue( a.setNumber2(null)));
      assertTrue( a.getNumber2() == null));
          
	}

 //tests for :number3

      test attribute_number3 {
    
      assertTrue( a.setNumber3(123)));
      assertTrue( a.getNumber3() == 123));
          
	}


  
 
   

}
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/



////---- Tests for  attribute ----/////
Test B {
  //tests for :name

      test attribute_name {
    
    assertTrue( b.setName("RandomString1"));
    assertTrue( b.getName() =="RandomString1");
    assertTrue( b.setName("RandomString2"));
    assertTrue( b.getName()=="RandomString2");
    assertFalse( b.getName() =="RandomString1");
             
	}

 //tests for :address

      test attribute_address {
    
    assertTrue( b.setAddress("RandomString1"));
    assertTrue( b.getAddress() =="RandomString1");
    assertTrue( b.setAddress("RandomString2"));
    assertTrue( b.getAddress()=="RandomString2");
    assertFalse( b.getAddress() =="RandomString1");
             
	}


  
 
   

}