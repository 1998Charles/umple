/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF Umple xUnit Model */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/



////---- Tests for  NNToManyAssociation ----/////

Test NNToManyAssociation.ump {
depend  A,B ; 


 
  /*-------------------------*/
  /*  Association Test       */
  /*-------------------------*/
  /*-------------------------*/
  /*  Class A       */
  /*-------------------------*/

              /////// Association: -- [4,4] B /////// 
              //create ... without ...
              Test CreateAWithoutB {
              A someA = new A(); \n",,));
              AssertF (someB.getBS()!= null);
              }
              //replace
              
              Test ReplaceBInA { 
              
              B someB = new B(); 
              B someB2 = new B();
              someB.addB(someA);
              AssertEqual (1, someB.getNumberOfAs());
              AssertEqual (1, someB.getNumberOfAs());
              someA.setB(someB2);
              AssertEqual (someA, someB2.getA(0));
              }
              //delete
              Test DeleteB {
              // delete B in A
              someB2.delete(); 
              AssertEqual (null, someB2.getA(0));
              }
              //boundary test
              
              Test BoundaryTest {
              private int size = B.getNumberOfAs(); 
              AssertTrue ( size > 0 &&  size < -1) 
              
              }
              
              Test BoundaryAtMax {
              
              
                
                
                
              
              //Maximum A allowed : 4
              int size = B.getNumberOfAs();
              
              
              A obj1 ();
              A obj2 ();
              A obj3 ();
              A obj4 ();
              
              B someB = new B(obj1,obj2,obj3,obj4,);

              
              A obj4 (someB);
              
              AssertEqual(size, someB.getNumberOfAs());
              AssertEqual(someB, obj1.getSomeA(0));
              AssertEqual(someB, obj2.getSomeA(0));
              AssertEqual(someB, obj3.getSomeA(0));
              AssertEqual(someB, obj4.getSomeA(0));
              
              
              }
  /*-------------------------*/
  /*  Class B       */
  /*-------------------------*/

              /////// Association: -- [0,*] A /////// 
              //create ... without ...
              Test CreateBWithoutA {
              B someB = new B(); \n",,));
              AssertF (someA.getAS()!= null);
              }
              //replace
              
              Test ReplaceAInB { 
              
              A someA = new A(); 
              A someA2 = new A();
              someA.addA(someB);
              AssertEqual (1, someA.getNumberOfBs());
              AssertEqual (1, someA.getNumberOfBs());
              someB.setA(someA2);
              AssertEqual (someB, someA2.getB(0));
              }
              //delete
              Test DeleteA {
              // delete A in B
              someA2.delete(); 
              AssertEqual (null, someA2.getB(0));
              }
              //boundary test
              
              Test BoundaryTest {
              private int size = A.getNumberOfBs(); 
              AssertTrue ( size > 4 &&  size < 4) 
              
              }
              
              Test BoundaryAtMax {
              
              
                
                
                
              
              //Maximum B allowed : -1
              int size = A.getNumberOfBs();
              
              
              
              A someA = new A();

              
              
              AssertEqual(size, someA.getNumberOfBs());
              
              
              }
 
 

 }