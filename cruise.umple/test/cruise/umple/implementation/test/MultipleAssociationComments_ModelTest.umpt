/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF Umple xUnit Model */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/



////---- Tests for  MultipleAssociationComments ----/////

Test MultipleAssociationComments.ump {
depend  Foo,Bar1,Bar2,Bar3,Bar4 ; 


 
  /*-------------------------*/
  /*  Association Test       */
  /*-------------------------*/
  /*-------------------------*/
  /*  Class Foo       */
  /*-------------------------*/
  /*-------------------------*/
  /*  Class Bar1       */
  /*-------------------------*/

              /////// Association: -- [1,1] Foo /////// 
              //create .....
              Test CreateBar1WithoutFoo {
              Bar1 someBar1 = new Bar1(); \n",,));
              AssertTrue (someFoo.getFOO()!= null);
              }
              //replace
              
              Test ReplaceFooInBar1 { 
              
              Foo someFoo = new Foo(); 
              Foo someFoo2 = new Foo();
              someFoo.addFoo(someBar1);
              AssertEqual (1, someFoo.getNumberOfBar1s());
              AssertEqual (1, someFoo.getNumberOfBar1s());
              someBar1.setFoo(someFoo2);
              AssertEqual (someBar1, someFoo2.getBar1(0));
              }
              //delete
              Test DeleteFoo {
              // delete Foo in Bar1
              someFoo2.delete(); 
              AssertEqual (null, someFoo2.getBar1(0));
              }
              //add to new B
              
              Test AddFooToNewBar1 { 
              Foo someBar1 = new Foo();
              Foo someBar12 = new Foo();
      
              Bar1 someBar1 = new Bar1();
              someBar1.addFoo(someFoo);
              someBar1.addFoo(someFoo2);  
        
              AssertEqual(someFoo2, someBar1.getFoo(); 
              AssertEqual (someBar1, someFoo2.getBar1(0));
              AssertEqual (someBar1, someFoo.getNumberOfBar1s());
              }

              /////// Association: -- [1,1] Foo /////// 
              //create ... without ...
              Test CreateBar1WithoutFoo {
              Bar1 someBar1 = new Bar1(); \n",,));
              AssertF (someFoo.getFOO()!= null);
              }
              //replace
              
              Test ReplaceFooInBar1 { 
              
              Foo someFoo = new Foo(); 
              Foo someFoo2 = new Foo();
              someFoo.addFoo(someBar1);
              AssertEqual (1, someFoo.getNumberOfBar1s());
              AssertEqual (1, someFoo.getNumberOfBar1s());
              someBar1.setFoo(someFoo2);
              AssertEqual (someBar1, someFoo2.getBar1(0));
              }
              //delete
              Test DeleteFoo {
              // delete Foo in Bar1
              someFoo2.delete(); 
              AssertEqual (null, someFoo2.getBar1(0));
              }
              //boundary test
              
              Test BoundaryTest {
              private int size = Foo.getNumberOfBar1s(); 
              AssertTrue ( size > 0 &&  size < -1) 
              
              }
              
              Test BoundaryAtMax {
              
              
                
                
                
              
              //Maximum Bar1 allowed : 1
              int size = Foo.getNumberOfBar1s();
              
              
              Bar1 obj1 ();
              
              Foo someFoo = new Foo(obj1,);

              
              Bar1 obj1 (someFoo);
              
              AssertEqual(size, someFoo.getNumberOfBar1s());
              AssertEqual(someFoo, obj1.getSomeBar1(0));
              
              
              }
  /*-------------------------*/
  /*  Class Bar2       */
  /*-------------------------*/

              /////// Association: -- [1,1] Foo /////// 
              //create .....
              Test CreateBar2WithoutFoo {
              Bar2 someBar2 = new Bar2(); \n",,));
              AssertTrue (someFoo.getFOO()!= null);
              }
              //replace
              
              Test ReplaceFooInBar2 { 
              
              Foo someFoo = new Foo(); 
              Foo someFoo2 = new Foo();
              someFoo.addFoo(someBar2);
              AssertEqual (1, someFoo.getNumberOfBar2s());
              AssertEqual (1, someFoo.getNumberOfBar2s());
              someBar2.setFoo(someFoo2);
              AssertEqual (someBar2, someFoo2.getBar2(0));
              }
              //delete
              Test DeleteFoo {
              // delete Foo in Bar2
              someFoo2.delete(); 
              AssertEqual (null, someFoo2.getBar2(0));
              }
              //add to new B
              
              Test AddFooToNewBar2 { 
              Foo someBar2 = new Foo();
              Foo someBar22 = new Foo();
      
              Bar2 someBar2 = new Bar2();
              someBar2.addFoo(someFoo);
              someBar2.addFoo(someFoo2);  
        
              AssertEqual(someFoo2, someBar2.getFoo(); 
              AssertEqual (someBar2, someFoo2.getBar2(0));
              AssertEqual (someBar2, someFoo.getNumberOfBar2s());
              }

              /////// Association: -- [1,1] Foo /////// 
              //create ... without ...
              Test CreateBar2WithoutFoo {
              Bar2 someBar2 = new Bar2(); \n",,));
              AssertF (someFoo.getFOO()!= null);
              }
              //replace
              
              Test ReplaceFooInBar2 { 
              
              Foo someFoo = new Foo(); 
              Foo someFoo2 = new Foo();
              someFoo.addFoo(someBar2);
              AssertEqual (1, someFoo.getNumberOfBar2s());
              AssertEqual (1, someFoo.getNumberOfBar2s());
              someBar2.setFoo(someFoo2);
              AssertEqual (someBar2, someFoo2.getBar2(0));
              }
              //delete
              Test DeleteFoo {
              // delete Foo in Bar2
              someFoo2.delete(); 
              AssertEqual (null, someFoo2.getBar2(0));
              }
              //boundary test
              
              Test BoundaryTest {
              private int size = Foo.getNumberOfBar2s(); 
              AssertTrue ( size > 0 &&  size < -1) 
              
              }
              
              Test BoundaryAtMax {
              
              
                
                
                
              
              //Maximum Bar2 allowed : 1
              int size = Foo.getNumberOfBar2s();
              
              
              Bar2 obj1 ();
              
              Foo someFoo = new Foo(obj1,);

              
              Bar2 obj1 (someFoo);
              
              AssertEqual(size, someFoo.getNumberOfBar2s());
              AssertEqual(someFoo, obj1.getSomeBar2(0));
              
              
              }
  /*-------------------------*/
  /*  Class Bar3       */
  /*-------------------------*/

              /////// Association: -- [1,1] Foo /////// 
              //create .....
              Test CreateBar3WithoutFoo {
              Bar3 someBar3 = new Bar3(); \n",,));
              AssertTrue (someFoo.getFOO()!= null);
              }
              //replace
              
              Test ReplaceFooInBar3 { 
              
              Foo someFoo = new Foo(); 
              Foo someFoo2 = new Foo();
              someFoo.addFoo(someBar3);
              AssertEqual (1, someFoo.getNumberOfBar3s());
              AssertEqual (1, someFoo.getNumberOfBar3s());
              someBar3.setFoo(someFoo2);
              AssertEqual (someBar3, someFoo2.getBar3(0));
              }
              //delete
              Test DeleteFoo {
              // delete Foo in Bar3
              someFoo2.delete(); 
              AssertEqual (null, someFoo2.getBar3(0));
              }
              //add to new B
              
              Test AddFooToNewBar3 { 
              Foo someBar3 = new Foo();
              Foo someBar32 = new Foo();
      
              Bar3 someBar3 = new Bar3();
              someBar3.addFoo(someFoo);
              someBar3.addFoo(someFoo2);  
        
              AssertEqual(someFoo2, someBar3.getFoo(); 
              AssertEqual (someBar3, someFoo2.getBar3(0));
              AssertEqual (someBar3, someFoo.getNumberOfBar3s());
              }

              /////// Association: -- [1,1] Foo /////// 
              //create ... without ...
              Test CreateBar3WithoutFoo {
              Bar3 someBar3 = new Bar3(); \n",,));
              AssertF (someFoo.getFOO()!= null);
              }
              //replace
              
              Test ReplaceFooInBar3 { 
              
              Foo someFoo = new Foo(); 
              Foo someFoo2 = new Foo();
              someFoo.addFoo(someBar3);
              AssertEqual (1, someFoo.getNumberOfBar3s());
              AssertEqual (1, someFoo.getNumberOfBar3s());
              someBar3.setFoo(someFoo2);
              AssertEqual (someBar3, someFoo2.getBar3(0));
              }
              //delete
              Test DeleteFoo {
              // delete Foo in Bar3
              someFoo2.delete(); 
              AssertEqual (null, someFoo2.getBar3(0));
              }
              //boundary test
              
              Test BoundaryTest {
              private int size = Foo.getNumberOfBar3s(); 
              AssertTrue ( size > 0 &&  size < -1) 
              
              }
              
              Test BoundaryAtMax {
              
              
                
                
                
              
              //Maximum Bar3 allowed : 1
              int size = Foo.getNumberOfBar3s();
              
              
              Bar3 obj1 ();
              
              Foo someFoo = new Foo(obj1,);

              
              Bar3 obj1 (someFoo);
              
              AssertEqual(size, someFoo.getNumberOfBar3s());
              AssertEqual(someFoo, obj1.getSomeBar3(0));
              
              
              }
  /*-------------------------*/
  /*  Class Bar4       */
  /*-------------------------*/

              /////// Association: -- [1,1] Foo /////// 
              //create .....
              Test CreateBar4WithoutFoo {
              Bar4 someBar4 = new Bar4(); \n",,));
              AssertTrue (someFoo.getFOO()!= null);
              }
              //replace
              
              Test ReplaceFooInBar4 { 
              
              Foo someFoo = new Foo(); 
              Foo someFoo2 = new Foo();
              someFoo.addFoo(someBar4);
              AssertEqual (1, someFoo.getNumberOfBar4s());
              AssertEqual (1, someFoo.getNumberOfBar4s());
              someBar4.setFoo(someFoo2);
              AssertEqual (someBar4, someFoo2.getBar4(0));
              }
              //delete
              Test DeleteFoo {
              // delete Foo in Bar4
              someFoo2.delete(); 
              AssertEqual (null, someFoo2.getBar4(0));
              }
              //add to new B
              
              Test AddFooToNewBar4 { 
              Foo someBar4 = new Foo();
              Foo someBar42 = new Foo();
      
              Bar4 someBar4 = new Bar4();
              someBar4.addFoo(someFoo);
              someBar4.addFoo(someFoo2);  
        
              AssertEqual(someFoo2, someBar4.getFoo(); 
              AssertEqual (someBar4, someFoo2.getBar4(0));
              AssertEqual (someBar4, someFoo.getNumberOfBar4s());
              }

              /////// Association: -- [1,1] Foo /////// 
              //create ... without ...
              Test CreateBar4WithoutFoo {
              Bar4 someBar4 = new Bar4(); \n",,));
              AssertF (someFoo.getFOO()!= null);
              }
              //replace
              
              Test ReplaceFooInBar4 { 
              
              Foo someFoo = new Foo(); 
              Foo someFoo2 = new Foo();
              someFoo.addFoo(someBar4);
              AssertEqual (1, someFoo.getNumberOfBar4s());
              AssertEqual (1, someFoo.getNumberOfBar4s());
              someBar4.setFoo(someFoo2);
              AssertEqual (someBar4, someFoo2.getBar4(0));
              }
              //delete
              Test DeleteFoo {
              // delete Foo in Bar4
              someFoo2.delete(); 
              AssertEqual (null, someFoo2.getBar4(0));
              }
              //boundary test
              
              Test BoundaryTest {
              private int size = Foo.getNumberOfBar4s(); 
              AssertTrue ( size > 0 &&  size < -1) 
              
              }
              
              Test BoundaryAtMax {
              
              
                
                
                
              
              //Maximum Bar4 allowed : 1
              int size = Foo.getNumberOfBar4s();
              
              
              Bar4 obj1 ();
              
              Foo someFoo = new Foo(obj1,);

              
              Bar4 obj1 (someFoo);
              
              AssertEqual(size, someFoo.getNumberOfBar4s());
              AssertEqual(someFoo, obj1.getSomeBar4(0));
              
              
              }
 
 

 }