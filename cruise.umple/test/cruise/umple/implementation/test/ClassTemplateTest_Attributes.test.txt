/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/



////---- Tests for  ClassTemplateTest_Attributes ----/////

Test Mentor {

 generate JUnit ;
 
 depend  Mentor ; 



 
 GIVEN:
 ClassTemplateTest_Attributes.ump;
 
 
 
 THEN:
  //tests for :MAX

      test attribute_MAX {
    
      assertTrue( mentor.setMAX(123)));
      assertTrue( mentor.getMAX() == 123));
      assertTrue( mentor.setMAX(321)));
      assertTrue( mentor.getMAX() == 321));
      assertFlase( mentor.getMAX() == 123));
          
	}

 //tests for :MIN

      test attribute_MIN {
    
      assertTrue( mentor.setMIN(123)));
      assertTrue( mentor.getMIN() == 123));
      assertTrue( mentor.setMIN(321)));
      assertTrue( mentor.getMIN() == 321));
      assertFlase( mentor.getMIN() == 123));
          
	}

 //tests for :HELLO

      test attribute_HELLO {
    
    assertTrue( mentor.setHELLO("RandomString1"));
    assertTrue( mentor.getHELLO() =="RandomString1");
    assertTrue( mentor.setHELLO("RandomString2"));
    assertTrue( mentor.getHELLO()=="RandomString2");
    assertFalse( mentor.getHELLO() =="RandomString1");
             
	}

 //tests for :str

      test attribute_str {
    
          

    AssertMethodFalse( mentor.setStr());
    AssertTrue( mentor.getStr() == null);


        	}

 //tests for :str2

      test attribute_str2 {
    
          

    assertTrue (!str2.equals(null));

        
          

    AssertMethodFalse( mentor.setStr2());
    AssertTrue( mentor.getStr2() == null);


        	}

 //tests for :someName

      test attribute_someName {
    
    assertTrue( mentor.setSomeName("RandomString1"));
    assertTrue( mentor.getSomeName() =="RandomString1");
    assertTrue( mentor.setSomeName("RandomString2"));
    assertTrue( mentor.getSomeName()=="RandomString2");
    assertFalse( mentor.getSomeName() =="RandomString1");
             

          

    assertTrue (!someName.equals(null));
    assertTrue (Mentor.getSomeName() != null)
          

        	}

 //tests for :lDoub

      test attribute_lDoub {
    
      assertTrue( mentor.setLDoub(123456789)));
      assertTrue( mentor.getLDoub() == 123456789));
      assertTrue( mentor.setLDoub(987654321)));
      assertTrue( mentor.getLDoub() == 987654321));
      assertFlase( mentor.getLDoub() == 123456789));
          

          

    assertTrue (!lDoub.equals(null));

        	}

 //tests for :lBool

      test attribute_lBool {
    

          

    assertTrue (!lBool.equals(null));

        	}

 //tests for :name

      test attribute_name {
    
    assertTrue( mentor.setName("RandomString1"));
    assertTrue( mentor.getName() =="RandomString1");
    assertTrue( mentor.setName("RandomString2"));
    assertTrue( mentor.getName()=="RandomString2");
    assertFalse( mentor.getName() =="RandomString1");
             

          

    assertTrue (!name.equals(null));

        	}

 //tests for :d

      test attribute_d {
    
	}

 //tests for :t

      test attribute_t {
    
	}

 //tests for :i

      test attribute_i {
    
      assertTrue( mentor.setI(123)));
      assertTrue( mentor.getI() == 123));
      assertTrue( mentor.setI(321)));
      assertTrue( mentor.getI() == 321));
      assertFlase( mentor.getI() == 123));
          
	}

 //tests for :derivedTwiceI

      test attribute_derivedTwiceI {
    
      assertTrue( mentor.setDerivedTwiceI(123)));
      assertTrue( mentor.getDerivedTwiceI() == 123));
      assertTrue( mentor.setDerivedTwiceI(321)));
      assertTrue( mentor.getDerivedTwiceI() == 321));
      assertFlase( mentor.getDerivedTwiceI() == 123));
          
	}

 //tests for :x

      test attribute_x {
    
      assertTrue( mentor.setX(123)));
      assertTrue( mentor.getX() == 123));
      assertTrue( mentor.setX(321)));
      assertTrue( mentor.getX() == 321));
      assertFlase( mentor.getX() == 123));
          
	}

 //tests for :id

      test attribute_id {
    
    assertTrue( mentor.setId("RandomString1"));
    assertTrue( mentor.getId() =="RandomString1");
    assertTrue( mentor.setId("RandomString2"));
    assertTrue( mentor.getId()=="RandomString2");
    assertFalse( mentor.getId() =="RandomString1");
             
	}

 //tests for :p

      test attribute_p {
    
    assertTrue( mentor.setP("RandomString1"));
    assertTrue( mentor.getP() =="RandomString1");
    assertTrue( mentor.setP("RandomString2"));
    assertTrue( mentor.getP()=="RandomString2");
    assertFalse( mentor.getP() =="RandomString1");
             
	}

 //tests for :q

      test attribute_q {
    
    assertTrue( mentor.setQ("RandomString1"));
    assertTrue( mentor.getQ() =="RandomString1");
    assertTrue( mentor.setQ("RandomString2"));
    assertTrue( mentor.getQ()=="RandomString2");
    assertFalse( mentor.getQ() =="RandomString1");
             
	}

 //tests for :r

      test attribute_r {
    
    assertTrue( mentor.setR("RandomString1"));
    assertTrue( mentor.getR() =="RandomString1");
    assertTrue( mentor.setR("RandomString2"));
    assertTrue( mentor.getR()=="RandomString2");
    assertFalse( mentor.getR() =="RandomString1");
             
	}

 //tests for :s

      test attribute_s {
    
          

    AssertMethodFalse( mentor.setS());
    AssertTrue( mentor.getS() == "123");


        	}

 //tests for :tt

      test attribute_tt {
    
	}

 //tests for :u

      test attribute_u {
    
	}

 //tests for :v

      test attribute_v {
    
	}

 //tests for :w

      test attribute_w {
    
	}


  
 
   

}