/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/



////---- Tests for  GenericTestCase_association_optionalOneToOne ----/////

Test Calculator {

 generate JUnit ;
 
 depend  Calculator,Number,Level3,Controller ; 



 
 GIVEN:
 GenericTestCase_association_optionalOneToOne.ump;
 
 
 
 THEN:
  //tests for :name

      test attribute_name {
    
    assertTrue( calculator.setName("RandomString1"));
    assertTrue( calculator.getName() =="RandomString1");
    assertTrue( calculator.setName("RandomString2"));
    assertTrue( calculator.getName()=="RandomString2");
    assertFalse( calculator.getName() =="RandomString1");
             
	}

 //tests for :address

      test attribute_address {
    
    assertTrue( calculator.setAddress("RandomString1"));
    assertTrue( calculator.getAddress() =="RandomString1");
    assertTrue( calculator.setAddress("RandomString2"));
    assertTrue( calculator.getAddress()=="RandomString2");
    assertFalse( calculator.getAddress() =="RandomString1");
             
	}

 //tests for :someNO

      test attribute_someNO {
    
	}


      //------------------
      //User-defined Tests
      //------------------

      
      test checkifLogged_number {
        Calculator c1 ( 4, 5) ;                
        String valueToCheck = p1.getNumber();
         Number tempNumbe =  number;
        }
      
      
      
      
        
     
 
   

}
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/



////---- Tests for  GenericTestCase_association_optionalOneToOne ----/////

Test Number {

 generate JUnit ;
 
 depend  Calculator,Number,Level3,Controller ; 



 
 GIVEN:
 GenericTestCase_association_optionalOneToOne.ump;
 
 
 
 THEN:
  //tests for :id

      test attribute_id {
    
    assertTrue( number.setId("RandomString1"));
    assertTrue( number.getId() =="RandomString1");
    assertTrue( number.setId("RandomString2"));
    assertTrue( number.getId()=="RandomString2");
    assertFalse( number.getId() =="RandomString1");
             
	}


  
 
   

}
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/



////---- Tests for  GenericTestCase_association_optionalOneToOne ----/////

Test Level3 {

 generate JUnit ;
 
 depend  Calculator,Number,Level3,Controller ; 



 
 GIVEN:
 GenericTestCase_association_optionalOneToOne.ump;
 
 
 
 THEN:
 

  
 
   

}
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/



////---- Tests for  GenericTestCase_association_optionalOneToOne ----/////

Test Controller {

 generate JUnit ;
 
 depend  Calculator,Number,Level3,Controller ; 



 
 GIVEN:
 GenericTestCase_association_optionalOneToOne.ump;
 
 
 
 THEN:
  //tests for :serialNo

      test attribute_serialNo {
    
    assertTrue( controller.setSerialNo("RandomString1"));
    assertTrue( controller.getSerialNo() =="RandomString1");
    assertTrue( controller.setSerialNo("RandomString2"));
    assertTrue( controller.getSerialNo()=="RandomString2");
    assertFalse( controller.getSerialNo() =="RandomString1");
             
	}


  
 
   

}