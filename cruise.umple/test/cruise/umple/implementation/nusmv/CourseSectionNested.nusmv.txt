-- This file is generated from CourseSectionNested.ump --

MODULE Status_Handle
  
  VAR 
    event : { cancel , openRegistration , requestToRegister , closeRegistration , classSizeExceedsMinimum , classSizeExceedsMaximum };  
    
  
MODULE Status( statusOpen , handle )
  
  VAR 
    status_state : { status_Planned , status_Open , status_Cancelled , status_Closed };  
    
  ASSIGN
    init(status_state) := status_Planned;  
  
  TRANS
    ( (status_state = status_Planned) -> (
      (handle.event = cancel & next(status_state) = status_Cancelled)  |
      (handle.event = openRegistration & next(statusOpen.statusOpen_state) = statusOpen_NotEnoughStudents)  ) ) &
    ( (status_state = status_Closed) -> (
       handle.event = cancel & next(status_state) = status_Cancelled) ) &
    ( (status_state = status_Open) -> ( next(statusOpen.statusOpen_state) = statusOpen_NotEnoughStudents) ) &
    ( (status_state = status_Cancelled) -> ( next(status_state) = status_state) )
  
MODULE StatusOpen( status , handle )
  
  VAR 
    statusOpen_state : { statusOpen_NotEnoughStudents , statusOpen_EnoughStudents , null };  
    
  ASSIGN
    init(statusOpen_state) := null;  
  
  TRANS
    ( (statusOpen_state = statusOpen_NotEnoughStudents) -> (
      (handle.event = requestToRegister & next(status.status_state) = status_Open & next(statusOpen_state) = null)  |
      (handle.event = closeRegistration & next(status.status_state) = status_Cancelled & next(statusOpen_state) = null)  |
      (handle.event = classSizeExceedsMinimum & next(statusOpen_state) = statusOpen_EnoughStudents)  |
      (handle.event = cancel & next(status.status_state) = status_Cancelled & next(statusOpen_state) = null)  ) ) &
    ( (statusOpen_state = statusOpen_EnoughStudents) -> (
      (handle.event = requestToRegister & next(status.status_state) = status_Open & next(statusOpen_state) = null)  |
      (handle.event = closeRegistration & next(status.status_state) = status_Closed & next(statusOpen_state) = null)  |
      (handle.event = classSizeExceedsMaximum & next(status.status_state) = status_Closed & next(statusOpen_state) = null)  |
      (handle.event = cancel & next(status.status_state) = status_Cancelled & next(statusOpen_state) = null)  ) )
  
MODULE main
  
  VAR 
    handle : Status_Handle;
    status : Status( statusOpen , handle );
    statusOpen : StatusOpen( status , handle ); 