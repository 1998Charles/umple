-- This file is generated from SingleLaneBridge.ump --

-- PLEASE DO NOT EDIT THIS CODE --
-- This code was generated using the UMPLE @UMPLE_VERSION@ modeling language! --


-- This defines a NuSMV module for SystemSm --
MODULE SystemSm ( _smBridgeCar , _smBridgeCarRedCarRedA , _smBridgeCarRedCarRedARedA , _smBridgeCarRedCarRedB , _smBridgeCarRedCarRedBRedB , _smBridgeCarRedCar , _smBridgeCarBlueCarBlueA , _smBridgeCarBlueCarBlueABlueA , _smBridgeCarBlueCarBlueB , _smBridgeCarBlueCarBlueBBlueB , _smBridgeCarBlueCar , _smBridgeBridgeStatus , _smBridgeBridgeStatusBridgeStatus , _smBridge , _smCoordCoordRed , _smCoordCoordRedRedCoordEntRedCoordEnt , _smCoordCoordRedRedCoordExitRedCoordExit , _smCoordCoordBlue , _smCoordCoordBlueBlueCoordEntBlueCoordEnt , _smCoordCoordBlueBlueCoordExitBlueCoordExit , _smCoord )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { Sm_SingleLaneBridge , null };
     event : { ev_inBlue , ev_entRedA , ev_exitBlueB , ev_exitBlueA , ev_enterBlueB , ev_entRedB , ev_enterRedA , ev_outRed , ev_enterRedB , ev_enterBlueA , ev_outBlue , ev_inRed , ev_exitRedA , ev_entBlueB , ev_exitRedB , ev_entBlueA , ev_null };
     numRed : integer;
     numBlue : integer;

   -- This part defines macros that summarize the transitions and guards (if any) of the given NuSMV module --
   DEFINE
     sm_stable :=  !( event = ev_inBlue | event = ev_exitBlueB | event = ev_enterBlueB | event = ev_enterRedA | event = ev_enterRedB | event = ev_outBlue | event = ev_exitRedA | event = ev_exitRedB | event = ev_entRedA | event = ev_exitBlueA | event = ev_entRedB | event = ev_outRed | event = ev_enterBlueA | event = ev_inRed | event = ev_entBlueB | event = ev_entBlueA );
     t1 := event = ev_enterRedA & _smBridgeCarRedCarRedARedA.state = SmBridgeCarRedCarRedARedA_waitRedA & g1;
     t2 := event = ev_exitRedA & _smBridgeCarRedCarRedARedA.state = SmBridgeCarRedCarRedARedA_onRedA;
     t3 := event = ev_enterRedB & _smBridgeCarRedCarRedBRedB.state = SmBridgeCarRedCarRedBRedB_waitRedB & g1;
     t4 := event = ev_exitRedB & _smBridgeCarRedCarRedBRedB.state = SmBridgeCarRedCarRedBRedB_onRedB;
     t5 := event = ev_enterBlueA & _smBridgeCarBlueCarBlueABlueA.state = SmBridgeCarBlueCarBlueABlueA_waitBlueA & g2;
     t6 := event = ev_exitBlueA & _smBridgeCarBlueCarBlueABlueA.state = SmBridgeCarBlueCarBlueABlueA_onBlueA;
     t7 := event = ev_enterBlueB & _smBridgeCarBlueCarBlueBBlueB.state = SmBridgeCarBlueCarBlueBBlueB_waitBlueB & g2;
     t8 := event = ev_exitBlueB & _smBridgeCarBlueCarBlueBBlueB.state = SmBridgeCarBlueCarBlueBBlueB_onBlueB;
     t9 := event = ev_inRed & _smBridgeBridgeStatusBridgeStatus.state = SmBridgeBridgeStatusBridgeStatus_empty;
     t10 := event = ev_inBlue & _smBridgeBridgeStatusBridgeStatus.state = SmBridgeBridgeStatusBridgeStatus_empty;
     t11 := event = ev_outRed & _smBridgeBridgeStatusBridgeStatus.state = SmBridgeBridgeStatusBridgeStatus_oneRed;
     t12 := event = ev_inRed & _smBridgeBridgeStatusBridgeStatus.state = SmBridgeBridgeStatusBridgeStatus_oneRed;
     t13 := event = ev_outBlue & _smBridgeBridgeStatusBridgeStatus.state = SmBridgeBridgeStatusBridgeStatus_oneBlue;
     t14 := event = ev_inBlue & _smBridgeBridgeStatusBridgeStatus.state = SmBridgeBridgeStatusBridgeStatus_oneBlue;
     t15 := event = ev_outRed & _smBridgeBridgeStatusBridgeStatus.state = SmBridgeBridgeStatusBridgeStatus_twoRed;
     t16 := event = ev_outBlue & _smBridgeBridgeStatusBridgeStatus.state = SmBridgeBridgeStatusBridgeStatus_twoBlue;
     t17 := event = ev_entRedA & _smCoordCoordRedRedCoordEntRedCoordEnt.state = SmCoordCoordRedRedCoordEntRedCoordEnt_coordEntRedA;
     t18 := event = ev_entRedB & _smCoordCoordRedRedCoordEntRedCoordEnt.state = SmCoordCoordRedRedCoordEntRedCoordEnt_coordEntRedB;
     t19 := event = ev_exitRedA & _smCoordCoordRedRedCoordExitRedCoordExit.state = SmCoordCoordRedRedCoordExitRedCoordExit_coordExitRedA;
     t20 := event = ev_exitRedB & _smCoordCoordRedRedCoordExitRedCoordExit.state = SmCoordCoordRedRedCoordExitRedCoordExit_coordExitRedB;
     t21 := event = ev_entBlueA & _smCoordCoordBlueBlueCoordEntBlueCoordEnt.state = SmCoordCoordBlueBlueCoordEntBlueCoordEnt_coordEntBlueA;
     t22 := event = ev_entBlueB & _smCoordCoordBlueBlueCoordEntBlueCoordEnt.state = SmCoordCoordBlueBlueCoordEntBlueCoordEnt_coordEntBlueB;
     t23 := event = ev_exitBlueA & _smCoordCoordBlueBlueCoordExitBlueCoordExit.state = SmCoordCoordBlueBlueCoordExitBlueCoordExit_coordExitBlueA;
     t24 := event = ev_exitBlueB & _smCoordCoordBlueBlueCoordExitBlueCoordExit.state = SmCoordCoordBlueBlueCoordExitBlueCoordExit_coordExitBlueB;
     g1 := numRed < 2 & numBlue = 0;
     g2 := numBlue < 2 & numRed = 0;

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := Sm_SingleLaneBridge;
     next( state ) := case
       t2 | t4 | t6 | t8 | t11 | t9 | t10 | t12 | t18 | t20 | t22 | t24 | t1 | t3 | t5 | t7 | t13 | t15 | t16 | t14 | t17 | t19 | t21 | t23 : Sm_SingleLaneBridge;
       TRUE : state;
     esac;

   -- This part defines logic for the assignment of values to state variable "event" of this NuSMV module --
   ASSIGN
     init( event ) := ev_null;
     next( event ) := case
       sm_stable : { ev_inBlue , ev_entRedA , ev_exitBlueB , ev_exitBlueA , ev_enterBlueB , ev_entRedB , ev_enterRedA , ev_outRed , ev_enterRedB , ev_enterBlueA , ev_outBlue , ev_inRed , ev_exitRedA , ev_entBlueB , ev_exitRedB , ev_entBlueA };
       TRUE : ev_null;
     esac;

   -- This part defines logic for the assignment of values to state variable "numRed" of this NuSMV module --
   ASSIGN
     init( numRed ) := 0;

   -- This part defines logic for the assignment of values to state variable "numBlue" of this NuSMV module --
   ASSIGN
     init( numBlue ) := 0;

-- This defines a NuSMV module for SystemSmBridgeCar --
MODULE SystemSmBridgeCar ( _sm )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmBridgeCar_Car , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t2 | _sm.t4 | _sm.t6 | _sm.t8 | _sm.t1 | _sm.t3 | _sm.t5 | _sm.t7 : SmBridgeCar_Car;
       _sm.state = Sm_SingleLaneBridge & state = null : SmBridgeCar_Car;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmBridgeCarRedCarRedA --
MODULE SystemSmBridgeCarRedCarRedA ( _sm , _smBridgeCar )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmBridgeCarRedCarRedA_RedA , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t2 | _sm.t1 : SmBridgeCarRedCarRedA_RedA;
       _smBridgeCar.state = SmBridgeCar_Car & state = null : SmBridgeCarRedCarRedA_RedA;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmBridgeCarRedCarRedARedA --
MODULE SystemSmBridgeCarRedCarRedARedA ( _sm , _smBridgeCarRedCar )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmBridgeCarRedCarRedARedA_waitRedA , SmBridgeCarRedCarRedARedA_onRedA , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t2 : SmBridgeCarRedCarRedARedA_waitRedA;
       _sm.t1 : SmBridgeCarRedCarRedARedA_onRedA;
       _smBridgeCarRedCar.state = SmBridgeCarRedCar_RedCar & state = null : SmBridgeCarRedCarRedARedA_waitRedA;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmBridgeCarRedCarRedB --
MODULE SystemSmBridgeCarRedCarRedB ( _sm , _smBridgeCar )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmBridgeCarRedCarRedB_RedB , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t4 | _sm.t3 : SmBridgeCarRedCarRedB_RedB;
       _smBridgeCar.state = SmBridgeCar_Car & state = null : SmBridgeCarRedCarRedB_RedB;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmBridgeCarRedCarRedBRedB --
MODULE SystemSmBridgeCarRedCarRedBRedB ( _sm , _smBridgeCarRedCar )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmBridgeCarRedCarRedBRedB_waitRedB , SmBridgeCarRedCarRedBRedB_onRedB , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t4 : SmBridgeCarRedCarRedBRedB_waitRedB;
       _sm.t3 : SmBridgeCarRedCarRedBRedB_onRedB;
       _smBridgeCarRedCar.state = SmBridgeCarRedCar_RedCar & state = null : SmBridgeCarRedCarRedBRedB_waitRedB;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmBridgeCarRedCar --
MODULE SystemSmBridgeCarRedCar ( _sm , _smBridge )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmBridgeCarRedCar_RedCar , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t2 | _sm.t4 | _sm.t1 | _sm.t3 : SmBridgeCarRedCar_RedCar;
       _smBridge.state = SmBridge_Bridge & state = null : SmBridgeCarRedCar_RedCar;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmBridgeCarBlueCarBlueA --
MODULE SystemSmBridgeCarBlueCarBlueA ( _sm , _smBridgeCar )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmBridgeCarBlueCarBlueA_BlueA , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t6 | _sm.t5 : SmBridgeCarBlueCarBlueA_BlueA;
       _smBridgeCar.state = SmBridgeCar_Car & state = null : SmBridgeCarBlueCarBlueA_BlueA;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmBridgeCarBlueCarBlueABlueA --
MODULE SystemSmBridgeCarBlueCarBlueABlueA ( _sm , _smBridgeCarBlueCar )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmBridgeCarBlueCarBlueABlueA_waitBlueA , SmBridgeCarBlueCarBlueABlueA_onBlueA , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t6 : SmBridgeCarBlueCarBlueABlueA_waitBlueA;
       _sm.t5 : SmBridgeCarBlueCarBlueABlueA_onBlueA;
       _smBridgeCarBlueCar.state = SmBridgeCarBlueCar_BlueCar & state = null : SmBridgeCarBlueCarBlueABlueA_waitBlueA;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmBridgeCarBlueCarBlueB --
MODULE SystemSmBridgeCarBlueCarBlueB ( _sm , _smBridgeCar )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmBridgeCarBlueCarBlueB_BlueB , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t8 | _sm.t7 : SmBridgeCarBlueCarBlueB_BlueB;
       _smBridgeCar.state = SmBridgeCar_Car & state = null : SmBridgeCarBlueCarBlueB_BlueB;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmBridgeCarBlueCarBlueBBlueB --
MODULE SystemSmBridgeCarBlueCarBlueBBlueB ( _sm , _smBridgeCarBlueCar )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmBridgeCarBlueCarBlueBBlueB_waitBlueB , SmBridgeCarBlueCarBlueBBlueB_onBlueB , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t8 : SmBridgeCarBlueCarBlueBBlueB_waitBlueB;
       _sm.t7 : SmBridgeCarBlueCarBlueBBlueB_onBlueB;
       _smBridgeCarBlueCar.state = SmBridgeCarBlueCar_BlueCar & state = null : SmBridgeCarBlueCarBlueBBlueB_waitBlueB;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmBridgeCarBlueCar --
MODULE SystemSmBridgeCarBlueCar ( _sm , _smBridge )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmBridgeCarBlueCar_BlueCar , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t6 | _sm.t8 | _sm.t5 | _sm.t7 : SmBridgeCarBlueCar_BlueCar;
       _smBridge.state = SmBridge_Bridge & state = null : SmBridgeCarBlueCar_BlueCar;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmBridgeBridgeStatus --
MODULE SystemSmBridgeBridgeStatus ( _sm )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmBridgeBridgeStatus_BridgeStatus , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t11 | _sm.t9 | _sm.t10 | _sm.t12 | _sm.t13 | _sm.t15 | _sm.t16 | _sm.t14 : SmBridgeBridgeStatus_BridgeStatus;
       _sm.state = Sm_SingleLaneBridge & state = null : SmBridgeBridgeStatus_BridgeStatus;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmBridgeBridgeStatusBridgeStatus --
MODULE SystemSmBridgeBridgeStatusBridgeStatus ( _sm , _smBridge )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmBridgeBridgeStatusBridgeStatus_empty , SmBridgeBridgeStatusBridgeStatus_oneRed , SmBridgeBridgeStatusBridgeStatus_oneBlue , SmBridgeBridgeStatusBridgeStatus_twoRed , SmBridgeBridgeStatusBridgeStatus_twoBlue , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t11 | _sm.t13 : SmBridgeBridgeStatusBridgeStatus_empty;
       _sm.t9 | _sm.t15 : SmBridgeBridgeStatusBridgeStatus_oneRed;
       _sm.t10 | _sm.t16 : SmBridgeBridgeStatusBridgeStatus_oneBlue;
       _sm.t12 : SmBridgeBridgeStatusBridgeStatus_twoRed;
       _sm.t14 : SmBridgeBridgeStatusBridgeStatus_twoBlue;
       _smBridge.state = SmBridge_Bridge & state = null : SmBridgeBridgeStatusBridgeStatus_empty;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmBridge --
MODULE SystemSmBridge ( _sm )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmBridge_Bridge , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t2 | _sm.t4 | _sm.t6 | _sm.t8 | _sm.t11 | _sm.t9 | _sm.t10 | _sm.t12 | _sm.t1 | _sm.t3 | _sm.t5 | _sm.t7 | _sm.t13 | _sm.t15 | _sm.t16 | _sm.t14 : SmBridge_Bridge;
       _sm.state = Sm_SingleLaneBridge & state = null : SmBridge_Bridge;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmCoordCoordRed --
MODULE SystemSmCoordCoordRed ( _sm )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmCoordCoordRed_CoordRed , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t18 | _sm.t20 | _sm.t17 | _sm.t19 : SmCoordCoordRed_CoordRed;
       _sm.state = Sm_SingleLaneBridge & state = null : SmCoordCoordRed_CoordRed;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmCoordCoordRedRedCoordEntRedCoordEnt --
MODULE SystemSmCoordCoordRedRedCoordEntRedCoordEnt ( _sm , _smCoordCoordRed )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmCoordCoordRedRedCoordEntRedCoordEnt_coordEntRedA , SmCoordCoordRedRedCoordEntRedCoordEnt_coordEntRedB , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t18 : SmCoordCoordRedRedCoordEntRedCoordEnt_coordEntRedA;
       _sm.t17 : SmCoordCoordRedRedCoordEntRedCoordEnt_coordEntRedB;
       _smCoordCoordRed.state = SmCoordCoordRed_CoordRed & state = null : SmCoordCoordRedRedCoordEntRedCoordEnt_coordEntRedA;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmCoordCoordRedRedCoordExitRedCoordExit --
MODULE SystemSmCoordCoordRedRedCoordExitRedCoordExit ( _sm , _smCoordCoordRed )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmCoordCoordRedRedCoordExitRedCoordExit_coordExitRedA , SmCoordCoordRedRedCoordExitRedCoordExit_coordExitRedB , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t20 : SmCoordCoordRedRedCoordExitRedCoordExit_coordExitRedA;
       _sm.t19 : SmCoordCoordRedRedCoordExitRedCoordExit_coordExitRedB;
       _smCoordCoordRed.state = SmCoordCoordRed_CoordRed & state = null : SmCoordCoordRedRedCoordExitRedCoordExit_coordExitRedA;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmCoordCoordBlue --
MODULE SystemSmCoordCoordBlue ( _sm )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmCoordCoordBlue_CoordBlue , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t22 | _sm.t24 | _sm.t21 | _sm.t23 : SmCoordCoordBlue_CoordBlue;
       _sm.state = Sm_SingleLaneBridge & state = null : SmCoordCoordBlue_CoordBlue;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmCoordCoordBlueBlueCoordEntBlueCoordEnt --
MODULE SystemSmCoordCoordBlueBlueCoordEntBlueCoordEnt ( _sm , _smCoordCoordBlue )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmCoordCoordBlueBlueCoordEntBlueCoordEnt_coordEntBlueA , SmCoordCoordBlueBlueCoordEntBlueCoordEnt_coordEntBlueB , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t22 : SmCoordCoordBlueBlueCoordEntBlueCoordEnt_coordEntBlueA;
       _sm.t21 : SmCoordCoordBlueBlueCoordEntBlueCoordEnt_coordEntBlueB;
       _smCoordCoordBlue.state = SmCoordCoordBlue_CoordBlue & state = null : SmCoordCoordBlueBlueCoordEntBlueCoordEnt_coordEntBlueA;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmCoordCoordBlueBlueCoordExitBlueCoordExit --
MODULE SystemSmCoordCoordBlueBlueCoordExitBlueCoordExit ( _sm , _smCoordCoordBlue )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmCoordCoordBlueBlueCoordExitBlueCoordExit_coordExitBlueA , SmCoordCoordBlueBlueCoordExitBlueCoordExit_coordExitBlueB , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t24 : SmCoordCoordBlueBlueCoordExitBlueCoordExit_coordExitBlueA;
       _sm.t23 : SmCoordCoordBlueBlueCoordExitBlueCoordExit_coordExitBlueB;
       _smCoordCoordBlue.state = SmCoordCoordBlue_CoordBlue & state = null : SmCoordCoordBlueBlueCoordExitBlueCoordExit_coordExitBlueA;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSmCoord --
MODULE SystemSmCoord ( _sm )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmCoord_Coord , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t18 | _sm.t20 | _sm.t22 | _sm.t24 | _sm.t17 | _sm.t19 | _sm.t21 | _sm.t23 : SmCoord_Coord;
       _sm.state = Sm_SingleLaneBridge & state = null : SmCoord_Coord;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SystemSm_Machine --
MODULE SystemSm_Machine

   -- This part declares state variables for the given NuSMV module --
   VAR
     systemSm : SystemSm( systemSmBridgeCar , systemSmBridgeCarRedCarRedA , systemSmBridgeCarRedCarRedARedA , systemSmBridgeCarRedCarRedB , systemSmBridgeCarRedCarRedBRedB , systemSmBridgeCarRedCar , systemSmBridgeCarBlueCarBlueA , systemSmBridgeCarBlueCarBlueABlueA , systemSmBridgeCarBlueCarBlueB , systemSmBridgeCarBlueCarBlueBBlueB , systemSmBridgeCarBlueCar , systemSmBridgeBridgeStatus , systemSmBridgeBridgeStatusBridgeStatus , systemSmBridge , systemSmCoordCoordRed , systemSmCoordCoordRedRedCoordEntRedCoordEnt , systemSmCoordCoordRedRedCoordExitRedCoordExit , systemSmCoordCoordBlue , systemSmCoordCoordBlueBlueCoordEntBlueCoordEnt , systemSmCoordCoordBlueBlueCoordExitBlueCoordExit , systemSmCoord );
     systemSmBridgeCar : SystemSmBridgeCar( systemSm );
     systemSmBridgeCarRedCarRedA : SystemSmBridgeCarRedCarRedA( systemSm , systemSmBridgeCar );
     systemSmBridgeCarRedCarRedARedA : SystemSmBridgeCarRedCarRedARedA( systemSm , systemSmBridgeCarRedCar );
     systemSmBridgeCarRedCarRedB : SystemSmBridgeCarRedCarRedB( systemSm , systemSmBridgeCar );
     systemSmBridgeCarRedCarRedBRedB : SystemSmBridgeCarRedCarRedBRedB( systemSm , systemSmBridgeCarRedCar );
     systemSmBridgeCarRedCar : SystemSmBridgeCarRedCar( systemSm , systemSmBridge );
     systemSmBridgeCarBlueCarBlueA : SystemSmBridgeCarBlueCarBlueA( systemSm , systemSmBridgeCar );
     systemSmBridgeCarBlueCarBlueABlueA : SystemSmBridgeCarBlueCarBlueABlueA( systemSm , systemSmBridgeCarBlueCar );
     systemSmBridgeCarBlueCarBlueB : SystemSmBridgeCarBlueCarBlueB( systemSm , systemSmBridgeCar );
     systemSmBridgeCarBlueCarBlueBBlueB : SystemSmBridgeCarBlueCarBlueBBlueB( systemSm , systemSmBridgeCarBlueCar );
     systemSmBridgeCarBlueCar : SystemSmBridgeCarBlueCar( systemSm , systemSmBridge );
     systemSmBridgeBridgeStatus : SystemSmBridgeBridgeStatus( systemSm );
     systemSmBridgeBridgeStatusBridgeStatus : SystemSmBridgeBridgeStatusBridgeStatus( systemSm , systemSmBridge );
     systemSmBridge : SystemSmBridge( systemSm );
     systemSmCoordCoordRed : SystemSmCoordCoordRed( systemSm );
     systemSmCoordCoordRedRedCoordEntRedCoordEnt : SystemSmCoordCoordRedRedCoordEntRedCoordEnt( systemSm , systemSmCoordCoordRed );
     systemSmCoordCoordRedRedCoordExitRedCoordExit : SystemSmCoordCoordRedRedCoordExitRedCoordExit( systemSm , systemSmCoordCoordRed );
     systemSmCoordCoordBlue : SystemSmCoordCoordBlue( systemSm );
     systemSmCoordCoordBlueBlueCoordEntBlueCoordEnt : SystemSmCoordCoordBlueBlueCoordEntBlueCoordEnt( systemSm , systemSmCoordCoordBlue );
     systemSmCoordCoordBlueBlueCoordExitBlueCoordExit : SystemSmCoordCoordBlueBlueCoordExitBlueCoordExit( systemSm , systemSmCoordCoordBlue );
     systemSmCoord : SystemSmCoord( systemSm );

-- This defines a NuSMV module for main --
MODULE main

   -- This part declares state variables for the given NuSMV module --
   VAR
     systemSm_Machine : SystemSm_Machine;

   -- The following properties are specified to certify that non-symbolic state(s) of this model is (or are) reachable. 
   CTLSPEC   EF( systemSm_Machine.systemSm.state = Sm_SingleLaneBridge )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeCar.state = SmBridgeCar_Car )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeCarRedCarRedA.state = SmBridgeCarRedCarRedA_RedA )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeCarRedCarRedARedA.state = SmBridgeCarRedCarRedARedA_waitRedA )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeCarRedCarRedARedA.state = SmBridgeCarRedCarRedARedA_onRedA )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeCarRedCarRedB.state = SmBridgeCarRedCarRedB_RedB )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeCarRedCarRedBRedB.state = SmBridgeCarRedCarRedBRedB_waitRedB )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeCarRedCarRedBRedB.state = SmBridgeCarRedCarRedBRedB_onRedB )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeCarRedCar.state = SmBridgeCarRedCar_RedCar )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeCarBlueCarBlueA.state = SmBridgeCarBlueCarBlueA_BlueA )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeCarBlueCarBlueABlueA.state = SmBridgeCarBlueCarBlueABlueA_waitBlueA )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeCarBlueCarBlueABlueA.state = SmBridgeCarBlueCarBlueABlueA_onBlueA )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeCarBlueCarBlueB.state = SmBridgeCarBlueCarBlueB_BlueB )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeCarBlueCarBlueBBlueB.state = SmBridgeCarBlueCarBlueBBlueB_waitBlueB )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeCarBlueCarBlueBBlueB.state = SmBridgeCarBlueCarBlueBBlueB_onBlueB )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeCarBlueCar.state = SmBridgeCarBlueCar_BlueCar )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeBridgeStatus.state = SmBridgeBridgeStatus_BridgeStatus )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeBridgeStatusBridgeStatus.state = SmBridgeBridgeStatusBridgeStatus_empty )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeBridgeStatusBridgeStatus.state = SmBridgeBridgeStatusBridgeStatus_oneRed )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeBridgeStatusBridgeStatus.state = SmBridgeBridgeStatusBridgeStatus_oneBlue )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeBridgeStatusBridgeStatus.state = SmBridgeBridgeStatusBridgeStatus_twoRed )
   CTLSPEC   EF( systemSm_Machine.systemSmBridgeBridgeStatusBridgeStatus.state = SmBridgeBridgeStatusBridgeStatus_twoBlue )
   CTLSPEC   EF( systemSm_Machine.systemSmBridge.state = SmBridge_Bridge )
   CTLSPEC   EF( systemSm_Machine.systemSmCoordCoordRed.state = SmCoordCoordRed_CoordRed )
   CTLSPEC   EF( systemSm_Machine.systemSmCoordCoordRedRedCoordEntRedCoordEnt.state = SmCoordCoordRedRedCoordEntRedCoordEnt_coordEntRedA )
   CTLSPEC   EF( systemSm_Machine.systemSmCoordCoordRedRedCoordEntRedCoordEnt.state = SmCoordCoordRedRedCoordEntRedCoordEnt_coordEntRedB )
   CTLSPEC   EF( systemSm_Machine.systemSmCoordCoordRedRedCoordExitRedCoordExit.state = SmCoordCoordRedRedCoordExitRedCoordExit_coordExitRedA )
   CTLSPEC   EF( systemSm_Machine.systemSmCoordCoordRedRedCoordExitRedCoordExit.state = SmCoordCoordRedRedCoordExitRedCoordExit_coordExitRedB )
   CTLSPEC   EF( systemSm_Machine.systemSmCoordCoordBlue.state = SmCoordCoordBlue_CoordBlue )
   CTLSPEC   EF( systemSm_Machine.systemSmCoordCoordBlueBlueCoordEntBlueCoordEnt.state = SmCoordCoordBlueBlueCoordEntBlueCoordEnt_coordEntBlueA )
   CTLSPEC   EF( systemSm_Machine.systemSmCoordCoordBlueBlueCoordEntBlueCoordEnt.state = SmCoordCoordBlueBlueCoordEntBlueCoordEnt_coordEntBlueB )
   CTLSPEC   EF( systemSm_Machine.systemSmCoordCoordBlueBlueCoordExitBlueCoordExit.state = SmCoordCoordBlueBlueCoordExitBlueCoordExit_coordExitBlueA )
   CTLSPEC   EF( systemSm_Machine.systemSmCoordCoordBlueBlueCoordExitBlueCoordExit.state = SmCoordCoordBlueBlueCoordExitBlueCoordExit_coordExitBlueB )
   CTLSPEC   EF( systemSm_Machine.systemSmCoord.state = SmCoord_Coord )