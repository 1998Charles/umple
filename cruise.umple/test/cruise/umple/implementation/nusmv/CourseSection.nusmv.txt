-- This file is generated from CourseSection.ump --

-- PLEASE DO NOT EDIT THIS CODE --
-- This code was generated using the UMPLE @UMPLE_VERSION@ modeling language! --


-- This defines a NuSMV module for Status --
MODULE Status

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { Status_Planned , Status_OpenNotEnoughStudents , Status_OpenEnoughStudents , Status_Cancelled , Status_Closed };
     event : { ev_cancel , ev_openRegistration , ev_requestToRegister , ev_closeRegistration , ev_classSizeExceedsMinimum , ev_classSizeExceedsMaximum , ev_null };

   -- This part defines macros that summarize the transitions and guards (if any) of the given NuSMV module --
   DEFINE
     status_stable :=  !( event = ev_cancel | event = ev_requestToRegister | event = ev_classSizeExceedsMinimum | event = ev_openRegistration | event = ev_closeRegistration | event = ev_classSizeExceedsMaximum );
     t1 := event = ev_cancel & state = Status_Planned;
     t2 := event = ev_openRegistration & state = Status_Planned;
     t3 := event = ev_requestToRegister & state = Status_OpenNotEnoughStudents;
     t4 := event = ev_closeRegistration & state = Status_OpenNotEnoughStudents;
     t5 := event = ev_cancel & state = Status_OpenNotEnoughStudents;
     t6 := event = ev_classSizeExceedsMinimum & state = Status_OpenNotEnoughStudents;
     t7 := event = ev_cancel & state = Status_OpenEnoughStudents;
     t8 := event = ev_requestToRegister & state = Status_OpenEnoughStudents;
     t9 := event = ev_closeRegistration & state = Status_OpenEnoughStudents;
     t10 := event = ev_classSizeExceedsMaximum & state = Status_OpenEnoughStudents;
     t11 := event = ev_cancel & state = Status_Closed;

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := Status_Planned;
     next( state ) := case
       t2 | t3 : Status_OpenNotEnoughStudents;
       t6 | t8 : Status_OpenEnoughStudents;
       t4 | t7 | t1 | t5 | t11 : Status_Cancelled;
       t9 | t10 : Status_Closed;
       TRUE : state;
     esac;

   -- This part defines logic for the assignment of values to state variable "event" of this NuSMV module --
   ASSIGN
     init( event ) := ev_null;
     next( event ) := case
       status_stable : { ev_cancel , ev_openRegistration , ev_requestToRegister , ev_closeRegistration , ev_classSizeExceedsMinimum , ev_classSizeExceedsMaximum };
       TRUE : ev_null;
     esac;

-- This defines a NuSMV module for main --
MODULE main

   -- This part declares state variables for the given NuSMV module --
   VAR
     status : Status;
CTLSPEC   EF( status.state = Status_Planned )
CTLSPEC   EF( status.state = Status_OpenNotEnoughStudents )
CTLSPEC   EF( status.state = Status_OpenEnoughStudents )
CTLSPEC   EF( status.state = Status_Cancelled )
CTLSPEC   EF( status.state = Status_Closed )
CTLSPEC   AG( status.t1 & status.t2 -> EX( status.state = Status_Cancelled & status.state = Status_OpenNotEnoughStudents ) )
CTLSPEC   AG( status.t5 & status.t6 -> EX( status.state = Status_Cancelled & status.state = Status_OpenEnoughStudents ) )
CTLSPEC   AG( status.t3 & status.t4 -> EX( status.state = Status_OpenNotEnoughStudents & status.state = Status_Cancelled ) )
CTLSPEC   AG( status.t3 & status.t5 -> EX( status.state = Status_OpenNotEnoughStudents & status.state = Status_Cancelled ) )
CTLSPEC   AG( status.t3 & status.t6 -> EX( status.state = Status_OpenNotEnoughStudents & status.state = Status_OpenEnoughStudents ) )
CTLSPEC   AG( status.t4 & status.t5 -> EX( status.state = Status_Cancelled & status.state = Status_Cancelled ) )
CTLSPEC   AG( status.t4 & status.t6 -> EX( status.state = Status_Cancelled & status.state = Status_OpenEnoughStudents ) )
CTLSPEC   AG( status.t8 & status.t9 -> EX( status.state = Status_OpenEnoughStudents & status.state = Status_Closed ) )
CTLSPEC   AG( status.t8 & status.t10 -> EX( status.state = Status_OpenEnoughStudents & status.state = Status_Closed ) )
CTLSPEC   AG( status.t9 & status.t10 -> EX( status.state = Status_Closed & status.state = Status_Closed ) )
CTLSPEC   AG( status.t7 & status.t8 -> EX( status.state = Status_Cancelled & status.state = Status_OpenEnoughStudents ) )
CTLSPEC   AG( status.t7 & status.t9 -> EX( status.state = Status_Cancelled & status.state = Status_Closed ) )
CTLSPEC   AG( status.t7 & status.t10 -> EX( status.state = Status_Cancelled & status.state = Status_Closed ) )