-- This file is generated from Elevator.ump --

MODULE Elevator_state_machine_Handle
  
  VAR 
    event : { upRequest , downRequest , started , doorClosed , approachingFloor , approachedFloor , stopped , doorOpened , timeoutAtFloorToDoorClosing , doorClosingRequest , doorCLosed , obstruction , doorOpeningRequest , noRequest };  
    
  
MODULE Elevator_state_machine( elevator_state_machinePrepareUp , elevator_state_machinePrepareDown , elevator_state_machineInMotion , elevator_state_machineOnFloor , handle )
  
  VAR 
    elevator_state_machine_state : { elevator_state_machine_Idle , elevator_state_machine_PrepareUp , elevator_state_machine_PrepareDown , elevator_state_machine_InMotion , elevator_state_machine_OnFloor };  
    
  ASSIGN
    init(elevator_state_machine_state) := elevator_state_machine_Idle;  
  
  TRANS
    ( (elevator_state_machine_state = elevator_state_machine_Idle) -> (
      (handle.event = upRequest & next(elevator_state_machine_state) = elevator_state_machine_PrepareUp)  |
      (handle.event = downRequest & next(elevator_state_machine_state) = elevator_state_machine_PrepareDown)  ) ) &
    ( (elevator_state_machine_state = elevator_state_machine_PrepareUp) -> ( next(elevator_state_machinePrepareUp.elevator_state_machinePrepareUp_state) = elevator_state_machinePrepareUp_DoorClosingMovingUp) ) &
    ( (elevator_state_machine_state = elevator_state_machine_PrepareDown) -> ( next(elevator_state_machinePrepareDown.elevator_state_machinePrepareDown_state) = elevator_state_machinePrepareDown_DoorClosingMovingDown) ) &
    ( (elevator_state_machine_state = elevator_state_machine_InMotion) -> ( next(elevator_state_machineInMotion.elevator_state_machineInMotion_state) = elevator_state_machineInMotion_Moving) ) &
    ( (elevator_state_machine_state = elevator_state_machine_OnFloor) -> ( next(elevator_state_machineOnFloor.elevator_state_machineOnFloor_state) = elevator_state_machineOnFloor_DoorOpening) )
  
MODULE Elevator_state_machinePrepareUp( elevator_state_machine , elevator_state_machinePrepareDown , elevator_state_machineInMotion , elevator_state_machineOnFloor , handle )
  
  VAR 
    elevator_state_machinePrepareUp_state : { elevator_state_machinePrepareUp_DoorClosingMovingUp , null };  
    
  ASSIGN
    init(elevator_state_machinePrepareUp_state) := null;  
  
  TRANS
    ( (elevator_state_machinePrepareUp_state = elevator_state_machinePrepareUp_DoorClosingMovingUp) -> (
      (handle.event = doorClosed & next(elevator_state_machine.elevator_state_machine_state) = elevator_state_machine_InMotion & next(elevator_state_machinePrepareUp_state) = null)  |
      (handle.event = started & next(elevator_state_machineInMotion.elevator_state_machineInMotion_state) = elevator_state_machineInMotion_Moving & next(elevator_state_machinePrepareUp_state) = null)  ) )
  
MODULE Elevator_state_machinePrepareDown( elevator_state_machine , elevator_state_machinePrepareUp , elevator_state_machineInMotion , elevator_state_machineOnFloor , handle )
  
  VAR 
    elevator_state_machinePrepareDown_state : { elevator_state_machinePrepareDown_DoorClosingMovingDown , null };  
    
  ASSIGN
    init(elevator_state_machinePrepareDown_state) := null;  
  
  TRANS
    ( (elevator_state_machinePrepareDown_state = elevator_state_machinePrepareDown_DoorClosingMovingDown) -> (
      (handle.event = doorClosed & next(elevator_state_machine.elevator_state_machine_state) = elevator_state_machine_InMotion & next(elevator_state_machinePrepareDown_state) = null)  |
      (handle.event = started & next(elevator_state_machineInMotion.elevator_state_machineInMotion_state) = elevator_state_machineInMotion_Moving & next(elevator_state_machinePrepareDown_state) = null)  ) )
  
MODULE Elevator_state_machineInMotion( elevator_state_machine , elevator_state_machinePrepareUp , elevator_state_machinePrepareDown , elevator_state_machineOnFloor , handle )
  
  VAR 
    elevator_state_machineInMotion_state : { elevator_state_machineInMotion_Moving , elevator_state_machineInMotion_Stopping , null };  
    
  ASSIGN
    init(elevator_state_machineInMotion_state) := null;  
  
  TRANS
    ( (elevator_state_machineInMotion_state = elevator_state_machineInMotion_Moving) -> (
      (handle.event = approachingFloor & next(elevator_state_machineInMotion_state) = elevator_state_machineInMotion_Moving)  |
      (handle.event = approachedFloor & next(elevator_state_machineInMotion_state) = elevator_state_machineInMotion_Stopping)  ) ) &
    ( (elevator_state_machineInMotion_state = elevator_state_machineInMotion_Stopping) -> (
       handle.event = stopped & next(elevator_state_machineOnFloor.elevator_state_machineOnFloor_state) = elevator_state_machineOnFloor_DoorOpening & next(elevator_state_machineInMotion_state) = null) )
  
MODULE Elevator_state_machineOnFloor( elevator_state_machine , elevator_state_machinePrepareUp , elevator_state_machinePrepareDown , elevator_state_machineInMotion , handle )
  
  VAR 
    elevator_state_machineOnFloor_state : { elevator_state_machineOnFloor_DoorOpening , elevator_state_machineOnFloor_AtFloor , elevator_state_machineOnFloor_DoorClosing , elevator_state_machineOnFloor_CheckingNextDestination , null };  
    
  ASSIGN
    init(elevator_state_machineOnFloor_state) := null;  
  
  TRANS
    ( (elevator_state_machineOnFloor_state = elevator_state_machineOnFloor_AtFloor) -> (
      (handle.event = timeoutAtFloorToDoorClosing & next(elevator_state_machineOnFloor_state) = elevator_state_machineOnFloor_DoorClosing)  |
      (handle.event = doorClosingRequest & next(elevator_state_machineOnFloor_state) = elevator_state_machineOnFloor_DoorClosing)  ) ) &
    ( (elevator_state_machineOnFloor_state = elevator_state_machineOnFloor_DoorClosing) -> (
      (handle.event = doorCLosed & next(elevator_state_machineOnFloor_state) = elevator_state_machineOnFloor_CheckingNextDestination)  |
      (handle.event = obstruction & next(elevator_state_machineOnFloor_state) = elevator_state_machineOnFloor_DoorOpening)  |
      (handle.event = doorOpeningRequest & next(elevator_state_machineOnFloor_state) = elevator_state_machineOnFloor_DoorOpening)  ) ) &
    ( (elevator_state_machineOnFloor_state = elevator_state_machineOnFloor_CheckingNextDestination) -> (
      (handle.event = upRequest & next(elevator_state_machine.elevator_state_machine_state) = elevator_state_machine_PrepareUp & next(elevator_state_machineOnFloor_state) = null)  |
      (handle.event = downRequest & next(elevator_state_machine.elevator_state_machine_state) = elevator_state_machine_PrepareDown & next(elevator_state_machineOnFloor_state) = null)  |
      (handle.event = noRequest & next(elevator_state_machine.elevator_state_machine_state) = elevator_state_machine_Idle & next(elevator_state_machineOnFloor_state) = null)  ) ) &
    ( (elevator_state_machineOnFloor_state = elevator_state_machineOnFloor_DoorOpening) -> (
       handle.event = doorOpened & next(elevator_state_machineOnFloor_state) = elevator_state_machineOnFloor_AtFloor) )
  
MODULE main
  
  VAR 
    handle : Elevator_state_machine_Handle;
    elevator_state_machine : Elevator_state_machine( elevator_state_machinePrepareUp , elevator_state_machinePrepareDown , elevator_state_machineInMotion , elevator_state_machineOnFloor , handle );
    elevator_state_machinePrepareUp : Elevator_state_machinePrepareUp( elevator_state_machine , elevator_state_machinePrepareDown , elevator_state_machineInMotion , elevator_state_machineOnFloor , handle );
    elevator_state_machinePrepareDown : Elevator_state_machinePrepareDown( elevator_state_machine , elevator_state_machinePrepareUp , elevator_state_machineInMotion , elevator_state_machineOnFloor , handle );
    elevator_state_machineInMotion : Elevator_state_machineInMotion( elevator_state_machine , elevator_state_machinePrepareUp , elevator_state_machinePrepareDown , elevator_state_machineOnFloor , handle );
    elevator_state_machineOnFloor : Elevator_state_machineOnFloor( elevator_state_machine , elevator_state_machinePrepareUp , elevator_state_machinePrepareDown , elevator_state_machineInMotion , handle ); 