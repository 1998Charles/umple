-- This file is generated from FurnaceControlSystem.ump --

-- PLEASE DO NOT EDIT THIS CODE --
-- This code was generated using the UMPLE @UMPLE_VERSION@ modeling language! --


-- This defines a NuSMV module for HeatSystem --
MODULE HeatSystem ( _heatSystemHouseRoom , _heatSystemHouseRoomRoom , _heatSystemHouseRoomRoomNoHeatReq , _heatSystemHouseRoomRoomHeatReq , _heatSystemHouseController , _heatSystemHouseControllerController , _heatSystemHouseControllerControllerControllerOn , _heatSystemHouseControllerControllerControllerOnHeaterActive , _heatSystemHouse , _heatSystemFurnaceFurnace , _heatSystemFurnaceFurnaceFurnaceNormal )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { HeatSystem_heatSys , null };
     event : { ev_t5 , ev_heatSwitchOn , ev_furnaceReset , ev_furnaceFault , ev_furnaceRunning , ev_deactivate , ev_t21 , ev_t20 , ev_heatSwitchOff , ev_t23 , ev_t22 , ev_t24 , ev_activate , ev_t15 , ev_userReset , ev_t18 , ev_t17 , ev_t19 , ev_null };
     tooCold : boolean;
     tooHot : boolean;
     requestHeat : boolean;
     furnaceTimer : integer;
     furnaceStartupTime : integer;
     valvePos : integer;
     waitedForWarm : integer;
     warmUpTimer : integer;
     coolDownTimer : integer;
     waitedForCool : integer;

   -- This part defines macros that summarize the transitions and guards (if any) of the given NuSMV module --
   DEFINE
     heatSystem_stable :=  !( event = ev_t5 | event = ev_furnaceReset | event = ev_furnaceRunning | event = ev_t21 | event = ev_heatSwitchOff | event = ev_t22 | event = ev_activate | event = ev_userReset | event = ev_t17 | event = ev_heatSwitchOn | event = ev_furnaceFault | event = ev_deactivate | event = ev_t20 | event = ev_t23 | event = ev_t24 | event = ev_t15 | event = ev_t18 | event = ev_t19 );
     t1 := event = ev_t15 & _heatSystemHouseRoomRoomNoHeatReq.state = HeatSystemHouseRoomRoomNoHeatReq_idleNoHeat & g1;
     t2 := event = ev_t17 & _heatSystemHouseRoomRoomNoHeatReq.state = HeatSystemHouseRoomRoomNoHeatReq_waitForHeat & g2;
     t3 := event = ev_t18 & _heatSystemHouseRoomRoomNoHeatReq.state = HeatSystemHouseRoomRoomNoHeatReq_waitForHeat & g3;
     t4 := event = ev_t15 & _heatSystemHouseRoomRoomNoHeatReq.state = HeatSystemHouseRoomRoomNoHeatReq_waitForHeat & g4;
     t5 := event = ev_t20 & _heatSystemHouseRoomRoomNoHeatReq.state = HeatSystemHouseRoomRoomNoHeatReq_waitForHeat & g5;
     t6 := event = ev_t21 & _heatSystemHouseRoomRoomHeatReq.state = HeatSystemHouseRoomRoomHeatReq_idleHeat & g6;
     t7 := event = ev_t19 & _heatSystemHouseRoomRoomHeatReq.state = HeatSystemHouseRoomRoomHeatReq_waitForCool & g7;
     t8 := event = ev_t22 & _heatSystemHouseRoomRoomHeatReq.state = HeatSystemHouseRoomRoomHeatReq_waitForCool & g8;
     t9 := event = ev_t24 & _heatSystemHouseRoomRoomHeatReq.state = HeatSystemHouseRoomRoomHeatReq_waitForCool & g9;
     t10 := event = ev_t23 & _heatSystemHouseRoomRoomHeatReq.state = HeatSystemHouseRoomRoomHeatReq_waitForCool & g10;
     t11 := event = ev_heatSwitchOn & _heatSystemHouseControllerController.state = HeatSystemHouseControllerController_off;
     t12 := event = ev_furnaceFault & _heatSystemHouseControllerController.state = HeatSystemHouseControllerController_ControllerOn;
     t13 := event = ev_heatSwitchOff & _heatSystemHouseControllerController.state = HeatSystemHouseControllerController_ControllerOn;
     t14 := event = ev_furnaceReset & _heatSystemHouseControllerController.state = HeatSystemHouseControllerController_error;
     t15 := event = ev_userReset & _heatSystemHouseControllerController.state = HeatSystemHouseControllerController_error;
     t16 := event = ev_activate & _heatSystemHouseControllerControllerControllerOn.state = HeatSystemHouseControllerControllerControllerOn_idle & g11;
     t17 := event = ev_deactivate & _heatSystemHouseControllerControllerControllerOn.state = HeatSystemHouseControllerControllerControllerOn_heaterActive & g12;
     t18 := event = ev_furnaceRunning & _heatSystemHouseControllerControllerControllerOnHeaterActive.state = HeatSystemHouseControllerControllerControllerOnHeaterActive_actHeater;
     t19 := event = ev_furnaceFault & _heatSystemFurnaceFurnace.state = HeatSystemFurnaceFurnace_furnaceNormal;
     t20 := event = ev_furnaceReset & _heatSystemFurnaceFurnace.state = HeatSystemFurnaceFurnace_furnaceErr;
     t21 := event = ev_activate & _heatSystemFurnaceFurnaceFurnaceNormal.state = HeatSystemFurnaceFurnaceFurnaceNormal_furnaceOff;
     t22 := event = ev_deactivate & _heatSystemFurnaceFurnaceFurnaceNormal.state = HeatSystemFurnaceFurnaceFurnaceNormal_furnaceRun;
     t23 := event = ev_deactivate & _heatSystemFurnaceFurnaceFurnaceNormal.state = HeatSystemFurnaceFurnaceFurnaceNormal_furnaceAct;
     t24 := event = ev_t5 & _heatSystemFurnaceFurnaceFurnaceNormal.state = HeatSystemFurnaceFurnaceFurnaceNormal_furnaceAct & g13;
     t25 := event = ev_furnaceRunning & _heatSystemFurnaceFurnaceFurnaceNormal.state = HeatSystemFurnaceFurnaceFurnaceNormal_furnaceAct & g14;
     g1 := tooCold;
     g2 := waitedForWarm < warmUpTimer;
     g3 := valvePos != 2 & warmUpTimer = waitedForWarm;
     g4 := !tooCold;
     g5 := waitedForwarm = warmUpTimer & valvePos = 2 & tooCold;
     g6 := tooHot;
     g7 := waitedForCool = coolDownTimer & valvePos = 0 & tooHot;
     g8 := !tooHot;
     g9 := valvePos != 0 & coolDownTimer = waitedForCool;
     g10 := waitedForCool < coolDownTimer;
     g11 := requestHeat = TRUE;
     g12 := requestHeat = FALSE;
     g13 := furnaceStartupTime < furnaceTimer;
     g14 := furnaceTimer = furnaceStartupTime;

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := HeatSystem_heatSys;
     next( state ) := case
       t4 | t2 | t5 | t6 | t10 | t14 | t11 | t16 | t12 | t22 | t25 | t24 | t7 | t1 | t3 | t8 | t9 | t13 | t15 | t17 | t18 | t20 | t23 | t21 | t19 : HeatSystem_heatSys;
       TRUE : state;
     esac;

   -- This part defines logic for the assignment of values to state variable "event" of this NuSMV module --
   ASSIGN
     init( event ) := ev_null;
     next( event ) := case
       heatSystem_stable : { ev_t5 , ev_heatSwitchOn , ev_furnaceReset , ev_furnaceFault , ev_furnaceRunning , ev_deactivate , ev_t21 , ev_t20 , ev_heatSwitchOff , ev_t23 , ev_t22 , ev_t24 , ev_activate , ev_t15 , ev_userReset , ev_t18 , ev_t17 , ev_t19 };
       TRUE : ev_null;
     esac;

   -- This part defines logic for the assignment of values to state variable "tooCold" of this NuSMV module --
   ASSIGN
     init( tooCold ) := FALSE;

   -- This part defines logic for the assignment of values to state variable "tooHot" of this NuSMV module --
   ASSIGN
     init( tooHot ) := FALSE;

   -- This part defines logic for the assignment of values to state variable "requestHeat" of this NuSMV module --
   ASSIGN
     init( requestHeat ) := FALSE;

   -- This part defines logic for the assignment of values to state variable "furnaceTimer" of this NuSMV module --
   ASSIGN
     init( furnaceTimer ) := 0;

   -- This part defines logic for the assignment of values to state variable "furnaceStartupTime" of this NuSMV module --
   ASSIGN
     init( furnaceStartupTime ) := 0;

   -- This part defines logic for the assignment of values to state variable "valvePos" of this NuSMV module --
   ASSIGN
     init( valvePos ) := 0;

   -- This part defines logic for the assignment of values to state variable "waitedForWarm" of this NuSMV module --
   ASSIGN
     init( waitedForWarm ) := 0;

   -- This part defines logic for the assignment of values to state variable "warmUpTimer" of this NuSMV module --
   ASSIGN
     init( warmUpTimer ) := 0;

   -- This part defines logic for the assignment of values to state variable "coolDownTimer" of this NuSMV module --
   ASSIGN
     init( coolDownTimer ) := 0;

   -- This part defines logic for the assignment of values to state variable "waitedForCool" of this NuSMV module --
   ASSIGN
     init( waitedForCool ) := 0;

-- This defines a NuSMV module for HeatSystemHouseRoom --
MODULE HeatSystemHouseRoom ( _heatSystem )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { HeatSystemHouseRoom_room , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _heatSystem.t7 | _heatSystem.t1 | _heatSystem.t3 | _heatSystem.t8 | _heatSystem.t9 | _heatSystem.t4 | _heatSystem.t2 | _heatSystem.t5 | _heatSystem.t6 | _heatSystem.t10 : HeatSystemHouseRoom_room;
       _heatSystem.state = HeatSystem_heatSys & state = null : HeatSystemHouseRoom_room;
       TRUE : state;
     esac;

-- This defines a NuSMV module for HeatSystemHouseRoomRoom --
MODULE HeatSystemHouseRoomRoom ( _heatSystem , _heatSystemHouse )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { HeatSystemHouseRoomRoom_noHeatReq , HeatSystemHouseRoomRoom_heatReq , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _heatSystem.t4 | _heatSystem.t2 | _heatSystem.t7 | _heatSystem.t1 | _heatSystem.t3 : HeatSystemHouseRoomRoom_noHeatReq;
       _heatSystem.t8 | _heatSystem.t9 | _heatSystem.t5 | _heatSystem.t6 | _heatSystem.t10 : HeatSystemHouseRoomRoom_heatReq;
       _heatSystemHouse.state = HeatSystemHouse_house & state = null : HeatSystemHouseRoomRoom_noHeatReq;
       TRUE : state;
     esac;

-- This defines a NuSMV module for HeatSystemHouseRoomRoomNoHeatReq --
MODULE HeatSystemHouseRoomRoomNoHeatReq ( _heatSystem , _heatSystemHouseRoomRoom )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { HeatSystemHouseRoomRoomNoHeatReq_idleNoHeat , HeatSystemHouseRoomRoomNoHeatReq_waitForHeat , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _heatSystem.t5 | _heatSystem.t7 | _heatSystem.t9 | _heatSystem.t6 | _heatSystem.t8 | _heatSystem.t10 : null;
       _heatSystem.t4 : HeatSystemHouseRoomRoomNoHeatReq_idleNoHeat;
       _heatSystem.t2 | _heatSystem.t1 | _heatSystem.t3 : HeatSystemHouseRoomRoomNoHeatReq_waitForHeat;
       _heatSystemHouseRoomRoom.state = HeatSystemHouseRoomRoom_noHeatReq & state = null : HeatSystemHouseRoomRoomNoHeatReq_idleNoHeat;
       TRUE : state;
     esac;

-- This defines a NuSMV module for HeatSystemHouseRoomRoomHeatReq --
MODULE HeatSystemHouseRoomRoomHeatReq ( _heatSystem , _heatSystemHouseRoomRoom )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { HeatSystemHouseRoomRoomHeatReq_idleHeat , HeatSystemHouseRoomRoomHeatReq_waitForCool , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _heatSystem.t1 | _heatSystem.t3 | _heatSystem.t5 | _heatSystem.t2 | _heatSystem.t4 | _heatSystem.t7 : null;
       _heatSystem.t8 : HeatSystemHouseRoomRoomHeatReq_idleHeat;
       _heatSystem.t9 | _heatSystem.t6 | _heatSystem.t10 : HeatSystemHouseRoomRoomHeatReq_waitForCool;
       _heatSystemHouseRoomRoom.state = HeatSystemHouseRoomRoom_heatReq & state = null : HeatSystemHouseRoomRoomHeatReq_idleHeat;
       TRUE : state;
     esac;

-- This defines a NuSMV module for HeatSystemHouseController --
MODULE HeatSystemHouseController ( _heatSystem )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { HeatSystemHouseController_Controller , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _heatSystem.t13 | _heatSystem.t15 | _heatSystem.t17 | _heatSystem.t18 | _heatSystem.t14 | _heatSystem.t11 | _heatSystem.t16 | _heatSystem.t12 : HeatSystemHouseController_Controller;
       _heatSystem.state = HeatSystem_heatSys & state = null : HeatSystemHouseController_Controller;
       TRUE : state;
     esac;

-- This defines a NuSMV module for HeatSystemHouseControllerController --
MODULE HeatSystemHouseControllerController ( _heatSystem , _heatSystemHouse )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { HeatSystemHouseControllerController_off , HeatSystemHouseControllerController_ControllerOn , HeatSystemHouseControllerController_error , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _heatSystem.t14 | _heatSystem.t13 | _heatSystem.t15 : HeatSystemHouseControllerController_off;
       _heatSystem.t11 | _heatSystem.t16 | _heatSystem.t17 | _heatSystem.t18 : HeatSystemHouseControllerController_ControllerOn;
       _heatSystem.t12 : HeatSystemHouseControllerController_error;
       _heatSystemHouse.state = HeatSystemHouse_house & state = null : HeatSystemHouseControllerController_off;
       TRUE : state;
     esac;

-- This defines a NuSMV module for HeatSystemHouseControllerControllerControllerOn --
MODULE HeatSystemHouseControllerControllerControllerOn ( _heatSystem , _heatSystemHouseControllerController )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { HeatSystemHouseControllerControllerControllerOn_idle , HeatSystemHouseControllerControllerControllerOn_heaterActive , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _heatSystem.t11 | _heatSystem.t13 | _heatSystem.t15 | _heatSystem.t12 | _heatSystem.t14 | _heatSystem.t16 : null;
       _heatSystem.t17 : HeatSystemHouseControllerControllerControllerOn_idle;
       _heatSystem.t16 | _heatSystem.t18 : HeatSystemHouseControllerControllerControllerOn_heaterActive;
       _heatSystemHouseControllerController.state = HeatSystemHouseControllerController_ControllerOn & state = null : HeatSystemHouseControllerControllerControllerOn_idle;
       TRUE : state;
     esac;

-- This defines a NuSMV module for HeatSystemHouseControllerControllerControllerOnHeaterActive --
MODULE HeatSystemHouseControllerControllerControllerOnHeaterActive ( _heatSystem , _heatSystemHouseControllerControllerControllerOn )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { HeatSystemHouseControllerControllerControllerOnHeaterActive_actHeater , HeatSystemHouseControllerControllerControllerOnHeaterActive_heaterRun , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _heatSystem.t16 | _heatSystem.t17 : null;
       _heatSystem.t18 : HeatSystemHouseControllerControllerControllerOnHeaterActive_heaterRun;
       _heatSystemHouseControllerControllerControllerOn.state = HeatSystemHouseControllerControllerControllerOn_heaterActive & state = null : HeatSystemHouseControllerControllerControllerOnHeaterActive_actHeater;
       TRUE : state;
     esac;

-- This defines a NuSMV module for HeatSystemHouse --
MODULE HeatSystemHouse ( _heatSystem )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { HeatSystemHouse_house , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _heatSystem.t7 | _heatSystem.t1 | _heatSystem.t3 | _heatSystem.t8 | _heatSystem.t9 | _heatSystem.t13 | _heatSystem.t15 | _heatSystem.t17 | _heatSystem.t18 | _heatSystem.t4 | _heatSystem.t2 | _heatSystem.t5 | _heatSystem.t6 | _heatSystem.t10 | _heatSystem.t14 | _heatSystem.t11 | _heatSystem.t16 | _heatSystem.t12 : HeatSystemHouse_house;
       _heatSystem.state = HeatSystem_heatSys & state = null : HeatSystemHouse_house;
       TRUE : state;
     esac;

-- This defines a NuSMV module for HeatSystemFurnaceFurnace --
MODULE HeatSystemFurnaceFurnace ( _heatSystem )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { HeatSystemFurnaceFurnace_furnaceNormal , HeatSystemFurnaceFurnace_furnaceErr , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _heatSystem.t20 | _heatSystem.t23 | _heatSystem.t21 | _heatSystem.t22 | _heatSystem.t25 | _heatSystem.t24 : HeatSystemFurnaceFurnace_furnaceNormal;
       _heatSystem.t19 : HeatSystemFurnaceFurnace_furnaceErr;
       _heatSystem.state = HeatSystem_heatSys & state = null : HeatSystemFurnaceFurnace_furnaceNormal;
       TRUE : state;
     esac;

-- This defines a NuSMV module for HeatSystemFurnaceFurnaceFurnaceNormal --
MODULE HeatSystemFurnaceFurnaceFurnaceNormal ( _heatSystem , _heatSystemFurnaceFurnace )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { HeatSystemFurnaceFurnaceFurnaceNormal_furnaceOff , HeatSystemFurnaceFurnaceFurnaceNormal_furnaceRun , HeatSystemFurnaceFurnaceFurnaceNormal_furnaceAct , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _heatSystem.t19 | _heatSystem.t20 : null;
       _heatSystem.t22 | _heatSystem.t23 : HeatSystemFurnaceFurnaceFurnaceNormal_furnaceOff;
       _heatSystem.t25 : HeatSystemFurnaceFurnaceFurnaceNormal_furnaceRun;
       _heatSystem.t21 | _heatSystem.t24 : HeatSystemFurnaceFurnaceFurnaceNormal_furnaceAct;
       _heatSystemFurnaceFurnace.state = HeatSystemFurnaceFurnace_furnaceNormal & state = null : HeatSystemFurnaceFurnaceFurnaceNormal_furnaceOff;
       TRUE : state;
     esac;

-- This defines a NuSMV module for main --
MODULE main

   -- This part declares state variables for the given NuSMV module --
   VAR
     heatSystem : HeatSystem( heatSystemHouseRoom , heatSystemHouseRoomRoom , heatSystemHouseRoomRoomNoHeatReq , heatSystemHouseRoomRoomHeatReq , heatSystemHouseController , heatSystemHouseControllerController , heatSystemHouseControllerControllerControllerOn , heatSystemHouseControllerControllerControllerOnHeaterActive , heatSystemHouse , heatSystemFurnaceFurnace , heatSystemFurnaceFurnaceFurnaceNormal );
     heatSystemHouseRoom : HeatSystemHouseRoom( heatSystem );
     heatSystemHouseRoomRoom : HeatSystemHouseRoomRoom( heatSystem , heatSystemHouse );
     heatSystemHouseRoomRoomNoHeatReq : HeatSystemHouseRoomRoomNoHeatReq( heatSystem , heatSystemHouseRoomRoom );
     heatSystemHouseRoomRoomHeatReq : HeatSystemHouseRoomRoomHeatReq( heatSystem , heatSystemHouseRoomRoom );
     heatSystemHouseController : HeatSystemHouseController( heatSystem );
     heatSystemHouseControllerController : HeatSystemHouseControllerController( heatSystem , heatSystemHouse );
     heatSystemHouseControllerControllerControllerOn : HeatSystemHouseControllerControllerControllerOn( heatSystem , heatSystemHouseControllerController );
     heatSystemHouseControllerControllerControllerOnHeaterActive : HeatSystemHouseControllerControllerControllerOnHeaterActive( heatSystem , heatSystemHouseControllerControllerControllerOn );
     heatSystemHouse : HeatSystemHouse( heatSystem );
     heatSystemFurnaceFurnace : HeatSystemFurnaceFurnace( heatSystem );
     heatSystemFurnaceFurnaceFurnaceNormal : HeatSystemFurnaceFurnaceFurnaceNormal( heatSystem , heatSystemFurnaceFurnace );
CTLSPEC   EF( heatSystem.state = HeatSystem_heatSys )
CTLSPEC   EF( heatSystemHouseRoom.state = HeatSystemHouseRoom_room )
CTLSPEC   EF( heatSystemHouseRoomRoom.state = HeatSystemHouseRoomRoom_noHeatReq )
CTLSPEC   EF( heatSystemHouseRoomRoom.state = HeatSystemHouseRoomRoom_heatReq )
CTLSPEC   EF( heatSystemHouseRoomRoomNoHeatReq.state = HeatSystemHouseRoomRoomNoHeatReq_idleNoHeat )
CTLSPEC   EF( heatSystemHouseRoomRoomNoHeatReq.state = HeatSystemHouseRoomRoomNoHeatReq_waitForHeat )
CTLSPEC   EF( heatSystemHouseRoomRoomHeatReq.state = HeatSystemHouseRoomRoomHeatReq_idleHeat )
CTLSPEC   EF( heatSystemHouseRoomRoomHeatReq.state = HeatSystemHouseRoomRoomHeatReq_waitForCool )
CTLSPEC   EF( heatSystemHouseController.state = HeatSystemHouseController_Controller )
CTLSPEC   EF( heatSystemHouseControllerController.state = HeatSystemHouseControllerController_off )
CTLSPEC   EF( heatSystemHouseControllerController.state = HeatSystemHouseControllerController_ControllerOn )
CTLSPEC   EF( heatSystemHouseControllerController.state = HeatSystemHouseControllerController_error )
CTLSPEC   EF( heatSystemHouseControllerControllerControllerOn.state = HeatSystemHouseControllerControllerControllerOn_idle )
CTLSPEC   EF( heatSystemHouseControllerControllerControllerOn.state = HeatSystemHouseControllerControllerControllerOn_heaterActive )
CTLSPEC   EF( heatSystemHouseControllerControllerControllerOnHeaterActive.state = HeatSystemHouseControllerControllerControllerOnHeaterActive_actHeater )
CTLSPEC   EF( heatSystemHouseControllerControllerControllerOnHeaterActive.state = HeatSystemHouseControllerControllerControllerOnHeaterActive_heaterRun )
CTLSPEC   EF( heatSystemHouse.state = HeatSystemHouse_house )
CTLSPEC   EF( heatSystemFurnaceFurnace.state = HeatSystemFurnaceFurnace_furnaceNormal )
CTLSPEC   EF( heatSystemFurnaceFurnace.state = HeatSystemFurnaceFurnace_furnaceErr )
CTLSPEC   EF( heatSystemFurnaceFurnaceFurnaceNormal.state = HeatSystemFurnaceFurnaceFurnaceNormal_furnaceOff )
CTLSPEC   EF( heatSystemFurnaceFurnaceFurnaceNormal.state = HeatSystemFurnaceFurnaceFurnaceNormal_furnaceRun )
CTLSPEC   EF( heatSystemFurnaceFurnaceFurnaceNormal.state = HeatSystemFurnaceFurnaceFurnaceNormal_furnaceAct )