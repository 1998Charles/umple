-- This file is generated from DigitalWatchFlat.ump --


MODULE Sm
  
  VAR 
    state : { sm_time , sm_date , sm_paused , sm_running , sm_lapRunning , sm_lapPaused , sm_bothOff , sm_chimeOn , sm_bothOn , sm_alarmOn , sm_alarmTime , sm_alarmHour , sm_alarmMinute , sm_second , sm_minute , sm_hour , sm_month , sm_day , sm_year }; 
    event : { s1 , s2 , s3 , s3during2Secs , notS1 , notS2 };      
  ASSIGN
    init(state) := sm_time;    
  TRANS
    ( (state = sm_time) -> (
      (event = s1 & next(state) = sm_date)  |
      (event = s2 & next(state) = sm_bothOff)  |
      (event = s3 & next(state) = sm_paused)  |
      (event = s3during2Secs & next(state) = sm_alarmTime)  ) ) &
    ( (state = sm_paused) -> (
      (event = s1 & next(state) = sm_running)  |
      (event = s2 & next(state) = sm_paused)  |
      (event = s3 & next(state) = sm_time)  ) ) &
    ( (state = sm_running) -> (
      (event = s1 & next(state) = sm_paused)  |
      (event = s2 & next(state) = sm_lapRunning)  |
      (event = s3 & next(state) = sm_time)  ) ) &
    ( (state = sm_lapRunning) -> (
      (event = s1 & next(state) = sm_lapPaused)  |
      (event = s2 & next(state) = sm_running)  |
      (event = s3 & next(state) = sm_time)  ) ) &
    ( (state = sm_lapPaused) -> (
      (event = s1 & next(state) = sm_lapRunning)  |
      (event = s2 & next(state) = sm_paused)  |
      (event = s3 & next(state) = sm_time)  ) ) &
    ( (state = sm_bothOff) -> (
      (event = notS2 & next(state) = sm_time)  |
      (event = s1 & next(state) = sm_chimeOn)  ) ) &
    ( (state = sm_chimeOn) -> (
      (event = notS2 & next(state) = sm_time)  |
      (event = s1 & next(state) = sm_bothOn)  ) ) &
    ( (state = sm_bothOn) -> (
      (event = notS2 & next(state) = sm_time)  |
      (event = s1 & next(state) = sm_alarmOn)  ) ) &
    ( (state = sm_alarmOn) -> (
      (event = s1 & next(state) = sm_bothOff)  |
      (event = notS2 & next(state) = sm_time)  ) ) &
    ( (state = sm_alarmTime) -> (
      (event = s1 & next(state) = sm_alarmMinute)  |
      (event = s2 & next(state) = sm_alarmHour)  |
      (event = s3 & next(state) = sm_second)  ) ) &
    ( (state = sm_alarmHour) -> (
      (event = s1 & next(state) = sm_alarmMinute)  |
      (event = s2 & next(state) = sm_alarmHour)  |
      (event = s3 & next(state) = sm_second)  ) ) &
    ( (state = sm_alarmMinute) -> (
      (event = s1 & next(state) = sm_alarmHour)  |
      (event = s2 & next(state) = sm_alarmMinute)  |
      (event = s3 & next(state) = sm_second)  ) ) &
    ( (state = sm_second) -> (
      (event = s1 & next(state) = sm_minute)  |
      (event = s2 & next(state) = sm_second)  |
      (event = s3 & next(state) = sm_time)  ) ) &
    ( (state = sm_minute) -> (
      (event = s1 & next(state) = sm_hour)  |
      (event = s2 & next(state) = sm_minute)  |
      (event = s3 & next(state) = sm_time)  ) ) &
    ( (state = sm_hour) -> (
      (event = s1 & next(state) = sm_month)  |
      (event = s2 & next(state) = sm_hour)  |
      (event = s3 & next(state) = sm_time)  ) ) &
    ( (state = sm_month) -> (
      (event = s1 & next(state) = sm_day)  |
      (event = s2 & next(state) = sm_month)  |
      (event = s3 & next(state) = sm_time)  ) ) &
    ( (state = sm_day) -> (
      (event = s1 & next(state) = sm_year)  |
      (event = s2 & next(state) = sm_day)  |
      (event = s3 & next(state) = sm_time)  ) ) &
    ( (state = sm_year) -> (
      (event = s1 & next(state) = sm_second)  |
      (event = s2 & next(state) = sm_year)  |
      (event = s3 & next(state) = sm_time)  ) ) &
    ( (state = sm_date) -> (
       event = notS1 & next(state) = sm_time) )
  
MODULE main
  
  VAR 
    sm : Sm;     
  
