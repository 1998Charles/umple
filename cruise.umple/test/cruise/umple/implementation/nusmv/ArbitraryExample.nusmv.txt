-- This file is generated from ArbitraryExample.ump --

-- PLEASE DO NOT EDIT THIS CODE --
-- This code was generated using the UMPLE @UMPLE_VERSION@ modeling language! --


-- This defines a NuSMV module for Sm --
MODULE Sm ( _smAA , _smBB , _smCC )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { Sm_s1 , Sm_s2 };
     event : { ev_e1 , ev_e2 , ev_null };

   -- This part defines macros that summarize the transitions and guards (if any) of the given NuSMV module --
   DEFINE
     Sm_stable :=  !( event = ev_e1 | event = ev_e2 );
     t1 := event = ev_e1 & state = Sm_s1;
     t2 := event = ev_e1 & _smAA.state = SmAA_a1;
     t3 := event = ev_e2 & _smAA.state = SmAA_a1;
     t4 := event = ev_e1 & _smAA.state = SmAA_a2;
     t5 := event = ev_e2 & _smAA.state = SmAA_a2;
     t6 := event = ev_e1 & _smAA.state = SmAA_a3;
     t7 := event = ev_e2 & _smBB.state = SmBB_b1;
     t8 := event = ev_e1 & _smBB.state = SmBB_b1;
     t9 := event = ev_e1 & _smBB.state = SmBB_b2;
     t10 := event = ev_e1 & _smBB.state = SmBB_b3;
     t11 := event = ev_e1 & _smBB.state = SmBB_b4;
     t12 := event = ev_e2 & _smBB.state = SmBB_b4;
     t13 := event = ev_e1 & _smCC.state = SmCC_c1;
     t14 := event = ev_e2 & _smCC.state = SmCC_c1;
     t15 := event = ev_e1 & _smCC.state = SmCC_c3;
     t16 := event = ev_e2 & _smCC.state = SmCC_c3;
     t17 := event = ev_e1 & _smCC.state = SmCC_c4;
     t18 := event = ev_e2 & _smCC.state = SmCC_c4;

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := Sm_s1;
     next( state ) := case
       t5 : Sm_s1;
       t6 | t4 | t9 | t12 | t11 | t14 | t17 | t13 | t2 | t3 | t18 | t8 | t7 | t10 | t15 | t1 | t16 : Sm_s2;
       TRUE : state;
     esac;

   -- This part defines logic for the assignment of values to state variable "event" of this NuSMV module --
   ASSIGN
     init( event ) := ev_null;
     next( event ) := case
       Sm_stable : { ev_e1 , ev_e2 };
       TRUE : ev_null;
     esac;

-- This defines a NuSMV module for SmAA --
MODULE SmAA ( _sm )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmAA_a1 , SmAA_a2 , SmAA_a3 , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t5 : null;
       _sm.t2 | _sm.t6 : SmAA_a2;
       _sm.t4 | _sm.t3 | _sm.t18 : SmAA_a3;
       _sm.state = Sm_s2 & state = null : SmAA_a1;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SmBB --
MODULE SmBB ( _sm )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmBB_b1 , SmBB_b2 , SmBB_b3 , SmBB_b4 , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t5 | _sm.t18 : null;
       _sm.t9 : SmBB_b1;
       _sm.t8 | _sm.t12 : SmBB_b2;
       _sm.t7 | _sm.t11 : SmBB_b3;
       _sm.t10 : SmBB_b4;
       _sm.state = Sm_s2 & state = null : SmBB_b1;
       TRUE : state;
     esac;

-- This defines a NuSMV module for SmCC --
MODULE SmCC ( _sm )

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmCC_c1 , SmCC_c2 , SmCC_c3 , SmCC_c4 , null };

   -- This part defines logic for the assignment of values to state variable "state" of this NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t5 | _sm.t18 : null;
       _sm.t15 | _sm.t14 | _sm.t17 : SmCC_c2;
       _sm.t1 | _sm.t13 : SmCC_c3;
       _sm.t16 : SmCC_c4;
       _sm.state = Sm_s2 & state = null : SmCC_c1;
       TRUE : state;
     esac;

-- This defines a NuSMV module for main --
MODULE main

   -- This part declares state variables for the given NuSMV module --
   VAR
     sm : Sm( smAA , smBB , smCC );
     smAA : SmAA( sm );
     smBB : SmBB( sm );
     smCC : SmCC( sm );
CTLSPEC   EF( sm.state = Sm_s1 )
CTLSPEC   EF( sm.state = Sm_s2 )
CTLSPEC   EF( smAA.state = SmAA_a1 )
CTLSPEC   EF( smAA.state = SmAA_a2 )
CTLSPEC   EF( smAA.state = SmAA_a3 )
CTLSPEC   EF( smBB.state = SmBB_b1 )
CTLSPEC   EF( smBB.state = SmBB_b2 )
CTLSPEC   EF( smBB.state = SmBB_b3 )
CTLSPEC   EF( smBB.state = SmBB_b4 )
CTLSPEC   EF( smCC.state = SmCC_c1 )
CTLSPEC   EF( smCC.state = SmCC_c2 )
CTLSPEC   EF( smCC.state = SmCC_c3 )
CTLSPEC   EF( smCC.state = SmCC_c4 )
CTLSPEC   AG( sm.t18 & sm.t2 -> EX( smAA.state = SmAA_a3 & smAA.state = SmAA_a2 ) )
CTLSPEC   AG( sm.t18 & sm.t3 -> EX( smAA.state = SmAA_a3 & smAA.state = SmAA_a3 ) )
CTLSPEC   AG( sm.t18 & sm.t4 -> EX( smAA.state = SmAA_a3 & smAA.state = SmAA_a3 ) )
CTLSPEC   AG( sm.t18 & sm.t6 -> EX( smAA.state = SmAA_a3 & smAA.state = SmAA_a2 ) )
CTLSPEC   AG( sm.t18 & sm.t7 -> EX( smAA.state = SmAA_a3 & smBB.state = SmBB_b3 ) )
CTLSPEC   AG( sm.t18 & sm.t8 -> EX( smAA.state = SmAA_a3 & smBB.state = SmBB_b2 ) )
CTLSPEC   AG( sm.t18 & sm.t9 -> EX( smAA.state = SmAA_a3 & smBB.state = SmBB_b1 ) )
CTLSPEC   AG( sm.t18 & sm.t10 -> EX( smAA.state = SmAA_a3 & smBB.state = SmBB_b4 ) )
CTLSPEC   AG( sm.t18 & sm.t11 -> EX( smAA.state = SmAA_a3 & smBB.state = SmBB_b3 ) )
CTLSPEC   AG( sm.t18 & sm.t12 -> EX( smAA.state = SmAA_a3 & smBB.state = SmBB_b2 ) )
CTLSPEC   AG( sm.t17 & sm.t18 -> EX( smCC.state = SmCC_c2 & smAA.state = SmAA_a3 ) )
CTLSPEC   AG( sm.t4 & sm.t5 -> EX( smAA.state = SmAA_a3 & sm.state = Sm_s1 ) )
CTLSPEC   AG( sm.t11 & sm.t12 -> EX( smBB.state = SmBB_b3 & smBB.state = SmBB_b2 ) )
CTLSPEC   AG( sm.t15 & sm.t16 -> EX( smCC.state = SmCC_c2 & smCC.state = SmCC_c4 ) )
CTLSPEC   AG( sm.t13 & sm.t14 -> EX( smCC.state = SmCC_c3 & smCC.state = SmCC_c2 ) )
CTLSPEC   AG( sm.t7 & sm.t8 -> EX( smBB.state = SmBB_b3 & smBB.state = SmBB_b2 ) )
CTLSPEC   AG( sm.t5 & sm.t7 -> EX( sm.state = Sm_s1 & smBB.state = SmBB_b3 ) )
CTLSPEC   AG( sm.t5 & sm.t8 -> EX( sm.state = Sm_s1 & smBB.state = SmBB_b2 ) )
CTLSPEC   AG( sm.t5 & sm.t9 -> EX( sm.state = Sm_s1 & smBB.state = SmBB_b1 ) )
CTLSPEC   AG( sm.t5 & sm.t10 -> EX( sm.state = Sm_s1 & smBB.state = SmBB_b4 ) )
CTLSPEC   AG( sm.t5 & sm.t11 -> EX( sm.state = Sm_s1 & smBB.state = SmBB_b3 ) )
CTLSPEC   AG( sm.t5 & sm.t12 -> EX( sm.state = Sm_s1 & smBB.state = SmBB_b2 ) )
CTLSPEC   AG( sm.t5 & sm.t13 -> EX( sm.state = Sm_s1 & smCC.state = SmCC_c3 ) )
CTLSPEC   AG( sm.t5 & sm.t14 -> EX( sm.state = Sm_s1 & smCC.state = SmCC_c2 ) )
CTLSPEC   AG( sm.t5 & sm.t15 -> EX( sm.state = Sm_s1 & smCC.state = SmCC_c2 ) )
CTLSPEC   AG( sm.t5 & sm.t16 -> EX( sm.state = Sm_s1 & smCC.state = SmCC_c4 ) )
CTLSPEC   AG( sm.t5 & sm.t17 -> EX( sm.state = Sm_s1 & smCC.state = SmCC_c2 ) )
CTLSPEC   AG( sm.t5 & sm.t18 -> EX( sm.state = Sm_s1 & smAA.state = SmAA_a3 ) )
CTLSPEC   AG( sm.t2 & sm.t3 -> EX( smAA.state = SmAA_a2 & smAA.state = SmAA_a3 ) )