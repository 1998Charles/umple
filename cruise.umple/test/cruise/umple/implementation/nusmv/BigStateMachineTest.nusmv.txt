-- This file is generated from BigStateMachineTest.ump --

 -- This defines a NuSMV module for Sm --
 MODULE Sm ( _smZxab , _smZxabZx , _smGe ) 

   -- This part declares input variables for the given NuSMV module --
   IVAR
     event : { e5 , e2 , e3 , e1 , e4 };
    
   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { Zxab , D , Ge };
    
   -- This part defines macros that summarize the transitions of the given NuSMV module --
   DEFINE
     t1 := event = e5 & state = D;
     t2 := event = e2 & state = D;
     t3 := event = e5 & _smZxab.state = A;
     t4 := event = e3 & _smZxab.state = A;
     t5 := event = e1 & _smZxab.state = A;
     t6 := event = e4 & _smZxab.state = A;
     t7 := event = e3 & _smZxab.state = B;
     t8 := event = e1 & _smZxab.state = B;
     t9 := event = e4 & _smZxab.state = B;
     t10 := event = e3 & _smZxabZx.state = Z;
     t11 := event = e2 & _smZxabZx.state = Z;
     t12 := event = e5 & _smZxabZx.state = Z;
     t13 := event = e1 & _smZxabZx.state = Z;
     t14 := event = e4 & _smZxabZx.state = Z;
     t15 := event = e5 & _smZxabZx.state = X;
     t16 := event = e1 & _smZxabZx.state = X;
     t17 := event = e4 & _smZxabZx.state = X;
     t18 := event = e1 & _smGe.state = G;
     t19 := event = e1 & _smGe.state = E;
     t20 := event = e2 & _smGe.state = E;
  
   -- This part defines the transitions from states to states for the given NuSMV module --
   ASSIGN
     init( state ) := Zxab;
     next( state ) := case
       t1 | t4 | t10 | t11 | t18 : Zxab;
       t3 : D;
       t12 | t19 | t14 | t6 | t9 | t16 | t8 | t15 | t20 | t17 | t7 | t13 | t5 | t2 : Ge;
       TRUE : state;
     esac;
 
   
 -- This defines a NuSMV module for SmZxab --
 MODULE SmZxab ( _sm , _smZxabZx , _smGe ) 

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { Zx , A , B , null };
    
   -- This part defines the transitions from states to states for the given NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t1 | _sm.t10 | _sm.state = Zxab : Zx;
       _sm.t11 : A;
       _sm.t4 | _sm.t18 : B;
       TRUE : state;
     esac;
 
   
 -- This defines a NuSMV module for SmZxabZx --
 MODULE SmZxabZx ( _sm , _smZxab , _smGe ) 

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { Z , X , null };
    
   -- This part defines the transitions from states to states for the given NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _smZxab.state = Zx : Z;
       _sm.t10 | _sm.t1 : X;
       TRUE : state;
     esac;
 
   
 -- This defines a NuSMV module for SmGe --
 MODULE SmGe ( _sm , _smZxab , _smZxabZx ) 

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { G , E , null };
    
   -- This part defines the transitions from states to states for the given NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t12 | _sm.t19 | _sm.t14 | _sm.t6 | _sm.t9 | _sm.t15 | _sm.t20 | _sm.t17 | _sm.t7 | _sm.state = Ge : G;
       _sm.t16 | _sm.t8 | _sm.t13 | _sm.t5 | _sm.t2 : E;
       TRUE : state;
     esac;
 
   
 -- This defines a NuSMV module for main --
 MODULE main

   -- This part declares state variables for the given NuSMV module --
   VAR
     sm : Sm( smZxab , smZxabZx , smGe );
     smZxab : SmZxab( sm , smZxabZx , smGe );
     smZxabZx : SmZxabZx( sm , smZxab , smGe );
     smGe : SmGe( sm , smZxab , smZxabZx );
    
   CTLSPEC   EF  ( sm.state = Zxab )
   CTLSPEC   EF  ( sm.state = D )
   CTLSPEC   EF  ( sm.state = Ge )
   CTLSPEC   EF  ( smZxab.state = Zx )
   CTLSPEC   EF  ( smZxab.state = A )
   CTLSPEC   EF  ( smZxab.state = B )
   CTLSPEC   EF  ( smZxabZx.state = Z )
   CTLSPEC   EF  ( smZxabZx.state = X )
   CTLSPEC   EF  ( smGe.state = G )
   CTLSPEC   EF  ( smGe.state = E )