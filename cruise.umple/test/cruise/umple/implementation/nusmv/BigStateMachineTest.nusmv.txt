-- This file is generated from BigStateMachineTest.ump --

MODULE Sm_Handle
  
  VAR 
    event : { e5 , e2 , e3 , e1 , e4 };  
    
  
MODULE Sm( smZxab , smZxabZx , smGe , handle )
  
  VAR 
    sm_state : { sm_Zxab , sm_D , sm_Ge };  
    
  ASSIGN
    init(sm_state) := sm_Zxab;  
  
  TRANS
    ( (sm_state = sm_D) -> (
      (handle.event = e5 & next(smZxabZx.smZxabZx_state) = smZxabZx_X)  |
      (handle.event = e2 & next(smGe.smGe_state) = smGe_E)  ) ) &
    ( (sm_state = sm_Zxab) -> ( next(smZxab.smZxab_state) = smZxab_Zx) ) &
    ( (sm_state = sm_Ge) -> ( next(smGe.smGe_state) = smGe_G) )
  
MODULE SmZxab( sm , smZxabZx , smGe , handle )
  
  VAR 
    smZxab_state : { smZxab_Zx , smZxab_A , smZxab_B , null };  
    
  ASSIGN
    init(smZxab_state) := null;  
  
  TRANS
    ( (smZxab_state = smZxab_A) -> (
      (handle.event = e5 & next(sm.sm_state) = sm_D & next(smZxab_state) = null)  |
      (handle.event = e3 & next(smZxab_state) = smZxab_B)  |
      (handle.event = e1 & next(smGe.smGe_state) = smGe_E & next(smZxab_state) = null)  |
      (handle.event = e4 & next(sm.sm_state) = sm_Ge & next(smZxab_state) = null)  ) ) &
    ( (smZxab_state = smZxab_B) -> (
      (handle.event = e3 & next(sm.sm_state) = sm_Ge & next(smZxab_state) = null)  |
      (handle.event = e1 & next(smGe.smGe_state) = smGe_E & next(smZxab_state) = null)  |
      (handle.event = e4 & next(sm.sm_state) = sm_Ge & next(smZxab_state) = null)  ) ) &
    ( (smZxab_state = smZxab_Zx) -> ( next(smZxabZx.smZxabZx_state) = smZxabZx_Z) )
  
MODULE SmZxabZx( sm , smZxab , smGe , handle )
  
  VAR 
    smZxabZx_state : { smZxabZx_Z , smZxabZx_X , null };  
    
  ASSIGN
    init(smZxabZx_state) := null;  
  
  TRANS
    ( (smZxabZx_state = smZxabZx_Z) -> (
      (handle.event = e3 & next(smZxabZx_state) = smZxabZx_X)  |
      (handle.event = e2 & next(smZxab.smZxab_state) = smZxab_A & next(smZxabZx_state) = null)  |
      (handle.event = e5 & next(smGe.smGe_state) = smGe_G & next(smZxabZx_state) = null)  |
      (handle.event = e1 & next(smGe.smGe_state) = smGe_E & next(smZxabZx_state) = null)  |
      (handle.event = e4 & next(sm.sm_state) = sm_Ge & next(smZxabZx_state) = null)  ) ) &
    ( (smZxabZx_state = smZxabZx_X) -> (
      (handle.event = e5 & next(smGe.smGe_state) = smGe_G & next(smZxabZx_state) = null)  |
      (handle.event = e1 & next(smGe.smGe_state) = smGe_E & next(smZxabZx_state) = null)  |
      (handle.event = e4 & next(sm.sm_state) = sm_Ge & next(smZxabZx_state) = null)  ) )
  
MODULE SmGe( sm , smZxab , smZxabZx , handle )
  
  VAR 
    smGe_state : { smGe_G , smGe_E , null };  
    
  ASSIGN
    init(smGe_state) := null;  
  
  TRANS
    ( (smGe_state = smGe_E) -> (
      (handle.event = e1 & next(smGe_state) = smGe_G)  |
      (handle.event = e2 & next(smGe_state) = smGe_G)  ) ) &
    ( (smGe_state = smGe_G) -> (
       handle.event = e1 & next(smZxab.smZxab_state) = smZxab_B & next(smGe_state) = null) )
  
MODULE main
  
  VAR 
    handle : Sm_Handle;
    sm : Sm( smZxab , smZxabZx , smGe , handle );
    smZxab : SmZxab( sm , smZxabZx , smGe , handle );
    smZxabZx : SmZxabZx( sm , smZxab , smGe , handle );
    smGe : SmGe( sm , smZxab , smZxabZx , handle ); 