-- This file is generated from NestedWatch.ump --

 -- This defines a NuSMV module for Sm --
 MODULE Sm ( _smRegular , _smRegularUpdate , _smChronometer , _smChronometerChronoNormal , _smAlarmStatus , _smAlarmUpdate , _smAlarmUpdateHourMinuteUpdate ) 

   -- This part declares input variables for the given NuSMV module --
   IVAR
     event : { ev_s3 , ev_notS2 , ev_s1 , ev_s2 , ev_s3during2Secs , ev_notS1 };
    
   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { Sm_regular , Sm_chronometer , Sm_alarmStatus , Sm_alarmUpdate };
    
   -- This part defines macros that summarize the transitions of the given NuSMV module --
   DEFINE
     t1 := event = ev_s3 & state = Sm_chronometer;
     t2 := event = ev_notS2 & state = Sm_alarmStatus;
     t3 := event = ev_s3 & state = Sm_alarmUpdate;
     t4 := event = ev_s1 & _smRegular.state = SmRegular_time;
     t5 := event = ev_s2 & _smRegular.state = SmRegular_time;
     t6 := event = ev_s3 & _smRegular.state = SmRegular_time;
     t7 := event = ev_s3during2Secs & _smRegular.state = SmRegular_time;
     t8 := event = ev_notS1 & _smRegular.state = SmRegular_date;
     t9 := event = ev_s3 & _smRegular.state = SmRegular_update;
     t10 := event = ev_s1 & _smRegularUpdate.state = SmRegularUpdate_second;
     t11 := event = ev_s2 & _smRegularUpdate.state = SmRegularUpdate_second;
     t12 := event = ev_s1 & _smRegularUpdate.state = SmRegularUpdate_minute;
     t13 := event = ev_s2 & _smRegularUpdate.state = SmRegularUpdate_minute;
     t14 := event = ev_s1 & _smRegularUpdate.state = SmRegularUpdate_hour;
     t15 := event = ev_s2 & _smRegularUpdate.state = SmRegularUpdate_hour;
     t16 := event = ev_s1 & _smRegularUpdate.state = SmRegularUpdate_month;
     t17 := event = ev_s2 & _smRegularUpdate.state = SmRegularUpdate_month;
     t18 := event = ev_s1 & _smRegularUpdate.state = SmRegularUpdate_day;
     t19 := event = ev_s2 & _smRegularUpdate.state = SmRegularUpdate_day;
     t20 := event = ev_s1 & _smRegularUpdate.state = SmRegularUpdate_year;
     t21 := event = ev_s2 & _smRegularUpdate.state = SmRegularUpdate_year;
     t22 := event = ev_s1 & _smChronometer.state = SmChronometer_lapRunning;
     t23 := event = ev_s2 & _smChronometer.state = SmChronometer_lapRunning;
     t24 := event = ev_s1 & _smChronometer.state = SmChronometer_lapPaused;
     t25 := event = ev_s2 & _smChronometer.state = SmChronometer_lapPaused;
     t26 := event = ev_s1 & _smChronometerChronoNormal.state = SmChronometerChronoNormal_paused;
     t27 := event = ev_s2 & _smChronometerChronoNormal.state = SmChronometerChronoNormal_paused;
     t28 := event = ev_s1 & _smChronometerChronoNormal.state = SmChronometerChronoNormal_running;
     t29 := event = ev_s2 & _smChronometerChronoNormal.state = SmChronometerChronoNormal_running;
     t30 := event = ev_s1 & _smAlarmStatus.state = SmAlarmStatus_bothOff;
     t31 := event = ev_s1 & _smAlarmStatus.state = SmAlarmStatus_chimeOn;
     t32 := event = ev_s1 & _smAlarmStatus.state = SmAlarmStatus_bothOn;
     t33 := event = ev_s1 & _smAlarmStatus.state = SmAlarmStatus_alarmOn;
     t34 := event = ev_s1 & _smAlarmUpdate.state = SmAlarmUpdate_alarmTime;
     t35 := event = ev_s2 & _smAlarmUpdate.state = SmAlarmUpdate_alarmTime;
     t36 := event = ev_s1 & _smAlarmUpdateHourMinuteUpdate.state = SmAlarmUpdateHourMinuteUpdate_alarmHour;
     t37 := event = ev_s2 & _smAlarmUpdateHourMinuteUpdate.state = SmAlarmUpdateHourMinuteUpdate_alarmHour;
     t38 := event = ev_s1 & _smAlarmUpdateHourMinuteUpdate.state = SmAlarmUpdateHourMinuteUpdate_alarmMinute;
     t39 := event = ev_s2 & _smAlarmUpdateHourMinuteUpdate.state = SmAlarmUpdateHourMinuteUpdate_alarmMinute;
  
   -- This part defines the transitions from states to states for the given NuSMV module --
   ASSIGN
     init( state ) := Sm_regular;
     next( state ) := case
       t8 | t1 | t4 | t20 | t10 | t12 | t14 | t16 | t18 | t9 | t2 | t11 | t3 | t13 | t15 | t17 | t19 | t21 : Sm_regular;
       t27 | t25 | t23 | t24 | t6 | t28 | t26 | t29 | t22 : Sm_chronometer;
       t5 | t31 | t33 | t30 | t32 : Sm_alarmStatus;
       t35 | t38 | t36 | t7 | t37 | t34 | t39 : Sm_alarmUpdate;
       TRUE : state;
     esac;
 
   
 -- This defines a NuSMV module for SmRegular --
 MODULE SmRegular ( _sm , _smRegularUpdate , _smChronometer , _smChronometerChronoNormal , _smAlarmStatus , _smAlarmUpdate , _smAlarmUpdateHourMinuteUpdate ) 

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmRegular_time , SmRegular_date , SmRegular_update , null };
    
   -- This part defines the transitions from states to states for the given NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t8 | _sm.t1 | _sm.t9 | _sm.t2 : SmRegular_time;
       _sm.t4 : SmRegular_date;
       _sm.t20 | _sm.t10 | _sm.t12 | _sm.t14 | _sm.t16 | _sm.t18 | _sm.t11 | _sm.t3 | _sm.t13 | _sm.t15 | _sm.t17 | _sm.t19 | _sm.t21 : SmRegular_update;
       _sm.t6 | _sm.t22 | _sm.t24 | _sm.t26 | _sm.t28 | _sm.t30 | _sm.t32 | _sm.t34 | _sm.t36 | _sm.t38 | _sm.t5 | _sm.t7 | _sm.t23 | _sm.t25 | _sm.t27 | _sm.t29 | _sm.t31 | _sm.t33 | _sm.t35 | _sm.t37 | _sm.t39 : null;
       _sm.state = Sm_regular : SmRegular_time;
       TRUE : state;
     esac;
 
   
 -- This defines a NuSMV module for SmRegularUpdate --
 MODULE SmRegularUpdate ( _sm , _smRegular , _smChronometer , _smChronometerChronoNormal , _smAlarmStatus , _smAlarmUpdate , _smAlarmUpdateHourMinuteUpdate ) 

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmRegularUpdate_second , SmRegularUpdate_minute , SmRegularUpdate_hour , SmRegularUpdate_month , SmRegularUpdate_day , SmRegularUpdate_year , null };
    
   -- This part defines the transitions from states to states for the given NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t20 | _sm.t11 | _sm.t3 : SmRegularUpdate_second;
       _sm.t10 | _sm.t13 : SmRegularUpdate_minute;
       _sm.t12 | _sm.t15 : SmRegularUpdate_hour;
       _sm.t14 | _sm.t17 : SmRegularUpdate_month;
       _sm.t16 | _sm.t19 : SmRegularUpdate_day;
       _sm.t18 | _sm.t21 : SmRegularUpdate_year;
       _sm.t1 | _sm.t4 | _sm.t6 | _sm.t8 | _sm.t22 | _sm.t24 | _sm.t26 | _sm.t28 | _sm.t30 | _sm.t32 | _sm.t34 | _sm.t36 | _sm.t38 | _sm.t2 | _sm.t5 | _sm.t7 | _sm.t9 | _sm.t23 | _sm.t25 | _sm.t27 | _sm.t29 | _sm.t31 | _sm.t33 | _sm.t35 | _sm.t37 | _sm.t39 : null;
       _smRegular.state = SmRegular_update : SmRegularUpdate_second;
       TRUE : state;
     esac;
 
   
 -- This defines a NuSMV module for SmChronometer --
 MODULE SmChronometer ( _sm , _smRegular , _smRegularUpdate , _smChronometerChronoNormal , _smAlarmStatus , _smAlarmUpdate , _smAlarmUpdateHourMinuteUpdate ) 

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmChronometer_chronoNormal , SmChronometer_lapRunning , SmChronometer_lapPaused , null };
    
   -- This part defines the transitions from states to states for the given NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t6 | _sm.t28 | _sm.t26 | _sm.t27 | _sm.t25 | _sm.t23 : SmChronometer_chronoNormal;
       _sm.t29 | _sm.t24 : SmChronometer_lapRunning;
       _sm.t22 : SmChronometer_lapPaused;
       _sm.t1 | _sm.t3 | _sm.t5 | _sm.t8 | _sm.t10 | _sm.t12 | _sm.t14 | _sm.t16 | _sm.t18 | _sm.t20 | _sm.t30 | _sm.t32 | _sm.t34 | _sm.t36 | _sm.t38 | _sm.t2 | _sm.t4 | _sm.t7 | _sm.t9 | _sm.t11 | _sm.t13 | _sm.t15 | _sm.t17 | _sm.t19 | _sm.t21 | _sm.t31 | _sm.t33 | _sm.t35 | _sm.t37 | _sm.t39 : null;
       _sm.state = Sm_chronometer : SmChronometer_chronoNormal;
       TRUE : state;
     esac;
 
   
 -- This defines a NuSMV module for SmChronometerChronoNormal --
 MODULE SmChronometerChronoNormal ( _sm , _smRegular , _smRegularUpdate , _smChronometer , _smAlarmStatus , _smAlarmUpdate , _smAlarmUpdateHourMinuteUpdate ) 

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmChronometerChronoNormal_paused , SmChronometerChronoNormal_running , null };
    
   -- This part defines the transitions from states to states for the given NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t28 | _sm.t27 | _sm.t25 : SmChronometerChronoNormal_paused;
       _sm.t26 | _sm.t23 : SmChronometerChronoNormal_running;
       _sm.t2 | _sm.t4 | _sm.t7 | _sm.t9 | _sm.t11 | _sm.t13 | _sm.t15 | _sm.t17 | _sm.t19 | _sm.t21 | _sm.t24 | _sm.t30 | _sm.t32 | _sm.t34 | _sm.t36 | _sm.t38 | _sm.t1 | _sm.t3 | _sm.t5 | _sm.t8 | _sm.t10 | _sm.t12 | _sm.t14 | _sm.t16 | _sm.t18 | _sm.t20 | _sm.t22 | _sm.t29 | _sm.t31 | _sm.t33 | _sm.t35 | _sm.t37 | _sm.t39 : null;
       _smChronometer.state = SmChronometer_chronoNormal : SmChronometerChronoNormal_paused;
       TRUE : state;
     esac;
 
   
 -- This defines a NuSMV module for SmAlarmStatus --
 MODULE SmAlarmStatus ( _sm , _smRegular , _smRegularUpdate , _smChronometer , _smChronometerChronoNormal , _smAlarmUpdate , _smAlarmUpdateHourMinuteUpdate ) 

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmAlarmStatus_bothOff , SmAlarmStatus_chimeOn , SmAlarmStatus_bothOn , SmAlarmStatus_alarmOn , null };
    
   -- This part defines the transitions from states to states for the given NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t33 | _sm.t5 : SmAlarmStatus_bothOff;
       _sm.t30 : SmAlarmStatus_chimeOn;
       _sm.t31 : SmAlarmStatus_bothOn;
       _sm.t32 : SmAlarmStatus_alarmOn;
       _sm.t1 | _sm.t3 | _sm.t6 | _sm.t8 | _sm.t10 | _sm.t12 | _sm.t14 | _sm.t16 | _sm.t18 | _sm.t20 | _sm.t22 | _sm.t24 | _sm.t26 | _sm.t28 | _sm.t34 | _sm.t36 | _sm.t38 | _sm.t2 | _sm.t4 | _sm.t7 | _sm.t9 | _sm.t11 | _sm.t13 | _sm.t15 | _sm.t17 | _sm.t19 | _sm.t21 | _sm.t23 | _sm.t25 | _sm.t27 | _sm.t29 | _sm.t35 | _sm.t37 | _sm.t39 : null;
       _sm.state = Sm_alarmStatus : SmAlarmStatus_bothOff;
       TRUE : state;
     esac;
 
   
 -- This defines a NuSMV module for SmAlarmUpdate --
 MODULE SmAlarmUpdate ( _sm , _smRegular , _smRegularUpdate , _smChronometer , _smChronometerChronoNormal , _smAlarmStatus , _smAlarmUpdateHourMinuteUpdate ) 

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmAlarmUpdate_alarmTime , SmAlarmUpdate_hourMinuteUpdate , null };
    
   -- This part defines the transitions from states to states for the given NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t7 : SmAlarmUpdate_alarmTime;
       _sm.t35 | _sm.t38 | _sm.t36 | _sm.t37 | _sm.t34 | _sm.t39 : SmAlarmUpdate_hourMinuteUpdate;
       _sm.t1 | _sm.t3 | _sm.t5 | _sm.t8 | _sm.t10 | _sm.t12 | _sm.t14 | _sm.t16 | _sm.t18 | _sm.t20 | _sm.t22 | _sm.t24 | _sm.t26 | _sm.t28 | _sm.t30 | _sm.t32 | _sm.t2 | _sm.t4 | _sm.t6 | _sm.t9 | _sm.t11 | _sm.t13 | _sm.t15 | _sm.t17 | _sm.t19 | _sm.t21 | _sm.t23 | _sm.t25 | _sm.t27 | _sm.t29 | _sm.t31 | _sm.t33 : null;
       _sm.state = Sm_alarmUpdate : SmAlarmUpdate_alarmTime;
       TRUE : state;
     esac;
 
   
 -- This defines a NuSMV module for SmAlarmUpdateHourMinuteUpdate --
 MODULE SmAlarmUpdateHourMinuteUpdate ( _sm , _smRegular , _smRegularUpdate , _smChronometer , _smChronometerChronoNormal , _smAlarmStatus , _smAlarmUpdate ) 

   -- This part declares state variables for the given NuSMV module --
   VAR
     state : { SmAlarmUpdateHourMinuteUpdate_alarmHour , SmAlarmUpdateHourMinuteUpdate_alarmMinute , null };
    
   -- This part defines the transitions from states to states for the given NuSMV module --
   ASSIGN
     init( state ) := null;
     next( state ) := case
       _sm.t37 | _sm.t35 | _sm.t38 : SmAlarmUpdateHourMinuteUpdate_alarmHour;
       _sm.t36 | _sm.t34 | _sm.t39 : SmAlarmUpdateHourMinuteUpdate_alarmMinute;
       _sm.t2 | _sm.t4 | _sm.t6 | _sm.t8 | _sm.t10 | _sm.t12 | _sm.t14 | _sm.t16 | _sm.t18 | _sm.t20 | _sm.t22 | _sm.t24 | _sm.t26 | _sm.t28 | _sm.t30 | _sm.t32 | _sm.t1 | _sm.t3 | _sm.t5 | _sm.t7 | _sm.t9 | _sm.t11 | _sm.t13 | _sm.t15 | _sm.t17 | _sm.t19 | _sm.t21 | _sm.t23 | _sm.t25 | _sm.t27 | _sm.t29 | _sm.t31 | _sm.t33 : null;
       _smAlarmUpdate.state = SmAlarmUpdate_hourMinuteUpdate : SmAlarmUpdateHourMinuteUpdate_alarmHour;
       TRUE : state;
     esac;
 
   
 -- This defines a NuSMV module for main --
 MODULE main

   -- This part declares state variables for the given NuSMV module --
   VAR
     sm : Sm( smRegular , smRegularUpdate , smChronometer , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate );
     smRegular : SmRegular( sm , smRegularUpdate , smChronometer , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate );
     smRegularUpdate : SmRegularUpdate( sm , smRegular , smChronometer , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate );
     smChronometer : SmChronometer( sm , smRegular , smRegularUpdate , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate );
     smChronometerChronoNormal : SmChronometerChronoNormal( sm , smRegular , smRegularUpdate , smChronometer , smAlarmStatus , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate );
     smAlarmStatus : SmAlarmStatus( sm , smRegular , smRegularUpdate , smChronometer , smChronometerChronoNormal , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate );
     smAlarmUpdate : SmAlarmUpdate( sm , smRegular , smRegularUpdate , smChronometer , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdateHourMinuteUpdate );
     smAlarmUpdateHourMinuteUpdate : SmAlarmUpdateHourMinuteUpdate( sm , smRegular , smRegularUpdate , smChronometer , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdate );
    
   CTLSPEC   EF  ( sm.state = Sm_regular )
   CTLSPEC   EF  ( sm.state = Sm_chronometer )
   CTLSPEC   EF  ( sm.state = Sm_alarmStatus )
   CTLSPEC   EF  ( sm.state = Sm_alarmUpdate )
   CTLSPEC   EF  ( smRegular.state = SmRegular_time )
   CTLSPEC   EF  ( smRegular.state = SmRegular_date )
   CTLSPEC   EF  ( smRegular.state = SmRegular_update )
   CTLSPEC   EF  ( smRegularUpdate.state = SmRegularUpdate_second )
   CTLSPEC   EF  ( smRegularUpdate.state = SmRegularUpdate_minute )
   CTLSPEC   EF  ( smRegularUpdate.state = SmRegularUpdate_hour )
   CTLSPEC   EF  ( smRegularUpdate.state = SmRegularUpdate_month )
   CTLSPEC   EF  ( smRegularUpdate.state = SmRegularUpdate_day )
   CTLSPEC   EF  ( smRegularUpdate.state = SmRegularUpdate_year )
   CTLSPEC   EF  ( smChronometer.state = SmChronometer_chronoNormal )
   CTLSPEC   EF  ( smChronometer.state = SmChronometer_lapRunning )
   CTLSPEC   EF  ( smChronometer.state = SmChronometer_lapPaused )
   CTLSPEC   EF  ( smChronometerChronoNormal.state = SmChronometerChronoNormal_paused )
   CTLSPEC   EF  ( smChronometerChronoNormal.state = SmChronometerChronoNormal_running )
   CTLSPEC   EF  ( smAlarmStatus.state = SmAlarmStatus_bothOff )
   CTLSPEC   EF  ( smAlarmStatus.state = SmAlarmStatus_chimeOn )
   CTLSPEC   EF  ( smAlarmStatus.state = SmAlarmStatus_bothOn )
   CTLSPEC   EF  ( smAlarmStatus.state = SmAlarmStatus_alarmOn )
   CTLSPEC   EF  ( smAlarmUpdate.state = SmAlarmUpdate_alarmTime )
   CTLSPEC   EF  ( smAlarmUpdate.state = SmAlarmUpdate_hourMinuteUpdate )
   CTLSPEC   EF  ( smAlarmUpdateHourMinuteUpdate.state = SmAlarmUpdateHourMinuteUpdate_alarmHour )
   CTLSPEC   EF  ( smAlarmUpdateHourMinuteUpdate.state = SmAlarmUpdateHourMinuteUpdate_alarmMinute )