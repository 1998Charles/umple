-- This file is generated from NestedWatch.ump --

MODULE Sm_Handle
  
  VAR 
    event : { s3 , notS2 , s1 , s2 , s3during2Secs , notS1 };  
    
  
MODULE Sm( smRegular , smRegularUpdate , smChronometer , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate , handle )
  
  VAR 
    sm_state : { sm_regular , sm_chronometer , sm_alarmStatus , sm_alarmUpdate };  
    
  ASSIGN
    init(sm_state) := sm_regular;  
  
  TRANS
    ( (sm_state = sm_regular) -> ( next(smRegular.smRegular_state) = smRegular_time ) ) &
    ( (sm_state = sm_chronometer) -> ( next(smChronometer.smChronometer_state) = smChronometer_chronoNormal ) ) &
    ( (sm_state = sm_alarmStatus) -> ( next(smAlarmStatus.smAlarmStatus_state) = smAlarmStatus_bothOff ) ) &
    ( (sm_state = sm_alarmUpdate) -> ( next(smAlarmUpdate.smAlarmUpdate_state) = smAlarmUpdate_alarmTime ) )
  
MODULE SmRegular( sm , smRegularUpdate , smChronometer , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate , handle )
  
  VAR 
    smRegular_state : { smRegular_time , smRegular_date , smRegular_update , null };  
    
  ASSIGN
    init(smRegular_state) := null;  
  
  TRANS
    ( (smRegular_state = smRegular_time) -> (
      (handle.event = s1 & next(smRegular_state) = smRegular_date )  |
      (handle.event = s2 & next(sm.sm_state) = sm_alarmStatus
         & next(smRegular_state) = null )  |
      (handle.event = s3 & next(sm.sm_state) = sm_chronometer
         & next(smRegular_state) = null )  |
      (handle.event = s3during2Secs & next(smAlarmUpdate.smAlarmUpdate_state) = smAlarmUpdate_alarmTime
         & next(smRegular_state) = null )  ) ) &
    ( (smRegular_state = smRegular_date) -> (
       handle.event = notS1 & next(smRegular_state) = smRegular_time ) ) &
    ( (smRegular_state = smRegular_update) -> ( next(smRegularUpdate.smRegularUpdate_state) = smRegularUpdate_second ) )
  
MODULE SmRegularUpdate( sm , smRegular , smChronometer , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate , handle )
  
  VAR 
    smRegularUpdate_state : { smRegularUpdate_second , smRegularUpdate_minute , smRegularUpdate_hour , smRegularUpdate_month , smRegularUpdate_day , smRegularUpdate_year , null };  
    
  ASSIGN
    init(smRegularUpdate_state) := null;  
  
  TRANS
    ( (smRegularUpdate_state = smRegularUpdate_second) -> (
      (handle.event = s1 & next(smRegularUpdate_state) = smRegularUpdate_minute )  |
      (handle.event = s2 & next(smRegularUpdate_state) = smRegularUpdate_second )  |
      (handle.event = s3 & next(smRegular.smRegular_state) = smRegular_time
         & next(smRegularUpdate_state) = null )  ) ) &
    ( (smRegularUpdate_state = smRegularUpdate_minute) -> (
      (handle.event = s1 & next(smRegularUpdate_state) = smRegularUpdate_hour )  |
      (handle.event = s2 & next(smRegularUpdate_state) = smRegularUpdate_minute )  |
      (handle.event = s3 & next(smRegular.smRegular_state) = smRegular_time
         & next(smRegularUpdate_state) = null )  ) ) &
    ( (smRegularUpdate_state = smRegularUpdate_hour) -> (
      (handle.event = s1 & next(smRegularUpdate_state) = smRegularUpdate_month )  |
      (handle.event = s2 & next(smRegularUpdate_state) = smRegularUpdate_hour )  |
      (handle.event = s3 & next(smRegular.smRegular_state) = smRegular_time
         & next(smRegularUpdate_state) = null )  ) ) &
    ( (smRegularUpdate_state = smRegularUpdate_month) -> (
      (handle.event = s1 & next(smRegularUpdate_state) = smRegularUpdate_day )  |
      (handle.event = s2 & next(smRegularUpdate_state) = smRegularUpdate_month )  |
      (handle.event = s3 & next(smRegular.smRegular_state) = smRegular_time
         & next(smRegularUpdate_state) = null )  ) ) &
    ( (smRegularUpdate_state = smRegularUpdate_day) -> (
      (handle.event = s1 & next(smRegularUpdate_state) = smRegularUpdate_year )  |
      (handle.event = s2 & next(smRegularUpdate_state) = smRegularUpdate_day )  |
      (handle.event = s3 & next(smRegular.smRegular_state) = smRegular_time
         & next(smRegularUpdate_state) = null )  ) ) &
    ( (smRegularUpdate_state = smRegularUpdate_year) -> (
      (handle.event = s1 & next(smRegularUpdate_state) = smRegularUpdate_second )  |
      (handle.event = s2 & next(smRegularUpdate_state) = smRegularUpdate_year )  |
      (handle.event = s3 & next(smRegular.smRegular_state) = smRegular_time
         & next(smRegularUpdate_state) = null )  ) )
  
MODULE SmChronometer( sm , smRegular , smRegularUpdate , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate , handle )
  
  VAR 
    smChronometer_state : { smChronometer_chronoNormal , smChronometer_lapRunning , smChronometer_lapPaused , null };  
    
  ASSIGN
    init(smChronometer_state) := null;  
  
  TRANS
    ( (smChronometer_state = smChronometer_lapRunning) -> (
      (handle.event = s1 & next(smChronometer_state) = smChronometer_lapPaused )  |
      (handle.event = s2 & next(smChronometerChronoNormal.smChronometerChronoNormal_state) = smChronometerChronoNormal_running )  |
      (handle.event = s3 & next(smRegular.smRegular_state) = smRegular_time
         & next(smChronometer_state) = null )  ) ) &
    ( (smChronometer_state = smChronometer_lapPaused) -> (
      (handle.event = s1 & next(smChronometer_state) = smChronometer_lapRunning )  |
      (handle.event = s2 & next(smChronometerChronoNormal.smChronometerChronoNormal_state) = smChronometerChronoNormal_paused )  |
      (handle.event = s3 & next(smRegular.smRegular_state) = smRegular_time
         & next(smChronometer_state) = null )  ) ) &
    ( (smChronometer_state = smChronometer_chronoNormal) -> ( next(smChronometerChronoNormal.smChronometerChronoNormal_state) = smChronometerChronoNormal_paused ) )
  
MODULE SmChronometerChronoNormal( sm , smRegular , smRegularUpdate , smChronometer , smAlarmStatus , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate , handle )
  
  VAR 
    smChronometerChronoNormal_state : { smChronometerChronoNormal_paused , smChronometerChronoNormal_running , null };  
    
  ASSIGN
    init(smChronometerChronoNormal_state) := null;  
  
  TRANS
    ( (smChronometerChronoNormal_state = smChronometerChronoNormal_paused) -> (
      (handle.event = s1 & next(smChronometerChronoNormal_state) = smChronometerChronoNormal_running )  |
      (handle.event = s2 & next(smChronometerChronoNormal_state) = smChronometerChronoNormal_paused )  |
      (handle.event = s3 & next(smRegular.smRegular_state) = smRegular_time
         & next(smChronometer.smChronometer_state) = null
         & next(smChronometerChronoNormal_state) = null )  ) ) &
    ( (smChronometerChronoNormal_state = smChronometerChronoNormal_running) -> (
      (handle.event = s1 & next(smChronometerChronoNormal_state) = smChronometerChronoNormal_paused )  |
      (handle.event = s2 & next(smChronometer.smChronometer_state) = smChronometer_lapRunning
         & next(smChronometerChronoNormal_state) = null )  |
      (handle.event = s3 & next(smRegular.smRegular_state) = smRegular_time
         & next(smChronometer.smChronometer_state) = null
         & next(smChronometerChronoNormal_state) = null )  ) )
  
MODULE SmAlarmStatus( sm , smRegular , smRegularUpdate , smChronometer , smChronometerChronoNormal , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate , handle )
  
  VAR 
    smAlarmStatus_state : { smAlarmStatus_bothOff , smAlarmStatus_chimeOn , smAlarmStatus_bothOn , smAlarmStatus_alarmOn , null };  
    
  ASSIGN
    init(smAlarmStatus_state) := null;  
  
  TRANS
    ( (smAlarmStatus_state = smAlarmStatus_bothOff) -> (
      (handle.event = s1 & next(smAlarmStatus_state) = smAlarmStatus_chimeOn )  |
      (handle.event = notS2 & next(smRegular.smRegular_state) = smRegular_time
         & next(smAlarmStatus_state) = null )  ) ) &
    ( (smAlarmStatus_state = smAlarmStatus_chimeOn) -> (
      (handle.event = s1 & next(smAlarmStatus_state) = smAlarmStatus_bothOn )  |
      (handle.event = notS2 & next(smRegular.smRegular_state) = smRegular_time
         & next(smAlarmStatus_state) = null )  ) ) &
    ( (smAlarmStatus_state = smAlarmStatus_bothOn) -> (
      (handle.event = s1 & next(smAlarmStatus_state) = smAlarmStatus_alarmOn )  |
      (handle.event = notS2 & next(smRegular.smRegular_state) = smRegular_time
         & next(smAlarmStatus_state) = null )  ) ) &
    ( (smAlarmStatus_state = smAlarmStatus_alarmOn) -> (
      (handle.event = s1 & next(smAlarmStatus_state) = smAlarmStatus_bothOff )  |
      (handle.event = notS2 & next(smRegular.smRegular_state) = smRegular_time
         & next(smAlarmStatus_state) = null )  ) )
  
MODULE SmAlarmUpdate( sm , smRegular , smRegularUpdate , smChronometer , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdateHourMinuteUpdate , handle )
  
  VAR 
    smAlarmUpdate_state : { smAlarmUpdate_alarmTime , smAlarmUpdate_hourMinuteUpdate , null };  
    
  ASSIGN
    init(smAlarmUpdate_state) := null;  
  
  TRANS
    ( (smAlarmUpdate_state = smAlarmUpdate_alarmTime) -> (
      (handle.event = s1 & next(smAlarmUpdateHourMinuteUpdate.smAlarmUpdateHourMinuteUpdate_state) = smAlarmUpdateHourMinuteUpdate_alarmMinute )  |
      (handle.event = s2 & next(smAlarmUpdateHourMinuteUpdate.smAlarmUpdateHourMinuteUpdate_state) = smAlarmUpdateHourMinuteUpdate_alarmHour )  |
      (handle.event = s3 & next(smRegularUpdate.smRegularUpdate_state) = smRegularUpdate_second
         & next(smAlarmUpdate_state) = null )  ) ) &
    ( (smAlarmUpdate_state = smAlarmUpdate_hourMinuteUpdate) -> ( next(smAlarmUpdateHourMinuteUpdate.smAlarmUpdateHourMinuteUpdate_state) = smAlarmUpdateHourMinuteUpdate_alarmHour ) )
  
MODULE SmAlarmUpdateHourMinuteUpdate( sm , smRegular , smRegularUpdate , smChronometer , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdate , handle )
  
  VAR 
    smAlarmUpdateHourMinuteUpdate_state : { smAlarmUpdateHourMinuteUpdate_alarmHour , smAlarmUpdateHourMinuteUpdate_alarmMinute , null };  
    
  ASSIGN
    init(smAlarmUpdateHourMinuteUpdate_state) := null;  
  
  TRANS
    ( (smAlarmUpdateHourMinuteUpdate_state = smAlarmUpdateHourMinuteUpdate_alarmHour) -> (
      (handle.event = s1 & next(smAlarmUpdateHourMinuteUpdate_state) = smAlarmUpdateHourMinuteUpdate_alarmMinute )  |
      (handle.event = s2 & next(smAlarmUpdateHourMinuteUpdate_state) = smAlarmUpdateHourMinuteUpdate_alarmHour )  |
      (handle.event = s3 & next(smRegularUpdate.smRegularUpdate_state) = smRegularUpdate_second
         & next(smAlarmUpdate.smAlarmUpdate_state) = null
         & next(smAlarmUpdateHourMinuteUpdate_state) = null )  ) ) &
    ( (smAlarmUpdateHourMinuteUpdate_state = smAlarmUpdateHourMinuteUpdate_alarmMinute) -> (
      (handle.event = s1 & next(smAlarmUpdateHourMinuteUpdate_state) = smAlarmUpdateHourMinuteUpdate_alarmHour )  |
      (handle.event = s2 & next(smAlarmUpdateHourMinuteUpdate_state) = smAlarmUpdateHourMinuteUpdate_alarmMinute )  |
      (handle.event = s3 & next(smRegularUpdate.smRegularUpdate_state) = smRegularUpdate_second
         & next(smAlarmUpdate.smAlarmUpdate_state) = null
         & next(smAlarmUpdateHourMinuteUpdate_state) = null )  ) )
  
MODULE main
  
  VAR 
    handle : Sm_Handle;
    sm : Sm( smRegular , smRegularUpdate , smChronometer , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate , handle );
    smRegular : SmRegular( sm , smRegularUpdate , smChronometer , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate , handle );
    smRegularUpdate : SmRegularUpdate( sm , smRegular , smChronometer , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate , handle );
    smChronometer : SmChronometer( sm , smRegular , smRegularUpdate , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate , handle );
    smChronometerChronoNormal : SmChronometerChronoNormal( sm , smRegular , smRegularUpdate , smChronometer , smAlarmStatus , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate , handle );
    smAlarmStatus : SmAlarmStatus( sm , smRegular , smRegularUpdate , smChronometer , smChronometerChronoNormal , smAlarmUpdate , smAlarmUpdateHourMinuteUpdate , handle );
    smAlarmUpdate : SmAlarmUpdate( sm , smRegular , smRegularUpdate , smChronometer , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdateHourMinuteUpdate , handle );
    smAlarmUpdateHourMinuteUpdate : SmAlarmUpdateHourMinuteUpdate( sm , smRegular , smRegularUpdate , smChronometer , smChronometerChronoNormal , smAlarmStatus , smAlarmUpdate , handle ); 