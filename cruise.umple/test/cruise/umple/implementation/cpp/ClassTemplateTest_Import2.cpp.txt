/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

namespace example.two{
#include <vector>
using namespace example.one;
using namespace example.three;
#include "Student.h"

	
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 Student::Student(const string& aNumber, vector<Mentor*> allMentors)
  {
    number = aNumber;
    mentors = new vector<Mentor*>();
    bool didAddMentors = setMentors(allMentors);
    if (!didAddMentors)
    {
      throw new RuntimeException("Unable to create Student, must have at least 1 mentors");
    }
    courses = new vector<Course*>();
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 Student::Student(const Student & student)
  {
    this->number = student.number;
  }
  	
  //------------------------
  // Operator =
  //------------------------

 Student Student::operator=(const Student & student)
  {
    this->number = student.number;
  }

  //------------------------
  // INTERFACE
  //------------------------

  bool Student::setNumber(string const& aNumber)
  {
    bool wasSet = false;
    number = aNumber;
    wasSet = true;
    return wasSet;
  }

  string Student::getNumber()
  {
    return number;
  }

  Mentor Student::getMentor(int index) 
  {
    Mentor aMentor = mentors.get(index);
    return aMentor;
  }

  vector<Mentor*> Student::getMentors() 
  {
    vector<Mentor*> newMentors = mentors;
    return newMentors;
  }

  int Student::numberOfMentors()
  {
    int number = mentors.size();
    return number;
  }

  bool Student::hasMentors()
  {
    bool has = mentors.size() > 0;
    return has;
  }
  
  int Student::indexOfMentor(Mentor aMentor)
  {
    int index = std::find(mentors.begin(), mentors.end(), aMentor) - mentors.begin();
    return index;
  }
  
  Course Student::getCourse(int index) 
  {
    Course aCourse = courses.get(index);
    return aCourse;
  }

  vector<Course*> Student::getCourses() 
  {
    vector<Course*> newCourses = courses;
    return newCourses;
  }

  int Student::numberOfCourses()
  {
    int number = courses.size();
    return number;
  }

  bool Student::hasCourses()
  {
    bool has = courses.size() > 0;
    return has;
  }
  
  int Student::indexOfCourse(Course aCourse)
  {
    int index = std::find(courses.begin(), courses.end(), aCourse) - courses.begin();
    return index;
  }
  
  static int minimumNumberOfMentors()
  {
    return 1;
  }

  bool Student::addMentor(Mentor aMentor)
  {
    bool wasAdded = false;
    if (mentors.contains(aMentor)) { return false; }
    Student existingStudent = aMentor.getStudent();
    if (existingStudent != null && existingStudent.numberOfMentors() <= minimumNumberOfMentors())
    {
      return wasAdded;
    }
    else if (existingStudent != null)
    {
      existingStudent.mentors.remove(aMentor);
    }
    mentors.add(aMentor);
    setStudent(aMentor,this);
    wasAdded = true;
    return wasAdded;
  }

  bool Student::removeMentor(Mentor aMentor)
  {
    bool wasRemoved = false;
    if (mentors.contains(aMentor) && numberOfMentors() > minimumNumberOfMentors())
    {
      mentors.remove(aMentor);
      setStudent(aMentor,null);
      wasRemoved = true;
    }
    return wasRemoved;
  }
  bool Student::setMentors(Mentor... newMentors)
  {
    bool wasSet = false;
    if (newMentors.length < minimumNumberOfMentors())
    {
      return wasSet;
    }

    vector<Mentor*> checkNewMentors = new vector<Mentor*>();
    HashMap<Student,Integer> studentToNewMentors = new HashMap<Student,Integer>();
    for (Mentor aMentor : newMentors)
    {
      if (checkNewMentors.contains(aMentor))
      {
        return wasSet;
      }
      else if (aMentor.getStudent() != null && !this.equals(aMentor.getStudent()))
      {
        Student existingStudent = aMentor.getStudent();
        if (!studentToNewMentors.containsKey(existingStudent))
        {
          studentToNewMentors.put(existingStudent, new Integer(existingStudent.numberOfMentors()));
        }
        Integer currentCount = studentToNewMentors.get(existingStudent);
        int nextCount = currentCount - 1;
        if (nextCount < 1)
        {
          return wasSet;
        }
        studentToNewMentors.put(existingStudent, new Integer(nextCount));
      }
      checkNewMentors.add(aMentor);
    }

    mentors.removeAll(checkNewMentors);

    for (Mentor orphan : mentors)
    {
      setStudent(orphan, null);
    }
    mentors.clear();
    for (Mentor aMentor : newMentors)
    {
      if (aMentor.getStudent() != null)
      {
        aMentor.getStudent().mentors.remove(aMentor);
      }
      setStudent(aMentor, this);
      mentors.add(aMentor);
    }
    wasSet = true;
    return wasSet;
  }

  void Student::setStudent(Mentor aMentor, Student aStudent)
  {
    try
    {
      java.lang.reflect.Field mentorField = aMentor.getClass().getDeclaredField("student");
      mentorField.setAccessible(true);
      mentorField.set(aMentor, aStudent);
    }
    catch (Exception e)
    {
      throw new RuntimeException("Issue internally setting aStudent to aMentor", e);
    }
  }

  static int minimumNumberOfCourses()
  {
    return 0;
  }

  bool Student::addCourse(Course aCourse)
  {
    bool wasAdded = false;
    if (courses.contains(aCourse)) { return false; }
    courses.add(aCourse);
    if (aCourse.indexOfStudent(this) != -1)
    {
      wasAdded = true;
    }
    else
    {
      wasAdded = aCourse.addStudent(this);
      if (!wasAdded)
      {
        courses.remove(aCourse);
      }
    }
    return wasAdded;
  }

  bool Student::removeCourse(Course aCourse)
  {
    bool wasRemoved = false;
    if (!courses.contains(aCourse))
    {
      return wasRemoved;
    }

    int oldIndex = courses.indexOf(aCourse);
    courses.remove(oldIndex);
    if (aCourse.indexOfStudent(this) == -1)
    {
      wasRemoved = true;
    }
    else
    {
      wasRemoved = aCourse.removeStudent(this);
      if (!wasRemoved)
      {
        courses.add(oldIndex,aCourse);
      }
    }
    return wasRemoved;
  }

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
Student::~Student()
  {
    for( int i =0; sizeof(mentors); i++)
    {
      setStudent(aMentor[i],NULL);
    }
    mentors.clear();
    vector<Course> copyOfCourses = new vector<Course>(courses);
    courses.clear();
    for(int i=0;sizeof(courses);i++)
    {
      courses[i].removeStudent(this);
    }
  }

}