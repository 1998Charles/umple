/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

package example.three;
#include <java.util.*>;
#include <example.two.*>;

class Course
{
  private:

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //Course Associations
   vector<Student*> students;

  //------------------------
  // CONSTRUCTOR
  //------------------------
  public:

 Course::Course()
  {
    students = new vector<Student*>();
  }

  //------------------------
  // INTERFACE
  //------------------------

  Student Course::getStudent(int index)
  {
    Student aStudent = students.get(index);
    return aStudent;
  }

  vector<Student*> Course::getStudents()
  {
    vector<Student*> newStudents = Collections.unmodifiableList(students);
    return newStudents;
  }

  int Course::numberOfStudents()
  {
    int number = students.size();
    return number;
  }

  bool Course::hasStudents()
  {
    bool has = students.size() > 0;
    return has;
  }
  
  int Course::indexOfStudent(Student aStudent)
  {
    int index = students.indexOf(aStudent);
    return index;
  }
  
  static int minimumNumberOfStudents()
  {
    return 0;
  }

  bool Course::addStudent(Student aStudent)
  {
    bool wasAdded = false;
    if (students.contains(aStudent)) { return false; }
    students.add(aStudent);
    if (aStudent.indexOfCourse(this) != -1)
    {
      wasAdded = true;
    }
    else
    {
      wasAdded = aStudent.addCourse(this);
      if (!wasAdded)
      {
        students.remove(aStudent);
      }
    }
    return wasAdded;
  }

  bool Course::removeStudent(Student aStudent)
  {
    bool wasRemoved = false;
    if (!students.contains(aStudent))
    {
      return wasRemoved;
    }

    int oldIndex = students.indexOf(aStudent);
    students.remove(oldIndex);
    if (aStudent.indexOfCourse(this) == -1)
    {
      wasRemoved = true;
    }
    else
    {
      wasRemoved = aStudent.removeCourse(this);
      if (!wasRemoved)
      {
        students.add(oldIndex,aStudent);
      }
    }
    return wasRemoved;
  }

  public void delete()
  {
    ArrayList<Student> copyOfStudents = new ArrayList<Student>(students);
    students.clear();
    for(Student aStudent : copyOfStudents)
    {
      aStudent.removeCourse(this);
    }
  }

};