/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

package example;
#include <iostream>;

class Token
{
  private:

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //Token Attributes
  List<Position> positions;

  //------------------------
  // CONSTRUCTOR
  //------------------------
  public:

 Token::Token()
  {
    positions = new vector<Position*>();
  }

  //------------------------
  // INTERFACE
  //------------------------

  bool Token::addPosition(Position aPosition)
  {
    bool wasAdded = false;
    wasAdded = positions.add(aPosition);
    return wasAdded;
  }

  bool Token::removePosition(Position aPosition)
  {
    bool wasRemoved = false;
    wasRemoved = positions.remove(aPosition);
    return wasRemoved;
  }

  Position Token::getPosition(int index)
  {
    Position aPosition = positions.get(index);
    return aPosition;
  }

  Position[] Token::getPositions()
  {
    Position[] newPositions = positions.toArray(new Position[positions.size()]);
    return newPositions;
  }

  int Token::numberOfPositions()
  {
    int number = positions.size();
    return number;
  }

  bool Token::hasPositions()
  {
    bool has = positions.size() > 0;
    return has;
  }

  int Token::indexOfPosition(Position aPosition)
  {
    int index = positions.indexOf(aPosition);
    return index;
  }

  public void delete()
  {}

};
