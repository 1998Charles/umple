/*
* generated by Xtext
*/

package cruise.umple.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class UmpleGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class UmpleModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UmpleModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespaceNamespaceParserRuleCall_0_0 = (RuleCall)cNamespaceAssignment_0.eContents().get(0);
		private final Assignment cGlossaryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGlossaryGlossaryParserRuleCall_1_0 = (RuleCall)cGlossaryAssignment_1.eContents().get(0);
		private final Assignment cGenerate_Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGenerate_GenerateParserRuleCall_2_0 = (RuleCall)cGenerate_Assignment_2.eContents().get(0);
		private final Assignment cTraceMechanismAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTraceMechanismTraceMechanismParserRuleCall_3_0 = (RuleCall)cTraceMechanismAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cUsesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cUsesUseStatementParserRuleCall_4_0_0 = (RuleCall)cUsesAssignment_4_0.eContents().get(0);
		private final Assignment cUmpleElementsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cUmpleElementsUmpleElementParserRuleCall_4_1_0 = (RuleCall)cUmpleElementsAssignment_4_1.eContents().get(0);
		private final Assignment cAssociationsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cAssociationsUmpleAssociationParserRuleCall_4_2_0 = (RuleCall)cAssociationsAssignment_4_2.eContents().get(0);
		private final Assignment cAssociationClassesAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cAssociationClassesUmpleAssociationClassParserRuleCall_4_3_0 = (RuleCall)cAssociationClassesAssignment_4_3.eContents().get(0);
		private final Assignment cStatemachinesAssignment_4_4 = (Assignment)cAlternatives_4.eContents().get(4);
		private final RuleCall cStatemachinesStateMachineDefinitionParserRuleCall_4_4_0 = (RuleCall)cStatemachinesAssignment_4_4.eContents().get(0);
		
		////import "platform:/resource/cruise.umple.xtext.ext.java/src-gen/cruise/umple/xtext/ext/Java.ecore" as java
		//UmpleModel:
		//	namespace=Namespace? glossary=Glossary? generate_=Generate? traceMechanism=TraceMechanism? (uses+=UseStatement |
		//	umpleElements+=UmpleElement | associations+=UmpleAssociation | associationClasses+=UmpleAssociationClass |
		//	statemachines+=StateMachineDefinition)*;
		public ParserRule getRule() { return rule; }

		//namespace=Namespace? glossary=Glossary? generate_=Generate? traceMechanism=TraceMechanism? (uses+=UseStatement |
		//umpleElements+=UmpleElement | associations+=UmpleAssociation | associationClasses+=UmpleAssociationClass |
		//statemachines+=StateMachineDefinition)*
		public Group getGroup() { return cGroup; }

		//namespace=Namespace?
		public Assignment getNamespaceAssignment_0() { return cNamespaceAssignment_0; }

		//Namespace
		public RuleCall getNamespaceNamespaceParserRuleCall_0_0() { return cNamespaceNamespaceParserRuleCall_0_0; }

		//glossary=Glossary?
		public Assignment getGlossaryAssignment_1() { return cGlossaryAssignment_1; }

		//Glossary
		public RuleCall getGlossaryGlossaryParserRuleCall_1_0() { return cGlossaryGlossaryParserRuleCall_1_0; }

		//generate_=Generate?
		public Assignment getGenerate_Assignment_2() { return cGenerate_Assignment_2; }

		//Generate
		public RuleCall getGenerate_GenerateParserRuleCall_2_0() { return cGenerate_GenerateParserRuleCall_2_0; }

		//traceMechanism=TraceMechanism?
		public Assignment getTraceMechanismAssignment_3() { return cTraceMechanismAssignment_3; }

		//TraceMechanism
		public RuleCall getTraceMechanismTraceMechanismParserRuleCall_3_0() { return cTraceMechanismTraceMechanismParserRuleCall_3_0; }

		//(uses+=UseStatement | umpleElements+=UmpleElement | associations+=UmpleAssociation |
		//associationClasses+=UmpleAssociationClass | statemachines+=StateMachineDefinition)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//uses+=UseStatement
		public Assignment getUsesAssignment_4_0() { return cUsesAssignment_4_0; }

		//UseStatement
		public RuleCall getUsesUseStatementParserRuleCall_4_0_0() { return cUsesUseStatementParserRuleCall_4_0_0; }

		//umpleElements+=UmpleElement
		public Assignment getUmpleElementsAssignment_4_1() { return cUmpleElementsAssignment_4_1; }

		//UmpleElement
		public RuleCall getUmpleElementsUmpleElementParserRuleCall_4_1_0() { return cUmpleElementsUmpleElementParserRuleCall_4_1_0; }

		//associations+=UmpleAssociation
		public Assignment getAssociationsAssignment_4_2() { return cAssociationsAssignment_4_2; }

		//UmpleAssociation
		public RuleCall getAssociationsUmpleAssociationParserRuleCall_4_2_0() { return cAssociationsUmpleAssociationParserRuleCall_4_2_0; }

		//associationClasses+=UmpleAssociationClass
		public Assignment getAssociationClassesAssignment_4_3() { return cAssociationClassesAssignment_4_3; }

		//UmpleAssociationClass
		public RuleCall getAssociationClassesUmpleAssociationClassParserRuleCall_4_3_0() { return cAssociationClassesUmpleAssociationClassParserRuleCall_4_3_0; }

		//statemachines+=StateMachineDefinition
		public Assignment getStatemachinesAssignment_4_4() { return cStatemachinesAssignment_4_4; }

		//StateMachineDefinition
		public RuleCall getStatemachinesStateMachineDefinitionParserRuleCall_4_4_0() { return cStatemachinesStateMachineDefinitionParserRuleCall_4_4_0; }
	}

	public class UmpleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UmpleElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUmpleClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUmpleInterfaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Grammar 
		//UmpleElement:
		//	UmpleClass | UmpleInterface;
		public ParserRule getRule() { return rule; }

		//UmpleClass | UmpleInterface
		public Alternatives getAlternatives() { return cAlternatives; }

		//UmpleClass
		public RuleCall getUmpleClassParserRuleCall_0() { return cUmpleClassParserRuleCall_0; }

		//UmpleInterface
		public RuleCall getUmpleInterfaceParserRuleCall_1() { return cUmpleInterfaceParserRuleCall_1; }
	}

	public class WordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Word");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSingularAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSingularSTRINGTerminalRuleCall_0_0 = (RuleCall)cSingularAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPluralAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPluralSTRINGTerminalRuleCall_2_0 = (RuleCall)cPluralAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Word:
		//	singular=STRING ":" plural=STRING ";";
		public ParserRule getRule() { return rule; }

		//singular=STRING ":" plural=STRING ";"
		public Group getGroup() { return cGroup; }

		//singular=STRING
		public Assignment getSingularAssignment_0() { return cSingularAssignment_0; }

		//STRING
		public RuleCall getSingularSTRINGTerminalRuleCall_0_0() { return cSingularSTRINGTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//plural=STRING
		public Assignment getPluralAssignment_2() { return cPluralAssignment_2; }

		//STRING
		public RuleCall getPluralSTRINGTerminalRuleCall_2_0() { return cPluralSTRINGTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class GlossaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Glossary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGlossaryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGlossaryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWordsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWordsWordParserRuleCall_3_0 = (RuleCall)cWordsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Glossary:
		//	{Glossary} "glossary" "{" words+=Word* "}";
		public ParserRule getRule() { return rule; }

		//{Glossary} "glossary" "{" words+=Word* "}"
		public Group getGroup() { return cGroup; }

		//{Glossary}
		public Action getGlossaryAction_0() { return cGlossaryAction_0; }

		//"glossary"
		public Keyword getGlossaryKeyword_1() { return cGlossaryKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//words+=Word*
		public Assignment getWordsAssignment_3() { return cWordsAssignment_3; }

		//Word
		public RuleCall getWordsWordParserRuleCall_3_0() { return cWordsWordParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class GenerateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Generate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGenerateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cJavaAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cJavaJavaKeyword_1_0_0 = (Keyword)cJavaAssignment_1_0.eContents().get(0);
		private final Assignment cPhpAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cPhpPhpKeyword_1_1_0 = (Keyword)cPhpAssignment_1_1.eContents().get(0);
		private final Assignment cRubyAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cRubyRubyKeyword_1_2_0 = (Keyword)cRubyAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Generate:
		//	"generate" (java?="Java" | Php?="Php" | Ruby="Ruby") ";";
		public ParserRule getRule() { return rule; }

		//"generate" (java?="Java" | Php?="Php" | Ruby="Ruby") ";"
		public Group getGroup() { return cGroup; }

		//"generate"
		public Keyword getGenerateKeyword_0() { return cGenerateKeyword_0; }

		//java?="Java" | Php?="Php" | Ruby="Ruby"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//java?="Java"
		public Assignment getJavaAssignment_1_0() { return cJavaAssignment_1_0; }

		//"Java"
		public Keyword getJavaJavaKeyword_1_0_0() { return cJavaJavaKeyword_1_0_0; }

		//Php?="Php"
		public Assignment getPhpAssignment_1_1() { return cPhpAssignment_1_1; }

		//"Php"
		public Keyword getPhpPhpKeyword_1_1_0() { return cPhpPhpKeyword_1_1_0; }

		//Ruby="Ruby"
		public Assignment getRubyAssignment_1_2() { return cRubyAssignment_1_2; }

		//"Ruby"
		public Keyword getRubyRubyKeyword_1_2_0() { return cRubyRubyKeyword_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class UseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFileIDParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UseStatement returns ecore::EString:
		//	"use" fileID ";";
		public ParserRule getRule() { return rule; }

		//"use" fileID ";"
		public Group getGroup() { return cGroup; }

		//"use"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }

		//fileID
		public RuleCall getFileIDParserRuleCall_1() { return cFileIDParserRuleCall_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Namespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueFileIDParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Namespace:
		//	"namespace" value=fileID ";";
		public ParserRule getRule() { return rule; }

		//"namespace" value=fileID ";"
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//value=fileID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//fileID
		public RuleCall getValueFileIDParserRuleCall_1_0() { return cValueFileIDParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class UmpleClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UmpleClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUmpleClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		private final Assignment cExternalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cExternalExternalKeyword_2_0 = (Keyword)cExternalAssignment_2.eContents().get(0);
		private final Keyword cClassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSingletonAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSingletonSingletonParserRuleCall_6_0 = (RuleCall)cSingletonAssignment_6.eContents().get(0);
		private final Assignment cKeyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cKeyKeyParserRuleCall_7_0 = (RuleCall)cKeyAssignment_7.eContents().get(0);
		private final Assignment cCodeInjectionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cCodeInjectionCodeInjectionParserRuleCall_8_0 = (RuleCall)cCodeInjectionAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cIsAKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cExtendsClassAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cExtendsClassUmpleElementCrossReference_9_1_0 = (CrossReference)cExtendsClassAssignment_9_1.eContents().get(0);
		private final RuleCall cExtendsClassUmpleElementIDTerminalRuleCall_9_1_0_1 = (RuleCall)cExtendsClassUmpleElementCrossReference_9_1_0.eContents().get(1);
		private final Group cGroup_9_2 = (Group)cGroup_9.eContents().get(2);
		private final Keyword cCommaKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final Assignment cExtendsClassAssignment_9_2_1 = (Assignment)cGroup_9_2.eContents().get(1);
		private final CrossReference cExtendsClassUmpleElementCrossReference_9_2_1_0 = (CrossReference)cExtendsClassAssignment_9_2_1.eContents().get(0);
		private final RuleCall cExtendsClassUmpleElementIDTerminalRuleCall_9_2_1_0_1 = (RuleCall)cExtendsClassUmpleElementCrossReference_9_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Assignment cAttributesAssignment_10_0 = (Assignment)cAlternatives_10.eContents().get(0);
		private final RuleCall cAttributesUmpleAttributeParserRuleCall_10_0_0 = (RuleCall)cAttributesAssignment_10_0.eContents().get(0);
		private final Assignment cSymmetricReflexiveAssociationsAssignment_10_1 = (Assignment)cAlternatives_10.eContents().get(1);
		private final RuleCall cSymmetricReflexiveAssociationsSymmetricReflexiveAssociationParserRuleCall_10_1_0 = (RuleCall)cSymmetricReflexiveAssociationsAssignment_10_1.eContents().get(0);
		private final Assignment cInlineAssociationsAssignment_10_2 = (Assignment)cAlternatives_10.eContents().get(2);
		private final RuleCall cInlineAssociationsInlineAssociationParserRuleCall_10_2_0 = (RuleCall)cInlineAssociationsAssignment_10_2.eContents().get(0);
		private final Assignment cDependsAssignment_10_3 = (Assignment)cAlternatives_10.eContents().get(3);
		private final RuleCall cDependsDependParserRuleCall_10_3_0 = (RuleCall)cDependsAssignment_10_3.eContents().get(0);
		private final Assignment cPositionsAssignment_10_4 = (Assignment)cAlternatives_10.eContents().get(4);
		private final RuleCall cPositionsPositionParserRuleCall_10_4_0 = (RuleCall)cPositionsAssignment_10_4.eContents().get(0);
		private final Assignment cStateMachinesAssignment_10_5 = (Assignment)cAlternatives_10.eContents().get(5);
		private final RuleCall cStateMachinesStateMachineParserRuleCall_10_5_0 = (RuleCall)cStateMachinesAssignment_10_5.eContents().get(0);
		private final Assignment cTraceDirectivesAssignment_10_6 = (Assignment)cAlternatives_10.eContents().get(6);
		private final RuleCall cTraceDirectivesTraceDirectiveParserRuleCall_10_6_0 = (RuleCall)cTraceDirectivesAssignment_10_6.eContents().get(0);
		private final Assignment cTraceCasesAssignment_10_7 = (Assignment)cAlternatives_10.eContents().get(7);
		private final RuleCall cTraceCasesTraceCaseParserRuleCall_10_7_0 = (RuleCall)cTraceCasesAssignment_10_7.eContents().get(0);
		private final Assignment cExternalLanguageAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cExternalLanguageExternalLanguageParserRuleCall_11_0 = (RuleCall)cExternalLanguageAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//UmpleClass:
		//	{UmpleClass} packageName=STRING? external?="external"? "class" name=ID "{" singleton?=Singleton? key=Key?
		//	codeInjection=CodeInjection? ("isA" extendsClass+=[UmpleElement] ("," extendsClass+=[UmpleElement])* ";")?
		//	(attributes+=UmpleAttribute | symmetricReflexiveAssociations+=SymmetricReflexiveAssociation |
		//	inlineAssociations+=InlineAssociation | depends+=Depend | positions+=Position | stateMachines+=StateMachine |
		//	traceDirectives+=TraceDirective | traceCases+=TraceCase)* externalLanguage=ExternalLanguage? "}";
		public ParserRule getRule() { return rule; }

		//{UmpleClass} packageName=STRING? external?="external"? "class" name=ID "{" singleton?=Singleton? key=Key?
		//codeInjection=CodeInjection? ("isA" extendsClass+=[UmpleElement] ("," extendsClass+=[UmpleElement])* ";")?
		//(attributes+=UmpleAttribute | symmetricReflexiveAssociations+=SymmetricReflexiveAssociation |
		//inlineAssociations+=InlineAssociation | depends+=Depend | positions+=Position | stateMachines+=StateMachine |
		//traceDirectives+=TraceDirective | traceCases+=TraceCase)* externalLanguage=ExternalLanguage? "}"
		public Group getGroup() { return cGroup; }

		//{UmpleClass}
		public Action getUmpleClassAction_0() { return cUmpleClassAction_0; }

		//packageName=STRING?
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }

		//STRING
		public RuleCall getPackageNameSTRINGTerminalRuleCall_1_0() { return cPackageNameSTRINGTerminalRuleCall_1_0; }

		//external?="external"?
		public Assignment getExternalAssignment_2() { return cExternalAssignment_2; }

		//"external"
		public Keyword getExternalExternalKeyword_2_0() { return cExternalExternalKeyword_2_0; }

		//"class"
		public Keyword getClassKeyword_3() { return cClassKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//singleton?=Singleton?
		public Assignment getSingletonAssignment_6() { return cSingletonAssignment_6; }

		//Singleton
		public RuleCall getSingletonSingletonParserRuleCall_6_0() { return cSingletonSingletonParserRuleCall_6_0; }

		//key=Key?
		public Assignment getKeyAssignment_7() { return cKeyAssignment_7; }

		//Key
		public RuleCall getKeyKeyParserRuleCall_7_0() { return cKeyKeyParserRuleCall_7_0; }

		//codeInjection=CodeInjection?
		public Assignment getCodeInjectionAssignment_8() { return cCodeInjectionAssignment_8; }

		//CodeInjection
		public RuleCall getCodeInjectionCodeInjectionParserRuleCall_8_0() { return cCodeInjectionCodeInjectionParserRuleCall_8_0; }

		//("isA" extendsClass+=[UmpleElement] ("," extendsClass+=[UmpleElement])* ";")?
		public Group getGroup_9() { return cGroup_9; }

		//"isA"
		public Keyword getIsAKeyword_9_0() { return cIsAKeyword_9_0; }

		//extendsClass+=[UmpleElement]
		public Assignment getExtendsClassAssignment_9_1() { return cExtendsClassAssignment_9_1; }

		//[UmpleElement]
		public CrossReference getExtendsClassUmpleElementCrossReference_9_1_0() { return cExtendsClassUmpleElementCrossReference_9_1_0; }

		//ID
		public RuleCall getExtendsClassUmpleElementIDTerminalRuleCall_9_1_0_1() { return cExtendsClassUmpleElementIDTerminalRuleCall_9_1_0_1; }

		//("," extendsClass+=[UmpleElement])*
		public Group getGroup_9_2() { return cGroup_9_2; }

		//","
		public Keyword getCommaKeyword_9_2_0() { return cCommaKeyword_9_2_0; }

		//extendsClass+=[UmpleElement]
		public Assignment getExtendsClassAssignment_9_2_1() { return cExtendsClassAssignment_9_2_1; }

		//[UmpleElement]
		public CrossReference getExtendsClassUmpleElementCrossReference_9_2_1_0() { return cExtendsClassUmpleElementCrossReference_9_2_1_0; }

		//ID
		public RuleCall getExtendsClassUmpleElementIDTerminalRuleCall_9_2_1_0_1() { return cExtendsClassUmpleElementIDTerminalRuleCall_9_2_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_9_3() { return cSemicolonKeyword_9_3; }

		//(attributes+=UmpleAttribute | symmetricReflexiveAssociations+=SymmetricReflexiveAssociation |
		//inlineAssociations+=InlineAssociation | depends+=Depend | positions+=Position | stateMachines+=StateMachine |
		//traceDirectives+=TraceDirective | traceCases+=TraceCase)*
		public Alternatives getAlternatives_10() { return cAlternatives_10; }

		//attributes+=UmpleAttribute
		public Assignment getAttributesAssignment_10_0() { return cAttributesAssignment_10_0; }

		//UmpleAttribute
		public RuleCall getAttributesUmpleAttributeParserRuleCall_10_0_0() { return cAttributesUmpleAttributeParserRuleCall_10_0_0; }

		//symmetricReflexiveAssociations+=SymmetricReflexiveAssociation
		public Assignment getSymmetricReflexiveAssociationsAssignment_10_1() { return cSymmetricReflexiveAssociationsAssignment_10_1; }

		//SymmetricReflexiveAssociation
		public RuleCall getSymmetricReflexiveAssociationsSymmetricReflexiveAssociationParserRuleCall_10_1_0() { return cSymmetricReflexiveAssociationsSymmetricReflexiveAssociationParserRuleCall_10_1_0; }

		//inlineAssociations+=InlineAssociation
		public Assignment getInlineAssociationsAssignment_10_2() { return cInlineAssociationsAssignment_10_2; }

		//InlineAssociation
		public RuleCall getInlineAssociationsInlineAssociationParserRuleCall_10_2_0() { return cInlineAssociationsInlineAssociationParserRuleCall_10_2_0; }

		//depends+=Depend
		public Assignment getDependsAssignment_10_3() { return cDependsAssignment_10_3; }

		//Depend
		public RuleCall getDependsDependParserRuleCall_10_3_0() { return cDependsDependParserRuleCall_10_3_0; }

		//positions+=Position
		public Assignment getPositionsAssignment_10_4() { return cPositionsAssignment_10_4; }

		//Position
		public RuleCall getPositionsPositionParserRuleCall_10_4_0() { return cPositionsPositionParserRuleCall_10_4_0; }

		//stateMachines+=StateMachine
		public Assignment getStateMachinesAssignment_10_5() { return cStateMachinesAssignment_10_5; }

		//StateMachine
		public RuleCall getStateMachinesStateMachineParserRuleCall_10_5_0() { return cStateMachinesStateMachineParserRuleCall_10_5_0; }

		//traceDirectives+=TraceDirective
		public Assignment getTraceDirectivesAssignment_10_6() { return cTraceDirectivesAssignment_10_6; }

		//TraceDirective
		public RuleCall getTraceDirectivesTraceDirectiveParserRuleCall_10_6_0() { return cTraceDirectivesTraceDirectiveParserRuleCall_10_6_0; }

		//traceCases+=TraceCase
		public Assignment getTraceCasesAssignment_10_7() { return cTraceCasesAssignment_10_7; }

		//TraceCase
		public RuleCall getTraceCasesTraceCaseParserRuleCall_10_7_0() { return cTraceCasesTraceCaseParserRuleCall_10_7_0; }

		//externalLanguage=ExternalLanguage?
		public Assignment getExternalLanguageAssignment_11() { return cExternalLanguageAssignment_11; }

		//ExternalLanguage
		public RuleCall getExternalLanguageExternalLanguageParserRuleCall_11_0() { return cExternalLanguageExternalLanguageParserRuleCall_11_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class ExternalLanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalLanguage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFunctionsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionsFunctionDefinitionParserRuleCall_0_0 = (RuleCall)cFunctionsAssignment_0.eContents().get(0);
		private final Assignment cRubyFunctionsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRubyFunctionsRubyFunctionParserRuleCall_1_0 = (RuleCall)cRubyFunctionsAssignment_1.eContents().get(0);
		private final Assignment cPhpFunctionsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPhpFunctionsPhpFunctionParserRuleCall_2_0 = (RuleCall)cPhpFunctionsAssignment_2.eContents().get(0);
		
		//// ExtraCode Section
		//ExternalLanguage:
		//	functions+=functionDefinition* | rubyFunctions+=rubyFunction* | phpFunctions+=phpFunction*;
		public ParserRule getRule() { return rule; }

		//functions+=functionDefinition* | rubyFunctions+=rubyFunction* | phpFunctions+=phpFunction*
		public Alternatives getAlternatives() { return cAlternatives; }

		//functions+=functionDefinition*
		public Assignment getFunctionsAssignment_0() { return cFunctionsAssignment_0; }

		//functionDefinition
		public RuleCall getFunctionsFunctionDefinitionParserRuleCall_0_0() { return cFunctionsFunctionDefinitionParserRuleCall_0_0; }

		//rubyFunctions+=rubyFunction*
		public Assignment getRubyFunctionsAssignment_1() { return cRubyFunctionsAssignment_1; }

		//rubyFunction
		public RuleCall getRubyFunctionsRubyFunctionParserRuleCall_1_0() { return cRubyFunctionsRubyFunctionParserRuleCall_1_0; }

		//phpFunctions+=phpFunction*
		public Assignment getPhpFunctionsAssignment_2() { return cPhpFunctionsAssignment_2; }

		//phpFunction
		public RuleCall getPhpFunctionsPhpFunctionParserRuleCall_2_0() { return cPhpFunctionsPhpFunctionParserRuleCall_2_0; }
	}

	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCharKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cByteKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cShortKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLongKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cFloatKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDoubleKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//PrimitiveType returns ecore::EString:
		//	"boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double";
		public ParserRule getRule() { return rule; }

		//"boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"boolean"
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }

		//"char"
		public Keyword getCharKeyword_1() { return cCharKeyword_1; }

		//"byte"
		public Keyword getByteKeyword_2() { return cByteKeyword_2; }

		//"short"
		public Keyword getShortKeyword_3() { return cShortKeyword_3; }

		//"int"
		public Keyword getIntKeyword_4() { return cIntKeyword_4; }

		//"long"
		public Keyword getLongKeyword_5() { return cLongKeyword_5; }

		//"float"
		public Keyword getFloatKeyword_6() { return cFloatKeyword_6; }

		//"double"
		public Keyword getDoubleKeyword_7() { return cDoubleKeyword_7; }
	}

	public class UmpleInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UmpleInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDependsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDependsDependParserRuleCall_3_0 = (RuleCall)cDependsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cExtraCodeAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cExtraCodeFunctionDeclarationParserRuleCall_4_0_0 = (RuleCall)cExtraCodeAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Interface can not have native code right now
		//UmpleInterface:
		//	"interface" name=ID "{" depends+=Depend* (extraCode=functionDeclaration ";")? "}";
		public ParserRule getRule() { return rule; }

		//"interface" name=ID "{" depends+=Depend* (extraCode=functionDeclaration ";")? "}"
		public Group getGroup() { return cGroup; }

		//"interface"
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//depends+=Depend*
		public Assignment getDependsAssignment_3() { return cDependsAssignment_3; }

		//Depend
		public RuleCall getDependsDependParserRuleCall_3_0() { return cDependsDependParserRuleCall_3_0; }

		//(extraCode=functionDeclaration ";")?
		public Group getGroup_4() { return cGroup_4; }

		//extraCode=functionDeclaration
		public Assignment getExtraCodeAssignment_4_0() { return cExtraCodeAssignment_4_0; }

		//functionDeclaration
		public RuleCall getExtraCodeFunctionDeclarationParserRuleCall_4_0_0() { return cExtraCodeFunctionDeclarationParserRuleCall_4_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class UmpleAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UmpleAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssociationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAssociationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAssociationsAssociationParserRuleCall_3_0 = (RuleCall)cAssociationsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UmpleAssociation:
		//	"association" name=ID? "{" associations=Association "}";
		public ParserRule getRule() { return rule; }

		//"association" name=ID? "{" associations=Association "}"
		public Group getGroup() { return cGroup; }

		//"association"
		public Keyword getAssociationKeyword_0() { return cAssociationKeyword_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//associations=Association
		public Assignment getAssociationsAssignment_3() { return cAssociationsAssignment_3; }

		//Association
		public RuleCall getAssociationsAssociationParserRuleCall_3_0() { return cAssociationsAssociationParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class UmpleAssociationClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UmpleAssociationClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssociationClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAssociationClassContentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAssociationClassContentsAssociationClassContentParserRuleCall_3_0 = (RuleCall)cAssociationClassContentsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UmpleAssociationClass:
		//	"associationClass" name=ID "{" associationClassContents+=associationClassContent* "}";
		public ParserRule getRule() { return rule; }

		//"associationClass" name=ID "{" associationClassContents+=associationClassContent* "}"
		public Group getGroup() { return cGroup; }

		//"associationClass"
		public Keyword getAssociationClassKeyword_0() { return cAssociationClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//associationClassContents+=associationClassContent*
		public Assignment getAssociationClassContentsAssignment_3() { return cAssociationClassContentsAssignment_3; }

		//associationClassContent
		public RuleCall getAssociationClassContentsAssociationClassContentParserRuleCall_3_0() { return cAssociationClassContentsAssociationClassContentParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AssociationClassContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "associationClassContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUmpleClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDependParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSingleAssociationEndParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStateMachineParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUmpleAttributeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cInlineAssociationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		////CONTENT SECTION
		//associationClassContent:
		//	UmpleClass | Depend | singleAssociationEnd | StateMachine | UmpleAttribute | InlineAssociation;
		public ParserRule getRule() { return rule; }

		//UmpleClass | Depend | singleAssociationEnd | StateMachine | UmpleAttribute | InlineAssociation
		public Alternatives getAlternatives() { return cAlternatives; }

		//UmpleClass
		public RuleCall getUmpleClassParserRuleCall_0() { return cUmpleClassParserRuleCall_0; }

		//Depend
		public RuleCall getDependParserRuleCall_1() { return cDependParserRuleCall_1; }

		//singleAssociationEnd
		public RuleCall getSingleAssociationEndParserRuleCall_2() { return cSingleAssociationEndParserRuleCall_2; }

		//StateMachine
		public RuleCall getStateMachineParserRuleCall_3() { return cStateMachineParserRuleCall_3; }

		//UmpleAttribute
		public RuleCall getUmpleAttributeParserRuleCall_4() { return cUmpleAttributeParserRuleCall_4; }

		//InlineAssociation
		public RuleCall getInlineAssociationParserRuleCall_5() { return cInlineAssociationParserRuleCall_5; }
	}

	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cType1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cType1IDTerminalRuleCall_1_0 = (RuleCall)cType1Assignment_1.eContents().get(0);
		private final Assignment cRolename1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRolename1IDTerminalRuleCall_2_0 = (RuleCall)cRolename1Assignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_3_2 = (Keyword)cAlternatives_3.eContents().get(2);
		private final Keyword cGreaterThanSignLessThanSignKeyword_3_3 = (Keyword)cAlternatives_3.eContents().get(3);
		private final RuleCall cMultiplicityParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cType2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cType2IDTerminalRuleCall_5_0 = (RuleCall)cType2Assignment_5.eContents().get(0);
		private final Assignment cRolename2Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRolename2IDTerminalRuleCall_6_0 = (RuleCall)cRolename2Assignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////ASSOCIATIONS/
		//Association:
		//	multiplicity type1=ID rolename1=ID? ("->" | "--" | "<-" | "><") multiplicity type2=ID rolename2=ID? ";";
		public ParserRule getRule() { return rule; }

		//multiplicity type1=ID rolename1=ID? ("->" | "--" | "<-" | "><") multiplicity type2=ID rolename2=ID? ";"
		public Group getGroup() { return cGroup; }

		//multiplicity
		public RuleCall getMultiplicityParserRuleCall_0() { return cMultiplicityParserRuleCall_0; }

		//type1=ID
		public Assignment getType1Assignment_1() { return cType1Assignment_1; }

		//ID
		public RuleCall getType1IDTerminalRuleCall_1_0() { return cType1IDTerminalRuleCall_1_0; }

		//rolename1=ID?
		public Assignment getRolename1Assignment_2() { return cRolename1Assignment_2; }

		//ID
		public RuleCall getRolename1IDTerminalRuleCall_2_0() { return cRolename1IDTerminalRuleCall_2_0; }

		//"->" | "--" | "<-" | "><"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_3_1() { return cHyphenMinusHyphenMinusKeyword_3_1; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_3_2() { return cLessThanSignHyphenMinusKeyword_3_2; }

		//"><"
		public Keyword getGreaterThanSignLessThanSignKeyword_3_3() { return cGreaterThanSignLessThanSignKeyword_3_3; }

		//multiplicity
		public RuleCall getMultiplicityParserRuleCall_4() { return cMultiplicityParserRuleCall_4; }

		//type2=ID
		public Assignment getType2Assignment_5() { return cType2Assignment_5; }

		//ID
		public RuleCall getType2IDTerminalRuleCall_5_0() { return cType2IDTerminalRuleCall_5_0; }

		//rolename2=ID?
		public Assignment getRolename2Assignment_6() { return cRolename2Assignment_6; }

		//ID
		public RuleCall getRolename2IDTerminalRuleCall_6_0() { return cRolename2IDTerminalRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class SymmetricReflexiveAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SymmetricReflexiveAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSelfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRolenameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRolenameIDTerminalRuleCall_2_0 = (RuleCall)cRolenameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SymmetricReflexiveAssociation:
		//	multiplicity "self" rolename=ID ";";
		public ParserRule getRule() { return rule; }

		//multiplicity "self" rolename=ID ";"
		public Group getGroup() { return cGroup; }

		//multiplicity
		public RuleCall getMultiplicityParserRuleCall_0() { return cMultiplicityParserRuleCall_0; }

		//"self"
		public Keyword getSelfKeyword_1() { return cSelfKeyword_1; }

		//rolename=ID
		public Assignment getRolenameAssignment_2() { return cRolenameAssignment_2; }

		//ID
		public RuleCall getRolenameIDTerminalRuleCall_2_0() { return cRolenameIDTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class InlineAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cRolename1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRolename1IDTerminalRuleCall_1_0 = (RuleCall)cRolename1Assignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cGreaterThanSignLessThanSignKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		private final RuleCall cMultiplicityParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeIDTerminalRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Assignment cRolename2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRolename2IDTerminalRuleCall_5_0 = (RuleCall)cRolename2Assignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//InlineAssociation:
		//	multiplicity rolename1=ID? ("->" | "--" | "<-" | "><") multiplicity type=ID rolename2=ID? ";";
		public ParserRule getRule() { return rule; }

		//multiplicity rolename1=ID? ("->" | "--" | "<-" | "><") multiplicity type=ID rolename2=ID? ";"
		public Group getGroup() { return cGroup; }

		//multiplicity
		public RuleCall getMultiplicityParserRuleCall_0() { return cMultiplicityParserRuleCall_0; }

		//rolename1=ID?
		public Assignment getRolename1Assignment_1() { return cRolename1Assignment_1; }

		//ID
		public RuleCall getRolename1IDTerminalRuleCall_1_0() { return cRolename1IDTerminalRuleCall_1_0; }

		//"->" | "--" | "<-" | "><"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0() { return cHyphenMinusGreaterThanSignKeyword_2_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_2_1() { return cHyphenMinusHyphenMinusKeyword_2_1; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_2_2() { return cLessThanSignHyphenMinusKeyword_2_2; }

		//"><"
		public Keyword getGreaterThanSignLessThanSignKeyword_2_3() { return cGreaterThanSignLessThanSignKeyword_2_3; }

		//multiplicity
		public RuleCall getMultiplicityParserRuleCall_3() { return cMultiplicityParserRuleCall_3; }

		//type=ID
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_4_0() { return cTypeIDTerminalRuleCall_4_0; }

		//rolename2=ID?
		public Assignment getRolename2Assignment_5() { return cRolename2Assignment_5; }

		//ID
		public RuleCall getRolename2IDTerminalRuleCall_5_0() { return cRolename2IDTerminalRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class SingleAssociationEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "singleAssociationEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeExtendedIDParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cRolenameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRolenameIDTerminalRuleCall_2_0 = (RuleCall)cRolenameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//singleAssociationEnd:
		//	multiplicity type=extendedID rolename=ID? ";";
		public ParserRule getRule() { return rule; }

		//multiplicity type=extendedID rolename=ID? ";"
		public Group getGroup() { return cGroup; }

		//multiplicity
		public RuleCall getMultiplicityParserRuleCall_0() { return cMultiplicityParserRuleCall_0; }

		//type=extendedID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//extendedID
		public RuleCall getTypeExtendedIDParserRuleCall_1_0() { return cTypeExtendedIDParserRuleCall_1_0; }

		//rolename=ID?
		public Assignment getRolenameAssignment_2() { return cRolenameAssignment_2; }

		//ID
		public RuleCall getRolenameIDTerminalRuleCall_2_0() { return cRolenameIDTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "multiplicity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cBoundParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cBoundParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//multiplicity returns ecore::EString:
		//	bound | bound ".." bound;
		public ParserRule getRule() { return rule; }

		//bound | bound ".." bound
		public Alternatives getAlternatives() { return cAlternatives; }

		//bound
		public RuleCall getBoundParserRuleCall_0() { return cBoundParserRuleCall_0; }

		//bound ".." bound
		public Group getGroup_1() { return cGroup_1; }

		//bound
		public RuleCall getBoundParserRuleCall_1_0() { return cBoundParserRuleCall_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_1_1() { return cFullStopFullStopKeyword_1_1; }

		//bound
		public RuleCall getBoundParserRuleCall_1_2() { return cBoundParserRuleCall_1_2; }
	}

	public class BoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//bound returns ecore::EString:
		//	INT | "*";
		public ParserRule getRule() { return rule; }

		//INT | "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class SingletonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Singleton");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSingletonAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSingletonSingletonKeyword_0_0 = (Keyword)cSingletonAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////ATTRIBUTES AND SMALLER BITS
		//Singleton:
		//	singleton?="singleton" ";";
		public ParserRule getRule() { return rule; }

		//singleton?="singleton" ";"
		public Group getGroup() { return cGroup; }

		//singleton?="singleton"
		public Assignment getSingletonAssignment_0() { return cSingletonAssignment_0; }

		//"singleton"
		public Keyword getSingletonSingletonKeyword_0_0() { return cSingletonSingletonKeyword_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class CodeInjectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CodeInjection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cBeforeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameExtendedIDParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cCodeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCodeBlockParserRuleCall_0_2_0 = (RuleCall)cCodeAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAfterKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameExtendedIDParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cCodeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCodeBlockParserRuleCall_1_2_0 = (RuleCall)cCodeAssignment_1_2.eContents().get(0);
		
		//CodeInjection:
		//	"before" name=extendedID code=block | "after" name=extendedID code=block;
		public ParserRule getRule() { return rule; }

		//"before" name=extendedID code=block | "after" name=extendedID code=block
		public Alternatives getAlternatives() { return cAlternatives; }

		//"before" name=extendedID code=block
		public Group getGroup_0() { return cGroup_0; }

		//"before"
		public Keyword getBeforeKeyword_0_0() { return cBeforeKeyword_0_0; }

		//name=extendedID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//extendedID
		public RuleCall getNameExtendedIDParserRuleCall_0_1_0() { return cNameExtendedIDParserRuleCall_0_1_0; }

		//code=block
		public Assignment getCodeAssignment_0_2() { return cCodeAssignment_0_2; }

		//block
		public RuleCall getCodeBlockParserRuleCall_0_2_0() { return cCodeBlockParserRuleCall_0_2_0; }

		//"after" name=extendedID code=block
		public Group getGroup_1() { return cGroup_1; }

		//"after"
		public Keyword getAfterKeyword_1_0() { return cAfterKeyword_1_0; }

		//name=extendedID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//extendedID
		public RuleCall getNameExtendedIDParserRuleCall_1_1_0() { return cNameExtendedIDParserRuleCall_1_1_0; }

		//code=block
		public Assignment getCodeAssignment_1_2() { return cCodeAssignment_1_2; }

		//block
		public RuleCall getCodeBlockParserRuleCall_1_2_0() { return cCodeBlockParserRuleCall_1_2_0; }
	}

	public class UmpleAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UmpleAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAutouniqueAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cAutouniqueAutouniqueKeyword_0_0_0 = (Keyword)cAutouniqueAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameExtendedIDParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cUniqueAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cUniqueUniqueKeyword_1_0_0 = (Keyword)cUniqueAssignment_1_0.eContents().get(0);
		private final Assignment cModifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cModifierModifierEnumRuleCall_1_1_0 = (RuleCall)cModifierAssignment_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cAlternatives_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_2_0_0 = (Assignment)cGroup_1_2_0.eContents().get(0);
		private final RuleCall cTypeUmpleAttributeTypeParserRuleCall_1_2_0_0_0 = (RuleCall)cTypeAssignment_1_2_0_0.eContents().get(0);
		private final Assignment cListAssignment_1_2_0_1 = (Assignment)cGroup_1_2_0.eContents().get(1);
		private final Keyword cListLeftSquareBracketRightSquareBracketKeyword_1_2_0_1_0 = (Keyword)cListAssignment_1_2_0_1.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cAlternatives_1_2.eContents().get(1);
		private final Assignment cObjectAssignment_1_2_1_0 = (Assignment)cGroup_1_2_1.eContents().get(0);
		private final CrossReference cObjectUmpleClassCrossReference_1_2_1_0_0 = (CrossReference)cObjectAssignment_1_2_1_0.eContents().get(0);
		private final RuleCall cObjectUmpleClassIDTerminalRuleCall_1_2_1_0_0_1 = (RuleCall)cObjectUmpleClassCrossReference_1_2_1_0_0.eContents().get(1);
		private final Assignment cListAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final Keyword cListLeftSquareBracketRightSquareBracketKeyword_1_2_1_1_0 = (Keyword)cListAssignment_1_2_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameExtendedIDParserRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cEqualsSignKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cValueAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cValueUmplePrimitiveTypeParserRuleCall_1_4_1_0 = (RuleCall)cValueAssignment_1_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//UmpleAttribute:
		//	autounique?="autounique" name=extendedID ";" | unique?="unique"? modifier=Modifier? (type=UmpleAttributeType
		//	list?="[]"? | object=[UmpleClass] list?="[]"?)? name=extendedID ("=" value=UmplePrimitiveType)? ";";
		public ParserRule getRule() { return rule; }

		//autounique?="autounique" name=extendedID ";" | unique?="unique"? modifier=Modifier? (type=UmpleAttributeType list?="[]"?
		//| object=[UmpleClass] list?="[]"?)? name=extendedID ("=" value=UmplePrimitiveType)? ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//autounique?="autounique" name=extendedID ";"
		public Group getGroup_0() { return cGroup_0; }

		//autounique?="autounique"
		public Assignment getAutouniqueAssignment_0_0() { return cAutouniqueAssignment_0_0; }

		//"autounique"
		public Keyword getAutouniqueAutouniqueKeyword_0_0_0() { return cAutouniqueAutouniqueKeyword_0_0_0; }

		//name=extendedID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//extendedID
		public RuleCall getNameExtendedIDParserRuleCall_0_1_0() { return cNameExtendedIDParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//unique?="unique"? modifier=Modifier? (type=UmpleAttributeType list?="[]"? | object=[UmpleClass] list?="[]"?)?
		//name=extendedID ("=" value=UmplePrimitiveType)? ";"
		public Group getGroup_1() { return cGroup_1; }

		//unique?="unique"?
		public Assignment getUniqueAssignment_1_0() { return cUniqueAssignment_1_0; }

		//"unique"
		public Keyword getUniqueUniqueKeyword_1_0_0() { return cUniqueUniqueKeyword_1_0_0; }

		//modifier=Modifier?
		public Assignment getModifierAssignment_1_1() { return cModifierAssignment_1_1; }

		//Modifier
		public RuleCall getModifierModifierEnumRuleCall_1_1_0() { return cModifierModifierEnumRuleCall_1_1_0; }

		//(type=UmpleAttributeType list?="[]"? | object=[UmpleClass] list?="[]"?)?
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }

		//type=UmpleAttributeType list?="[]"?
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//type=UmpleAttributeType
		public Assignment getTypeAssignment_1_2_0_0() { return cTypeAssignment_1_2_0_0; }

		//UmpleAttributeType
		public RuleCall getTypeUmpleAttributeTypeParserRuleCall_1_2_0_0_0() { return cTypeUmpleAttributeTypeParserRuleCall_1_2_0_0_0; }

		//list?="[]"?
		public Assignment getListAssignment_1_2_0_1() { return cListAssignment_1_2_0_1; }

		//"[]"
		public Keyword getListLeftSquareBracketRightSquareBracketKeyword_1_2_0_1_0() { return cListLeftSquareBracketRightSquareBracketKeyword_1_2_0_1_0; }

		//object=[UmpleClass] list?="[]"?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//object=[UmpleClass]
		public Assignment getObjectAssignment_1_2_1_0() { return cObjectAssignment_1_2_1_0; }

		//[UmpleClass]
		public CrossReference getObjectUmpleClassCrossReference_1_2_1_0_0() { return cObjectUmpleClassCrossReference_1_2_1_0_0; }

		//ID
		public RuleCall getObjectUmpleClassIDTerminalRuleCall_1_2_1_0_0_1() { return cObjectUmpleClassIDTerminalRuleCall_1_2_1_0_0_1; }

		//list?="[]"?
		public Assignment getListAssignment_1_2_1_1() { return cListAssignment_1_2_1_1; }

		//"[]"
		public Keyword getListLeftSquareBracketRightSquareBracketKeyword_1_2_1_1_0() { return cListLeftSquareBracketRightSquareBracketKeyword_1_2_1_1_0; }

		//name=extendedID
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }

		//extendedID
		public RuleCall getNameExtendedIDParserRuleCall_1_3_0() { return cNameExtendedIDParserRuleCall_1_3_0; }

		//("=" value=UmplePrimitiveType)?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"="
		public Keyword getEqualsSignKeyword_1_4_0() { return cEqualsSignKeyword_1_4_0; }

		//value=UmplePrimitiveType
		public Assignment getValueAssignment_1_4_1() { return cValueAssignment_1_4_1; }

		//UmplePrimitiveType
		public RuleCall getValueUmplePrimitiveTypeParserRuleCall_1_4_1_0() { return cValueUmplePrimitiveTypeParserRuleCall_1_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_5() { return cSemicolonKeyword_1_5; }
	}

	public class UmplePrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UmplePrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UmplePrimitiveType returns ecore::EString:
		//	INT | STRING;
		public ParserRule getRule() { return rule; }

		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class UmpleAttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UmpleAttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDateKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTimeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDoubleKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDoubleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntegerKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cIntegerKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cIntKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cBooleanKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cBooleanKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cStringKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cStringKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//UmpleAttributeType returns ecore::EString:
		//	"Date" | "Time" | "Double" | "double" | "Integer" | "integer" | "int" | "Boolean" | "boolean" | "String" | "string";
		public ParserRule getRule() { return rule; }

		//"Date" | "Time" | "Double" | "double" | "Integer" | "integer" | "int" | "Boolean" | "boolean" | "String" | "string"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Date"
		public Keyword getDateKeyword_0() { return cDateKeyword_0; }

		//"Time"
		public Keyword getTimeKeyword_1() { return cTimeKeyword_1; }

		//"Double"
		public Keyword getDoubleKeyword_2() { return cDoubleKeyword_2; }

		//"double"
		public Keyword getDoubleKeyword_3() { return cDoubleKeyword_3; }

		//"Integer"
		public Keyword getIntegerKeyword_4() { return cIntegerKeyword_4; }

		//"integer"
		public Keyword getIntegerKeyword_5() { return cIntegerKeyword_5; }

		//"int"
		public Keyword getIntKeyword_6() { return cIntKeyword_6; }

		//"Boolean"
		public Keyword getBooleanKeyword_7() { return cBooleanKeyword_7; }

		//"boolean"
		public Keyword getBooleanKeyword_8() { return cBooleanKeyword_8; }

		//"String"
		public Keyword getStringKeyword_9() { return cStringKeyword_9; }

		//"string"
		public Keyword getStringKeyword_10() { return cStringKeyword_10; }
	}

	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Key");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKeyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cKeyAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cKeysAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cKeysIDTerminalRuleCall_3_0_0 = (RuleCall)cKeysAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cKeysAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cKeysIDTerminalRuleCall_3_1_1_0 = (RuleCall)cKeysAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////This section can contain native Java code
		//Key:
		//	"key" {Key} "{" (keys+=ID ("," keys+=ID)*)? "}";
		public ParserRule getRule() { return rule; }

		//"key" {Key} "{" (keys+=ID ("," keys+=ID)*)? "}"
		public Group getGroup() { return cGroup; }

		//"key"
		public Keyword getKeyKeyword_0() { return cKeyKeyword_0; }

		//{Key}
		public Action getKeyAction_1() { return cKeyAction_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(keys+=ID ("," keys+=ID)*)?
		public Group getGroup_3() { return cGroup_3; }

		//keys+=ID
		public Assignment getKeysAssignment_3_0() { return cKeysAssignment_3_0; }

		//ID
		public RuleCall getKeysIDTerminalRuleCall_3_0_0() { return cKeysIDTerminalRuleCall_3_0_0; }

		//("," keys+=ID)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//keys+=ID
		public Assignment getKeysAssignment_3_1_1() { return cKeysAssignment_3_1_1; }

		//ID
		public RuleCall getKeysIDTerminalRuleCall_3_1_1_0() { return cKeysIDTerminalRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DependElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Depend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameExtendedIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Depend:
		//	"depend" name=extendedID ".*"? ";";
		public ParserRule getRule() { return rule; }

		//"depend" name=extendedID ".*"? ";"
		public Group getGroup() { return cGroup; }

		//"depend"
		public Keyword getDependKeyword_0() { return cDependKeyword_0; }

		//name=extendedID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//extendedID
		public RuleCall getNameExtendedIDParserRuleCall_1_0() { return cNameExtendedIDParserRuleCall_1_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_2() { return cFullStopAsteriskKeyword_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class StateMachineDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateMachineDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatemachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameExtendedIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatesStateParserRuleCall_3_0 = (RuleCall)cStatesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////STATEMACHINES
		//StateMachineDefinition:
		//	"statemachine" name=extendedID "{" states+=State* "}";
		public ParserRule getRule() { return rule; }

		//"statemachine" name=extendedID "{" states+=State* "}"
		public Group getGroup() { return cGroup; }

		//"statemachine"
		public Keyword getStatemachineKeyword_0() { return cStatemachineKeyword_0; }

		//name=extendedID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//extendedID
		public RuleCall getNameExtendedIDParserRuleCall_1_0() { return cNameExtendedIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//states+=State*
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }

		//State
		public RuleCall getStatesStateParserRuleCall_3_0() { return cStatesStateParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateMachine");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cENUMParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInlineStateMachineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReferencedStateMachineParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//StateMachine:
		//	ENUM | InlineStateMachine | ReferencedStateMachine;
		public ParserRule getRule() { return rule; }

		//ENUM | InlineStateMachine | ReferencedStateMachine
		public Alternatives getAlternatives() { return cAlternatives; }

		//ENUM
		public RuleCall getENUMParserRuleCall_0() { return cENUMParserRuleCall_0; }

		//InlineStateMachine
		public RuleCall getInlineStateMachineParserRuleCall_1() { return cInlineStateMachineParserRuleCall_1; }

		//ReferencedStateMachine
		public RuleCall getReferencedStateMachineParserRuleCall_2() { return cReferencedStateMachineParserRuleCall_2; }
	}

	public class InlineStateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineStateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameExtendedIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatesStateParserRuleCall_2_0 = (RuleCall)cStatesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InlineStateMachine:
		//	name=extendedID "{" states+=State* "}";
		public ParserRule getRule() { return rule; }

		//name=extendedID "{" states+=State* "}"
		public Group getGroup() { return cGroup; }

		//name=extendedID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//extendedID
		public RuleCall getNameExtendedIDParserRuleCall_0_0() { return cNameExtendedIDParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//states+=State*
		public Assignment getStatesAssignment_2() { return cStatesAssignment_2; }

		//State
		public RuleCall getStatesStateParserRuleCall_2_0() { return cStatesStateParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ReferencedStateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferencedStateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameExtendedIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMachineAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMachineStateMachineDefinitionCrossReference_2_0 = (CrossReference)cMachineAssignment_2.eContents().get(0);
		private final RuleCall cMachineStateMachineDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cMachineStateMachineDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReferencedStateMachine:
		//	name=extendedID "as" machine=[StateMachineDefinition] ";";
		public ParserRule getRule() { return rule; }

		//name=extendedID "as" machine=[StateMachineDefinition] ";"
		public Group getGroup() { return cGroup; }

		//name=extendedID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//extendedID
		public RuleCall getNameExtendedIDParserRuleCall_0_0() { return cNameExtendedIDParserRuleCall_0_0; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//machine=[StateMachineDefinition]
		public Assignment getMachineAssignment_2() { return cMachineAssignment_2; }

		//[StateMachineDefinition]
		public CrossReference getMachineStateMachineDefinitionCrossReference_2_0() { return cMachineStateMachineDefinitionCrossReference_2_0; }

		//ID
		public RuleCall getMachineStateMachineDefinitionIDTerminalRuleCall_2_0_1() { return cMachineStateMachineDefinitionIDTerminalRuleCall_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ENUMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ENUM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameExtendedIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cState1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cState1ExtendedIDParserRuleCall_2_0 = (RuleCall)cState1Assignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStatesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStatesExtendedIDParserRuleCall_3_1_0 = (RuleCall)cStatesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ENUM:
		//	name=extendedID "{" state1=extendedID ("," states+=extendedID)* "}";
		public ParserRule getRule() { return rule; }

		//name=extendedID "{" state1=extendedID ("," states+=extendedID)* "}"
		public Group getGroup() { return cGroup; }

		//name=extendedID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//extendedID
		public RuleCall getNameExtendedIDParserRuleCall_0_0() { return cNameExtendedIDParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//state1=extendedID
		public Assignment getState1Assignment_2() { return cState1Assignment_2; }

		//extendedID
		public RuleCall getState1ExtendedIDParserRuleCall_2_0() { return cState1ExtendedIDParserRuleCall_2_0; }

		//("," states+=extendedID)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//states+=extendedID
		public Assignment getStatesAssignment_3_1() { return cStatesAssignment_3_1; }

		//extendedID
		public RuleCall getStatesExtendedIDParserRuleCall_3_1_0() { return cStatesExtendedIDParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStateTraceDirectiveAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStateTraceDirectiveTraceDirectiveParserRuleCall_0_0 = (RuleCall)cStateTraceDirectiveAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cConcKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cConcurrentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cStateNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cStateNameExtendedIDParserRuleCall_1_3_0 = (RuleCall)cStateNameAssignment_1_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cAsteriskKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cStatesAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cStatesStateEntityParserRuleCall_1_5_1_0 = (RuleCall)cStatesAssignment_1_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//State:
		//	stateTraceDirective+=TraceDirective | "conc"? "concurrent"? "|"? stateName=extendedID "{" ("*"? states+=StateEntity)*
		//	"}";
		public ParserRule getRule() { return rule; }

		//stateTraceDirective+=TraceDirective | "conc"? "concurrent"? "|"? stateName=extendedID "{" ("*"? states+=StateEntity)*
		//"}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//stateTraceDirective+=TraceDirective
		public Assignment getStateTraceDirectiveAssignment_0() { return cStateTraceDirectiveAssignment_0; }

		//TraceDirective
		public RuleCall getStateTraceDirectiveTraceDirectiveParserRuleCall_0_0() { return cStateTraceDirectiveTraceDirectiveParserRuleCall_0_0; }

		//"conc"? "concurrent"? "|"? stateName=extendedID "{" ("*"? states+=StateEntity)* "}"
		public Group getGroup_1() { return cGroup_1; }

		//"conc"?
		public Keyword getConcKeyword_1_0() { return cConcKeyword_1_0; }

		//"concurrent"?
		public Keyword getConcurrentKeyword_1_1() { return cConcurrentKeyword_1_1; }

		//"|"?
		public Keyword getVerticalLineKeyword_1_2() { return cVerticalLineKeyword_1_2; }

		//stateName=extendedID
		public Assignment getStateNameAssignment_1_3() { return cStateNameAssignment_1_3; }

		//extendedID
		public RuleCall getStateNameExtendedIDParserRuleCall_1_3_0() { return cStateNameExtendedIDParserRuleCall_1_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_4() { return cLeftCurlyBracketKeyword_1_4; }

		//("*"? states+=StateEntity)*
		public Group getGroup_1_5() { return cGroup_1_5; }

		//"*"?
		public Keyword getAsteriskKeyword_1_5_0() { return cAsteriskKeyword_1_5_0; }

		//states+=StateEntity
		public Assignment getStatesAssignment_1_5_1() { return cStatesAssignment_1_5_1; }

		//StateEntity
		public RuleCall getStatesStateEntityParserRuleCall_1_5_1_0() { return cStatesStateEntityParserRuleCall_1_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_6() { return cRightCurlyBracketKeyword_1_6; }
	}

	public class StateEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTransitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntryOrExitActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cActivityParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cExtendedIDParserRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final RuleCall cStateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cExpressionAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0_0 = (RuleCall)cExpressionAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//StateEntity:
		//	Transition | EntryOrExitAction | Activity ("->" extendedID ";")? | State | expression=expression ";";
		public ParserRule getRule() { return rule; }

		//Transition | EntryOrExitAction | Activity ("->" extendedID ";")? | State | expression=expression ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Transition
		public RuleCall getTransitionParserRuleCall_0() { return cTransitionParserRuleCall_0; }

		//EntryOrExitAction
		public RuleCall getEntryOrExitActionParserRuleCall_1() { return cEntryOrExitActionParserRuleCall_1; }

		//Activity ("->" extendedID ";")?
		public Group getGroup_2() { return cGroup_2; }

		//Activity
		public RuleCall getActivityParserRuleCall_2_0() { return cActivityParserRuleCall_2_0; }

		//("->" extendedID ";")?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_1_0() { return cHyphenMinusGreaterThanSignKeyword_2_1_0; }

		//extendedID
		public RuleCall getExtendedIDParserRuleCall_2_1_1() { return cExtendedIDParserRuleCall_2_1_1; }

		//";"
		public Keyword getSemicolonKeyword_2_1_2() { return cSemicolonKeyword_2_1_2; }

		//State
		public RuleCall getStateParserRuleCall_3() { return cStateParserRuleCall_3; }

		//expression=expression ";"
		public Group getGroup_4() { return cGroup_4; }

		//expression=expression
		public Assignment getExpressionAssignment_4_0() { return cExpressionAssignment_4_0; }

		//expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0_0() { return cExpressionExpressionParserRuleCall_4_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cGuardParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cEventsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cEventsEventDefinitionParserRuleCall_0_1_0 = (RuleCall)cEventsAssignment_0_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cAAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cAActionParserRuleCall_0_3_0 = (RuleCall)cAAssignment_0_3.eContents().get(0);
		private final Assignment cStateNameAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cStateNameExtendedIDParserRuleCall_0_4_0 = (RuleCall)cStateNameAssignment_0_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cEventDefinitionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cGAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGGuardParserRuleCall_1_1_0 = (RuleCall)cGAssignment_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cAAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cAActionParserRuleCall_1_3_0 = (RuleCall)cAAssignment_1_3.eContents().get(0);
		private final Assignment cStateNameAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cStateNameExtendedIDParserRuleCall_1_4_0 = (RuleCall)cStateNameAssignment_1_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		////This covers just activities and activities that cause a state transition
		//Transition:
		//	Guard events+=EventDefinition "->" a=Action? stateName=extendedID ";" | EventDefinition g=Guard? "->" a=Action?
		//	stateName=extendedID ";";
		public ParserRule getRule() { return rule; }

		//Guard events+=EventDefinition "->" a=Action? stateName=extendedID ";" | EventDefinition g=Guard? "->" a=Action?
		//stateName=extendedID ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Guard events+=EventDefinition "->" a=Action? stateName=extendedID ";"
		public Group getGroup_0() { return cGroup_0; }

		//Guard
		public RuleCall getGuardParserRuleCall_0_0() { return cGuardParserRuleCall_0_0; }

		//events+=EventDefinition
		public Assignment getEventsAssignment_0_1() { return cEventsAssignment_0_1; }

		//EventDefinition
		public RuleCall getEventsEventDefinitionParserRuleCall_0_1_0() { return cEventsEventDefinitionParserRuleCall_0_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_2() { return cHyphenMinusGreaterThanSignKeyword_0_2; }

		//a=Action?
		public Assignment getAAssignment_0_3() { return cAAssignment_0_3; }

		//Action
		public RuleCall getAActionParserRuleCall_0_3_0() { return cAActionParserRuleCall_0_3_0; }

		//stateName=extendedID
		public Assignment getStateNameAssignment_0_4() { return cStateNameAssignment_0_4; }

		//extendedID
		public RuleCall getStateNameExtendedIDParserRuleCall_0_4_0() { return cStateNameExtendedIDParserRuleCall_0_4_0; }

		//";"
		public Keyword getSemicolonKeyword_0_5() { return cSemicolonKeyword_0_5; }

		//EventDefinition g=Guard? "->" a=Action? stateName=extendedID ";"
		public Group getGroup_1() { return cGroup_1; }

		//EventDefinition
		public RuleCall getEventDefinitionParserRuleCall_1_0() { return cEventDefinitionParserRuleCall_1_0; }

		//g=Guard?
		public Assignment getGAssignment_1_1() { return cGAssignment_1_1; }

		//Guard
		public RuleCall getGGuardParserRuleCall_1_1_0() { return cGGuardParserRuleCall_1_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_2() { return cHyphenMinusGreaterThanSignKeyword_1_2; }

		//a=Action?
		public Assignment getAAssignment_1_3() { return cAAssignment_1_3; }

		//Action
		public RuleCall getAActionParserRuleCall_1_3_0() { return cAActionParserRuleCall_1_3_0; }

		//stateName=extendedID
		public Assignment getStateNameAssignment_1_4() { return cStateNameAssignment_1_4; }

		//extendedID
		public RuleCall getStateNameExtendedIDParserRuleCall_1_4_0() { return cStateNameExtendedIDParserRuleCall_1_4_0; }

		//";"
		public Keyword getSemicolonKeyword_1_5() { return cSemicolonKeyword_1_5; }
	}

	public class EventDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEventDefinitionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cTimedEventParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEventDefinitionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cWaitEventParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cEventIDAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cEventIDIDTerminalRuleCall_2_0 = (RuleCall)cEventIDAssignment_2.eContents().get(0);
		
		//EventDefinition:
		//	{EventDefinition} TimedEvent | {EventDefinition} WaitEvent | eventID=ID;
		public ParserRule getRule() { return rule; }

		//{EventDefinition} TimedEvent | {EventDefinition} WaitEvent | eventID=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//{EventDefinition} TimedEvent
		public Group getGroup_0() { return cGroup_0; }

		//{EventDefinition}
		public Action getEventDefinitionAction_0_0() { return cEventDefinitionAction_0_0; }

		//TimedEvent
		public RuleCall getTimedEventParserRuleCall_0_1() { return cTimedEventParserRuleCall_0_1; }

		//{EventDefinition} WaitEvent
		public Group getGroup_1() { return cGroup_1; }

		//{EventDefinition}
		public Action getEventDefinitionAction_1_0() { return cEventDefinitionAction_1_0; }

		//WaitEvent
		public RuleCall getWaitEventParserRuleCall_1_1() { return cWaitEventParserRuleCall_1_1; }

		//eventID=ID
		public Assignment getEventIDAssignment_2() { return cEventIDAssignment_2; }

		//ID
		public RuleCall getEventIDIDTerminalRuleCall_2_0() { return cEventIDIDTerminalRuleCall_2_0; }
	}

	public class TimedEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimedEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAfterEveryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TimedEvent returns ecore::EString:
		//	"afterEvery" "(" (INT | ID) ")";
		public ParserRule getRule() { return rule; }

		//"afterEvery" "(" (INT | ID) ")"
		public Group getGroup() { return cGroup; }

		//"afterEvery"
		public Keyword getAfterEveryKeyword_0() { return cAfterEveryKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//INT | ID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class WaitEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WaitEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WaitEvent returns ecore::EString:
		//	"wait" "(" (INT | ID) ")";
		public ParserRule getRule() { return rule; }

		//"wait" "(" (INT | ID) ")"
		public Group getGroup() { return cGroup; }

		//"wait"
		public Keyword getWaitKeyword_0() { return cWaitKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//INT | ID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeBlockParserRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		
		//Action:
		//	"/" code=block;
		public ParserRule getRule() { return rule; }

		//"/" code=block
		public Group getGroup() { return cGroup; }

		//"/"
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }

		//code=block
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//block
		public RuleCall getCodeBlockParserRuleCall_1_0() { return cCodeBlockParserRuleCall_1_0; }
	}

	public class EntryOrExitActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntryOrExitAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cTypeEntryKeyword_0_0_0 = (Keyword)cTypeAssignment_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cTypeExitKeyword_0_1_0 = (Keyword)cTypeAssignment_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeBlockParserRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		
		//EntryOrExitAction:
		//	(type="entry" | type="exit") "/" code=block;
		public ParserRule getRule() { return rule; }

		//(type="entry" | type="exit") "/" code=block
		public Group getGroup() { return cGroup; }

		//type="entry" | type="exit"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//type="entry"
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }

		//"entry"
		public Keyword getTypeEntryKeyword_0_0_0() { return cTypeEntryKeyword_0_0_0; }

		//type="exit"
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }

		//"exit"
		public Keyword getTypeExitKeyword_0_1_0() { return cTypeExitKeyword_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//code=block
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }

		//block
		public RuleCall getCodeBlockParserRuleCall_2_0() { return cCodeBlockParserRuleCall_2_0; }
	}

	public class ActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Activity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeBlockParserRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		
		//Activity:
		//	"do" code=block;
		public ParserRule getRule() { return rule; }

		//"do" code=block
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//code=block
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//block
		public RuleCall getCodeBlockParserRuleCall_1_0() { return cCodeBlockParserRuleCall_1_0; }
	}

	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cGuardCodeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Guard:
		//	"[" GuardCode "]";
		public ParserRule getRule() { return rule; }

		//"[" GuardCode "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//GuardCode
		public RuleCall getGuardCodeParserRuleCall_1() { return cGuardCodeParserRuleCall_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class GuardCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GuardCode");
		private final Assignment cNativeExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNativeExpressionBlockParserRuleCall_0 = (RuleCall)cNativeExpressionAssignment.eContents().get(0);
		
		////This does allow for additions and modifications as well as boolean expressions
		////but it is the most comprehensive
		//GuardCode:
		//	nativeExpression=block;
		public ParserRule getRule() { return rule; }

		//nativeExpression=block
		public Assignment getNativeExpressionAssignment() { return cNativeExpressionAssignment; }

		//block
		public RuleCall getNativeExpressionBlockParserRuleCall_0() { return cNativeExpressionBlockParserRuleCall_0; }
	}

	public class PositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Position");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAAssociationPositionParserRuleCall_0_0 = (RuleCall)cAAssignment_0.eContents().get(0);
		private final Assignment cCAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCClassPositionParserRuleCall_1_0 = (RuleCall)cCAssignment_1.eContents().get(0);
		
		//Position:
		//	a=AssociationPosition | c=ClassPosition;
		public ParserRule getRule() { return rule; }

		//a=AssociationPosition | c=ClassPosition
		public Alternatives getAlternatives() { return cAlternatives; }

		//a=AssociationPosition
		public Assignment getAAssignment_0() { return cAAssignment_0; }

		//AssociationPosition
		public RuleCall getAAssociationPositionParserRuleCall_0_0() { return cAAssociationPositionParserRuleCall_0_0; }

		//c=ClassPosition
		public Assignment getCAssignment_1() { return cCAssignment_1; }

		//ClassPosition
		public RuleCall getCClassPositionParserRuleCall_1_0() { return cCClassPositionParserRuleCall_1_0; }
	}

	public class ClassPositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassPosition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPositionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Assignment cYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cYINTTerminalRuleCall_2_0 = (RuleCall)cYAssignment_2.eContents().get(0);
		private final Assignment cWidthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWidthINTTerminalRuleCall_3_0 = (RuleCall)cWidthAssignment_3.eContents().get(0);
		private final Assignment cHeightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHeightINTTerminalRuleCall_4_0 = (RuleCall)cHeightAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ClassPosition:
		//	"position" x=INT y=INT width=INT height=INT ";";
		public ParserRule getRule() { return rule; }

		//"position" x=INT y=INT width=INT height=INT ";"
		public Group getGroup() { return cGroup; }

		//"position"
		public Keyword getPositionKeyword_0() { return cPositionKeyword_0; }

		//x=INT
		public Assignment getXAssignment_1() { return cXAssignment_1; }

		//INT
		public RuleCall getXINTTerminalRuleCall_1_0() { return cXINTTerminalRuleCall_1_0; }

		//y=INT
		public Assignment getYAssignment_2() { return cYAssignment_2; }

		//INT
		public RuleCall getYINTTerminalRuleCall_2_0() { return cYINTTerminalRuleCall_2_0; }

		//width=INT
		public Assignment getWidthAssignment_3() { return cWidthAssignment_3; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_3_0() { return cWidthINTTerminalRuleCall_3_0; }

		//height=INT
		public Assignment getHeightAssignment_4() { return cHeightAssignment_4; }

		//INT
		public RuleCall getHeightINTTerminalRuleCall_4_0() { return cHeightINTTerminalRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class AssociationPositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssociationPosition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPositionAssociationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexINTTerminalRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		private final Assignment cC1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cC1CoordinateParserRuleCall_2_0 = (RuleCall)cC1Assignment_2.eContents().get(0);
		private final Assignment cC2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cC2CoordinateParserRuleCall_3_0 = (RuleCall)cC2Assignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////ERROR: UNSURE AS TO WHAT INDEX IS
		//AssociationPosition:
		//	"position.association" index=INT c1=Coordinate c2=Coordinate ";";
		public ParserRule getRule() { return rule; }

		//"position.association" index=INT c1=Coordinate c2=Coordinate ";"
		public Group getGroup() { return cGroup; }

		//"position.association"
		public Keyword getPositionAssociationKeyword_0() { return cPositionAssociationKeyword_0; }

		//index=INT
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_1_0() { return cIndexINTTerminalRuleCall_1_0; }

		//c1=Coordinate
		public Assignment getC1Assignment_2() { return cC1Assignment_2; }

		//Coordinate
		public RuleCall getC1CoordinateParserRuleCall_2_0() { return cC1CoordinateParserRuleCall_2_0; }

		//c2=Coordinate
		public Assignment getC2Assignment_3() { return cC2Assignment_3; }

		//Coordinate
		public RuleCall getC2CoordinateParserRuleCall_3_0() { return cC2CoordinateParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class CoordinateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Coordinate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cXINTTerminalRuleCall_0_0 = (RuleCall)cXAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cYINTTerminalRuleCall_2_0 = (RuleCall)cYAssignment_2.eContents().get(0);
		
		//Coordinate:
		//	x=INT "," y=INT;
		public ParserRule getRule() { return rule; }

		//x=INT "," y=INT
		public Group getGroup() { return cGroup; }

		//x=INT
		public Assignment getXAssignment_0() { return cXAssignment_0; }

		//INT
		public RuleCall getXINTTerminalRuleCall_0_0() { return cXINTTerminalRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//y=INT
		public Assignment getYAssignment_2() { return cYAssignment_2; }

		//INT
		public RuleCall getYINTTerminalRuleCall_2_0() { return cYINTTerminalRuleCall_2_0; }
	}

	public class TraceDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTraceStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTraceStartAlternatives_0_0 = (Alternatives)cTraceStartAssignment_0.eContents().get(0);
		private final Keyword cTraceStartTraceKeyword_0_0_0 = (Keyword)cTraceStartAlternatives_0_0.eContents().get(0);
		private final Keyword cTraceStartTraceKeyword_0_0_1 = (Keyword)cTraceStartAlternatives_0_0.eContents().get(1);
		private final Assignment cModelElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelElementModelElementParserRuleCall_1_0 = (RuleCall)cModelElementAssignment_1.eContents().get(0);
		private final Assignment cConditionRHSAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionRHSConditionRHSParserRuleCall_2_0 = (RuleCall)cConditionRHSAssignment_2.eContents().get(0);
		private final Assignment cElementPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cElementPatternAsteriskKeyword_3_0 = (Keyword)cElementPatternAssignment_3.eContents().get(0);
		
		//// TRACEDIRECTIVE SECTION
		/// *
		//TraceDirective:
		//  	( traceStart=("trace"|"Trace")  modelElement+=ModelElement (conditionRHS=ConditionRHS)? (elementPattern='*')? 
		//  	(for?="for" repeat=INT)? 
		//  	(during?="during" duration=INT (durationUnite=ID))? 
		//  	(hasPeriod?="period" period=INT (periodUnite=ID))?
		//	("execute" ((codeToExecute=STRING | traceRecord+=TraceRecord) |  ('{' traceRecord+=TraceRecord (','  traceRecord+=TraceRecord)*) '}') )?
		//	("until" untilCondition=TraceCondition)?
		//	("where" whereCondition=TraceCondition)?
		//	("after" afterCondition=TraceCondition)?
		//	(("activate" activateCaseName=ID ( activateOnThis?="onAllObjects" | activateOnThisThread?="onThisThreadOnly" )? (("for" repeats=INT) | ("period" period=INT (unite=ID)) | ("during" duration=INT (unite=ID)) | ('until' untilCondition=TraceCondition) )?) | ("deactivate" deactivateCaseName=ID ( "for" deactivateTime=INT (unite=ID) )? ))?)
		//	';'
		//	|
		//	(
		//	(("activate" activateCaseName=ID)
		//	|
		//	("deactivate" deactivateCaseName=ID "onThisObject" ( "for" deactivateTime=INT (unite=ID) )? ))
		//	)
		//	';';
		// * /TraceDirective:
		//	traceStart=("trace" | "Trace") modelElement+=ModelElement conditionRHS=ConditionRHS? elementPattern="*"?;
		public ParserRule getRule() { return rule; }

		//traceStart=("trace" | "Trace") modelElement+=ModelElement conditionRHS=ConditionRHS? elementPattern="*"?
		public Group getGroup() { return cGroup; }

		//traceStart=("trace" | "Trace")
		public Assignment getTraceStartAssignment_0() { return cTraceStartAssignment_0; }

		//"trace" | "Trace"
		public Alternatives getTraceStartAlternatives_0_0() { return cTraceStartAlternatives_0_0; }

		//"trace"
		public Keyword getTraceStartTraceKeyword_0_0_0() { return cTraceStartTraceKeyword_0_0_0; }

		//"Trace"
		public Keyword getTraceStartTraceKeyword_0_0_1() { return cTraceStartTraceKeyword_0_0_1; }

		//modelElement+=ModelElement
		public Assignment getModelElementAssignment_1() { return cModelElementAssignment_1; }

		//ModelElement
		public RuleCall getModelElementModelElementParserRuleCall_1_0() { return cModelElementModelElementParserRuleCall_1_0; }

		//conditionRHS=ConditionRHS?
		public Assignment getConditionRHSAssignment_2() { return cConditionRHSAssignment_2; }

		//ConditionRHS
		public RuleCall getConditionRHSConditionRHSParserRuleCall_2_0() { return cConditionRHSConditionRHSParserRuleCall_2_0; }

		//elementPattern="*"?
		public Assignment getElementPatternAssignment_3() { return cElementPatternAssignment_3; }

		//"*"
		public Keyword getElementPatternAsteriskKeyword_3_0() { return cElementPatternAsteriskKeyword_3_0; }
	}

	public class TraceCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTracecaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTraceCaseNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTraceCaseNameIDTerminalRuleCall_1_0 = (RuleCall)cTraceCaseNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTraceDirectiveAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTraceDirectiveTraceDirectiveParserRuleCall_3_0 = (RuleCall)cTraceDirectiveAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TraceCase:
		//	"tracecase" traceCaseName=ID "{" traceDirective+=TraceDirective* "}";
		public ParserRule getRule() { return rule; }

		//"tracecase" traceCaseName=ID "{" traceDirective+=TraceDirective* "}"
		public Group getGroup() { return cGroup; }

		//"tracecase"
		public Keyword getTracecaseKeyword_0() { return cTracecaseKeyword_0; }

		//traceCaseName=ID
		public Assignment getTraceCaseNameAssignment_1() { return cTraceCaseNameAssignment_1; }

		//ID
		public RuleCall getTraceCaseNameIDTerminalRuleCall_1_0() { return cTraceCaseNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//traceDirective+=TraceDirective*
		public Assignment getTraceDirectiveAssignment_3() { return cTraceDirectiveAssignment_3; }

		//TraceDirective
		public RuleCall getTraceDirectiveTraceDirectiveParserRuleCall_3_0() { return cTraceDirectiveTraceDirectiveParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TraceRecordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceRecord");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cRecordKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cObjectBeingTracedAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cObjectBeingTracedSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cObjectBeingTracedAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cTextOutputAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cTextOutputIDTerminalRuleCall_0_3_1_0 = (RuleCall)cTextOutputAssignment_0_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TraceRecord:
		//	("record" "(" objectBeingTraced=STRING ("," textOutput=ID)?) ")";
		public ParserRule getRule() { return rule; }

		//("record" "(" objectBeingTraced=STRING ("," textOutput=ID)?) ")"
		public Group getGroup() { return cGroup; }

		//"record" "(" objectBeingTraced=STRING ("," textOutput=ID)?
		public Group getGroup_0() { return cGroup_0; }

		//"record"
		public Keyword getRecordKeyword_0_0() { return cRecordKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//objectBeingTraced=STRING
		public Assignment getObjectBeingTracedAssignment_0_2() { return cObjectBeingTracedAssignment_0_2; }

		//STRING
		public RuleCall getObjectBeingTracedSTRINGTerminalRuleCall_0_2_0() { return cObjectBeingTracedSTRINGTerminalRuleCall_0_2_0; }

		//("," textOutput=ID)?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//","
		public Keyword getCommaKeyword_0_3_0() { return cCommaKeyword_0_3_0; }

		//textOutput=ID
		public Assignment getTextOutputAssignment_0_3_1() { return cTextOutputAssignment_0_3_1; }

		//ID
		public RuleCall getTextOutputIDTerminalRuleCall_0_3_1_0() { return cTextOutputIDTerminalRuleCall_0_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1() { return cRightParenthesisKeyword_1; }
	}

	public class TraceConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompoundTraceConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleTraceConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TraceCondition:
		//	CompoundTraceCondition | SimpleTraceCondition;
		public ParserRule getRule() { return rule; }

		//CompoundTraceCondition | SimpleTraceCondition
		public Alternatives getAlternatives() { return cAlternatives; }

		//CompoundTraceCondition
		public RuleCall getCompoundTraceConditionParserRuleCall_0() { return cCompoundTraceConditionParserRuleCall_0; }

		//SimpleTraceCondition
		public RuleCall getSimpleTraceConditionParserRuleCall_1() { return cSimpleTraceConditionParserRuleCall_1; }
	}

	public class CompoundTraceConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundTraceCondition");
		private final Assignment cOperandAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOperandSTRINGTerminalRuleCall_0 = (RuleCall)cOperandAssignment.eContents().get(0);
		
		//CompoundTraceCondition:
		//	operand=STRING;
		public ParserRule getRule() { return rule; }

		//operand=STRING
		public Assignment getOperandAssignment() { return cOperandAssignment; }

		//STRING
		public RuleCall getOperandSTRINGTerminalRuleCall_0() { return cOperandSTRINGTerminalRuleCall_0; }
	}

	public class SimpleTraceConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleTraceCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsModelElementParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Assignment cConditionRHSAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionRHSConditionRHSParserRuleCall_1_0 = (RuleCall)cConditionRHSAssignment_1.eContents().get(0);
		
		//SimpleTraceCondition:
		//	lhs=ModelElement conditionRHS=ConditionRHS;
		public ParserRule getRule() { return rule; }

		//lhs=ModelElement conditionRHS=ConditionRHS
		public Group getGroup() { return cGroup; }

		//lhs=ModelElement
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//ModelElement
		public RuleCall getLhsModelElementParserRuleCall_0_0() { return cLhsModelElementParserRuleCall_0_0; }

		//conditionRHS=ConditionRHS
		public Assignment getConditionRHSAssignment_1() { return cConditionRHSAssignment_1; }

		//ConditionRHS
		public RuleCall getConditionRHSConditionRHSParserRuleCall_1_0() { return cConditionRHSConditionRHSParserRuleCall_1_0; }
	}

	public class ConditionRHSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionRHS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandComparisonOperatorParserRuleCall_0_0 = (RuleCall)cOperandAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuePrimitiveTypeParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ConditionRHS:
		//	operand=ComparisonOperator value=PrimitiveType;
		public ParserRule getRule() { return rule; }

		//operand=ComparisonOperator value=PrimitiveType
		public Group getGroup() { return cGroup; }

		//operand=ComparisonOperator
		public Assignment getOperandAssignment_0() { return cOperandAssignment_0; }

		//ComparisonOperator
		public RuleCall getOperandComparisonOperatorParserRuleCall_0_0() { return cOperandComparisonOperatorParserRuleCall_0_0; }

		//value=PrimitiveType
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//PrimitiveType
		public RuleCall getValuePrimitiveTypeParserRuleCall_1_0() { return cValuePrimitiveTypeParserRuleCall_1_0; }
	}

	public class ModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cExecuteOnEntryAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final Keyword cExecuteOnEntryEntryKeyword_0_0_0_0 = (Keyword)cExecuteOnEntryAssignment_0_0_0.eContents().get(0);
		private final Assignment cExecuteOnExitAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final Keyword cExecuteOnExitExitKeyword_0_0_1_0 = (Keyword)cExecuteOnExitAssignment_0_0_1.eContents().get(0);
		private final Assignment cCflowAssignment_0_0_2 = (Assignment)cAlternatives_0_0.eContents().get(2);
		private final Keyword cCflowCflowKeyword_0_0_2_0 = (Keyword)cCflowAssignment_0_0_2.eContents().get(0);
		private final Assignment cAMethodAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAMethodIDTerminalRuleCall_0_1_0 = (RuleCall)cAMethodAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cAttributeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cAttributeUmpleAttributeCrossReference_1_0 = (CrossReference)cAttributeAssignment_1.eContents().get(0);
		private final RuleCall cAttributeUmpleAttributeIDTerminalRuleCall_1_0_1 = (RuleCall)cAttributeUmpleAttributeCrossReference_1_0.eContents().get(1);
		
		//ModelElement:
		//	(executeOnEntry?="entry" | executeOnExit?="exit" | cflow?="cflow")? aMethod=ID "()" | attribute=[UmpleAttribute];
		public ParserRule getRule() { return rule; }

		//(executeOnEntry?="entry" | executeOnExit?="exit" | cflow?="cflow")? aMethod=ID "()" | attribute=[UmpleAttribute]
		public Alternatives getAlternatives() { return cAlternatives; }

		//(executeOnEntry?="entry" | executeOnExit?="exit" | cflow?="cflow")? aMethod=ID "()"
		public Group getGroup_0() { return cGroup_0; }

		//(executeOnEntry?="entry" | executeOnExit?="exit" | cflow?="cflow")?
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//executeOnEntry?="entry"
		public Assignment getExecuteOnEntryAssignment_0_0_0() { return cExecuteOnEntryAssignment_0_0_0; }

		//"entry"
		public Keyword getExecuteOnEntryEntryKeyword_0_0_0_0() { return cExecuteOnEntryEntryKeyword_0_0_0_0; }

		//executeOnExit?="exit"
		public Assignment getExecuteOnExitAssignment_0_0_1() { return cExecuteOnExitAssignment_0_0_1; }

		//"exit"
		public Keyword getExecuteOnExitExitKeyword_0_0_1_0() { return cExecuteOnExitExitKeyword_0_0_1_0; }

		//cflow?="cflow"
		public Assignment getCflowAssignment_0_0_2() { return cCflowAssignment_0_0_2; }

		//"cflow"
		public Keyword getCflowCflowKeyword_0_0_2_0() { return cCflowCflowKeyword_0_0_2_0; }

		//aMethod=ID
		public Assignment getAMethodAssignment_0_1() { return cAMethodAssignment_0_1; }

		//ID
		public RuleCall getAMethodIDTerminalRuleCall_0_1_0() { return cAMethodIDTerminalRuleCall_0_1_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_0_2() { return cLeftParenthesisRightParenthesisKeyword_0_2; }

		//attribute=[UmpleAttribute]
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }

		//[UmpleAttribute]
		public CrossReference getAttributeUmpleAttributeCrossReference_1_0() { return cAttributeUmpleAttributeCrossReference_1_0; }

		//ID
		public RuleCall getAttributeUmpleAttributeIDTerminalRuleCall_1_0_1() { return cAttributeUmpleAttributeIDTerminalRuleCall_1_0_1; }
	}

	public class ComparisonOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//ComparisonOperator returns ecore::EString:
		//	">" | "<" | "==" | ">=" | "<=";
		public ParserRule getRule() { return rule; }

		//">" | "<" | "==" | ">=" | "<="
		public Alternatives getAlternatives() { return cAlternatives; }

		//">"
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_4() { return cLessThanSignEqualsSignKeyword_4; }
	}

	public class TraceMechanismElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceMechanism");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTraceUsingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTraceMechanismAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTraceMechanismIDTerminalRuleCall_1_0 = (RuleCall)cTraceMechanismAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TraceMechanism:
		//	"TraceUsing" traceMechanism=ID ";";
		public ParserRule getRule() { return rule; }

		//"TraceUsing" traceMechanism=ID ";"
		public Group getGroup() { return cGroup; }

		//"TraceUsing"
		public Keyword getTraceUsingKeyword_0() { return cTraceUsingKeyword_0; }

		//traceMechanism=ID
		public Assignment getTraceMechanismAssignment_1() { return cTraceMechanismAssignment_1; }

		//ID
		public RuleCall getTraceMechanismIDTerminalRuleCall_1_0() { return cTraceMechanismIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBlocksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlocksBlockStatementParserRuleCall_1_0 = (RuleCall)cBlocksAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// *
		//PropertyTraceDirective:
		//	"trace" (executeOnEntry?='entry' |executeOnExit?='exit' | cflow?='cflow' )? modelElement+=ModelElement (elementPattern='*')? ('for' repeats=INT 'during' duration=INT (unite=ID))?  
		//	("execute" ((codeToExecute=STRING | traceRecord+=TraceRecord) |  ('{' traceRecord+=TraceRecord (","  traceRecord+=TraceRecord)*) '}') )?
		//	('where' traceCondition=TraceCondition)?
		//	';';
		// * /// END OF TRACEDIRECTIVE SECTION
		/// ** EXPRESSIONS (JAVA and UMPLE)
		// *	START
		// *	Based on http://www.antlr.org/grammar/1152141644268/Java.g
		// *  The following section is based on the above grammar because, like any ANTLR grammar, Xtext must
		// *	have no left-side recursion.
		// ** /block:
		//	"{" blocks+=blockStatement* "}";
		public ParserRule getRule() { return rule; }

		//"{" blocks+=blockStatement* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//blocks+=blockStatement*
		public Assignment getBlocksAssignment_1() { return cBlocksAssignment_1; }

		//blockStatement
		public RuleCall getBlocksBlockStatementParserRuleCall_1_0() { return cBlocksBlockStatementParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class ParExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "parExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//parExpression:
		//	"(" expression ")";
		public ParserRule getRule() { return rule; }

		//"(" expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class AssignmentOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//assignmentOperator returns ecore::EString:
		//	"=" | "+=" | "-=";
		public ParserRule getRule() { return rule; }

		//"=" | "+=" | "-="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1() { return cPlusSignEqualsSignKeyword_1; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_2() { return cHyphenMinusEqualsSignKeyword_2; }
	}

	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//expressionList:
		//	expressions+=expression ("," expressions+=expression)*;
		public ParserRule getRule() { return rule; }

		//expressions+=expression ("," expressions+=expression)*
		public Group getGroup() { return cGroup; }

		//expressions+=expression
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//expression
		public RuleCall getExpressionsExpressionParserRuleCall_0_0() { return cExpressionsExpressionParserRuleCall_0_0; }

		//("," expressions+=expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expressions+=expression
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }

		//expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_1_0() { return cExpressionsExpressionParserRuleCall_1_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1ConditionalExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cAssignmentOperatorParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cExpression2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpression2ExpressionParserRuleCall_1_1_0 = (RuleCall)cExpression2Assignment_1_1.eContents().get(0);
		
		//expression:
		//	expression1=conditionalExpression (assignmentOperator expression2=expression)?;
		public ParserRule getRule() { return rule; }

		//expression1=conditionalExpression (assignmentOperator expression2=expression)?
		public Group getGroup() { return cGroup; }

		//expression1=conditionalExpression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//conditionalExpression
		public RuleCall getExpression1ConditionalExpressionParserRuleCall_0_0() { return cExpression1ConditionalExpressionParserRuleCall_0_0; }

		//(assignmentOperator expression2=expression)?
		public Group getGroup_1() { return cGroup_1; }

		//assignmentOperator
		public RuleCall getAssignmentOperatorParserRuleCall_1_0() { return cAssignmentOperatorParserRuleCall_1_0; }

		//expression2=expression
		public Assignment getExpression2Assignment_1_1() { return cExpression2Assignment_1_1; }

		//expression
		public RuleCall getExpression2ExpressionParserRuleCall_1_1_0() { return cExpression2ExpressionParserRuleCall_1_1_0; }
	}

	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "conditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1ConditionalOrExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpression2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpression2ExpressionParserRuleCall_1_1_0 = (RuleCall)cExpression2Assignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExpression3Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpression3ExpressionParserRuleCall_1_3_0 = (RuleCall)cExpression3Assignment_1_3.eContents().get(0);
		
		//conditionalExpression:
		//	expression1=conditionalOrExpression ("?" expression2=expression ":" expression3=expression)?;
		public ParserRule getRule() { return rule; }

		//expression1=conditionalOrExpression ("?" expression2=expression ":" expression3=expression)?
		public Group getGroup() { return cGroup; }

		//expression1=conditionalOrExpression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//conditionalOrExpression
		public RuleCall getExpression1ConditionalOrExpressionParserRuleCall_0_0() { return cExpression1ConditionalOrExpressionParserRuleCall_0_0; }

		//("?" expression2=expression ":" expression3=expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0() { return cQuestionMarkKeyword_1_0; }

		//expression2=expression
		public Assignment getExpression2Assignment_1_1() { return cExpression2Assignment_1_1; }

		//expression
		public RuleCall getExpression2ExpressionParserRuleCall_1_1_0() { return cExpression2ExpressionParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//expression3=expression
		public Assignment getExpression3Assignment_1_3() { return cExpression3Assignment_1_3; }

		//expression
		public RuleCall getExpression3ExpressionParserRuleCall_1_3_0() { return cExpression3ExpressionParserRuleCall_1_3_0; }
	}

	public class ConditionalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "conditionalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1ConditionalAndExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionRestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionRestConditionalAndExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionRestAssignment_1_1.eContents().get(0);
		
		//conditionalOrExpression:
		//	expression1=conditionalAndExpression ("||" expressionRest+=conditionalAndExpression)*;
		public ParserRule getRule() { return rule; }

		//expression1=conditionalAndExpression ("||" expressionRest+=conditionalAndExpression)*
		public Group getGroup() { return cGroup; }

		//expression1=conditionalAndExpression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//conditionalAndExpression
		public RuleCall getExpression1ConditionalAndExpressionParserRuleCall_0_0() { return cExpression1ConditionalAndExpressionParserRuleCall_0_0; }

		//("||" expressionRest+=conditionalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }

		//expressionRest+=conditionalAndExpression
		public Assignment getExpressionRestAssignment_1_1() { return cExpressionRestAssignment_1_1; }

		//conditionalAndExpression
		public RuleCall getExpressionRestConditionalAndExpressionParserRuleCall_1_1_0() { return cExpressionRestConditionalAndExpressionParserRuleCall_1_1_0; }
	}

	public class ConditionalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "conditionalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1EqualityExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionRestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionRestEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionRestAssignment_1_1.eContents().get(0);
		
		//conditionalAndExpression:
		//	expression1=equalityExpression ("&&" expressionRest+=equalityExpression)*;
		public ParserRule getRule() { return rule; }

		//expression1=equalityExpression ("&&" expressionRest+=equalityExpression)*
		public Group getGroup() { return cGroup; }

		//expression1=equalityExpression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//equalityExpression
		public RuleCall getExpression1EqualityExpressionParserRuleCall_0_0() { return cExpression1EqualityExpressionParserRuleCall_0_0; }

		//("&&" expressionRest+=equalityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }

		//expressionRest+=equalityExpression
		public Assignment getExpressionRestAssignment_1_1() { return cExpressionRestAssignment_1_1; }

		//equalityExpression
		public RuleCall getExpressionRestEqualityExpressionParserRuleCall_1_1_0() { return cExpressionRestEqualityExpressionParserRuleCall_1_1_0; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "equalityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1RelationalExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cExpressionRestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionRestRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionRestAssignment_1_1.eContents().get(0);
		
		//equalityExpression:
		//	expression1=relationalExpression (("==" | "!=") expressionRest+=relationalExpression)*;
		public ParserRule getRule() { return rule; }

		//expression1=relationalExpression (("==" | "!=") expressionRest+=relationalExpression)*
		public Group getGroup() { return cGroup; }

		//expression1=relationalExpression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//relationalExpression
		public RuleCall getExpression1RelationalExpressionParserRuleCall_0_0() { return cExpression1RelationalExpressionParserRuleCall_0_0; }

		//(("==" | "!=") expressionRest+=relationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"==" | "!="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0() { return cEqualsSignEqualsSignKeyword_1_0_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1() { return cExclamationMarkEqualsSignKeyword_1_0_1; }

		//expressionRest+=relationalExpression
		public Assignment getExpressionRestAssignment_1_1() { return cExpressionRestAssignment_1_1; }

		//relationalExpression
		public RuleCall getExpressionRestRelationalExpressionParserRuleCall_1_1_0() { return cExpressionRestRelationalExpressionParserRuleCall_1_1_0; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "relationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1AdditiveExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cRelationalOpParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cExpressionRestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionRestAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionRestAssignment_1_1.eContents().get(0);
		
		//relationalExpression:
		//	expression1=additiveExpression (relationalOp expressionRest+=additiveExpression)*;
		public ParserRule getRule() { return rule; }

		//expression1=additiveExpression (relationalOp expressionRest+=additiveExpression)*
		public Group getGroup() { return cGroup; }

		//expression1=additiveExpression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//additiveExpression
		public RuleCall getExpression1AdditiveExpressionParserRuleCall_0_0() { return cExpression1AdditiveExpressionParserRuleCall_0_0; }

		//(relationalOp expressionRest+=additiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//relationalOp
		public RuleCall getRelationalOpParserRuleCall_1_0() { return cRelationalOpParserRuleCall_1_0; }

		//expressionRest+=additiveExpression
		public Assignment getExpressionRestAssignment_1_1() { return cExpressionRestAssignment_1_1; }

		//additiveExpression
		public RuleCall getExpressionRestAdditiveExpressionParserRuleCall_1_1_0() { return cExpressionRestAdditiveExpressionParserRuleCall_1_1_0; }
	}

	public class RelationalOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "relationalOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//relationalOp returns ecore::EString:
		//	"<=" | "<" | ">=" | ">";
		public ParserRule getRule() { return rule; }

		//"<=" | "<" | ">=" | ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_0() { return cLessThanSignEqualsSignKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "additiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1MultiplicativeExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cExpressionRestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionRestMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionRestAssignment_1_1.eContents().get(0);
		
		//additiveExpression:
		//	expression1=multiplicativeExpression (("+" | "-") expressionRest+=multiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//expression1=multiplicativeExpression (("+" | "-") expressionRest+=multiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//expression1=multiplicativeExpression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//multiplicativeExpression
		public RuleCall getExpression1MultiplicativeExpressionParserRuleCall_0_0() { return cExpression1MultiplicativeExpressionParserRuleCall_0_0; }

		//(("+" | "-") expressionRest+=multiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"+" | "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }

		//expressionRest+=multiplicativeExpression
		public Assignment getExpressionRestAssignment_1_1() { return cExpressionRestAssignment_1_1; }

		//multiplicativeExpression
		public RuleCall getExpressionRestMultiplicativeExpressionParserRuleCall_1_1_0() { return cExpressionRestMultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "multiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1UnaryExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cPercentSignKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Assignment cExpressionRestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionRestUnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionRestAssignment_1_1.eContents().get(0);
		
		//multiplicativeExpression:
		//	expression1=unaryExpression (("*" | "/" | "%") expressionRest+=unaryExpression)*;
		public ParserRule getRule() { return rule; }

		//expression1=unaryExpression (("*" | "/" | "%") expressionRest+=unaryExpression)*
		public Group getGroup() { return cGroup; }

		//expression1=unaryExpression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//unaryExpression
		public RuleCall getExpression1UnaryExpressionParserRuleCall_0_0() { return cExpression1UnaryExpressionParserRuleCall_0_0; }

		//(("*" | "/" | "%") expressionRest+=unaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"*" | "/" | "%"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }

		//"%"
		public Keyword getPercentSignKeyword_1_0_2() { return cPercentSignKeyword_1_0_2; }

		//expressionRest+=unaryExpression
		public Assignment getExpressionRestAssignment_1_1() { return cExpressionRestAssignment_1_1; }

		//unaryExpression
		public RuleCall getExpressionRestUnaryExpressionParserRuleCall_1_1_0() { return cExpressionRestUnaryExpressionParserRuleCall_1_1_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExp1Assignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExp1UnaryExpressionParserRuleCall_0_1_0 = (RuleCall)cExp1Assignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExp1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExp1UnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cExp1Assignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cPlusSignPlusSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExp1Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExp1UnaryExpressionParserRuleCall_2_1_0 = (RuleCall)cExp1Assignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusHyphenMinusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExp1Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExp1UnaryExpressionParserRuleCall_3_1_0 = (RuleCall)cExp1Assignment_3_1.eContents().get(0);
		private final Assignment cExp2Assignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cExp2UnaryExpressionNotPlusMinusParserRuleCall_4_0 = (RuleCall)cExp2Assignment_4.eContents().get(0);
		
		//unaryExpression:
		//	"+" exp1=unaryExpression | "-" exp1=unaryExpression | "++" exp1=unaryExpression | "--" exp1=unaryExpression |
		//	exp2=unaryExpressionNotPlusMinus;
		public ParserRule getRule() { return rule; }

		//"+" exp1=unaryExpression | "-" exp1=unaryExpression | "++" exp1=unaryExpression | "--" exp1=unaryExpression |
		//exp2=unaryExpressionNotPlusMinus
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+" exp1=unaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//exp1=unaryExpression
		public Assignment getExp1Assignment_0_1() { return cExp1Assignment_0_1; }

		//unaryExpression
		public RuleCall getExp1UnaryExpressionParserRuleCall_0_1_0() { return cExp1UnaryExpressionParserRuleCall_0_1_0; }

		//"-" exp1=unaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }

		//exp1=unaryExpression
		public Assignment getExp1Assignment_1_1() { return cExp1Assignment_1_1; }

		//unaryExpression
		public RuleCall getExp1UnaryExpressionParserRuleCall_1_1_0() { return cExp1UnaryExpressionParserRuleCall_1_1_0; }

		//"++" exp1=unaryExpression
		public Group getGroup_2() { return cGroup_2; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_2_0() { return cPlusSignPlusSignKeyword_2_0; }

		//exp1=unaryExpression
		public Assignment getExp1Assignment_2_1() { return cExp1Assignment_2_1; }

		//unaryExpression
		public RuleCall getExp1UnaryExpressionParserRuleCall_2_1_0() { return cExp1UnaryExpressionParserRuleCall_2_1_0; }

		//"--" exp1=unaryExpression
		public Group getGroup_3() { return cGroup_3; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_3_0() { return cHyphenMinusHyphenMinusKeyword_3_0; }

		//exp1=unaryExpression
		public Assignment getExp1Assignment_3_1() { return cExp1Assignment_3_1; }

		//unaryExpression
		public RuleCall getExp1UnaryExpressionParserRuleCall_3_1_0() { return cExp1UnaryExpressionParserRuleCall_3_1_0; }

		//exp2=unaryExpressionNotPlusMinus
		public Assignment getExp2Assignment_4() { return cExp2Assignment_4; }

		//unaryExpressionNotPlusMinus
		public RuleCall getExp2UnaryExpressionNotPlusMinusParserRuleCall_4_0() { return cExp2UnaryExpressionNotPlusMinusParserRuleCall_4_0; }
	}

	public class UnaryExpressionNotPlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unaryExpressionNotPlusMinus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTildeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cPrimaryParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_2_1_0 = (Keyword)cAlternatives_2_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		
		//unaryExpressionNotPlusMinus:
		//	"~" unaryExpression | "!" unaryExpression | primary ("++" | "--")?;
		public ParserRule getRule() { return rule; }

		//"~" unaryExpression | "!" unaryExpression | primary ("++" | "--")?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"~" unaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//"~"
		public Keyword getTildeKeyword_0_0() { return cTildeKeyword_0_0; }

		//unaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0_1() { return cUnaryExpressionParserRuleCall_0_1; }

		//"!" unaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }

		//unaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_1_1() { return cUnaryExpressionParserRuleCall_1_1; }

		//primary ("++" | "--")?
		public Group getGroup_2() { return cGroup_2; }

		//primary
		public RuleCall getPrimaryParserRuleCall_2_0() { return cPrimaryParserRuleCall_2_0; }

		//("++" | "--")?
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_2_1_0() { return cPlusSignPlusSignKeyword_2_1_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_2_1_1() { return cHyphenMinusHyphenMinusKeyword_2_1_1; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//primary:
		//	parExpression | literal;
		public ParserRule getRule() { return rule; }

		//parExpression | literal
		public Alternatives getAlternatives() { return cAlternatives; }

		//parExpression
		public RuleCall getParExpressionParserRuleCall_0() { return cParExpressionParserRuleCall_0; }

		//literal
		public RuleCall getLiteralParserRuleCall_1() { return cLiteralParserRuleCall_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOUBLEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExtendedIDParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJavaFunctionCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Keyword cTrueKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTRUEKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cFalseKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cFALSEKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//literal:
		//	INT | DOUBLE | STRING | extendedID | javaFunctionCall | "true" | "TRUE" | "false" | "FALSE";
		public ParserRule getRule() { return rule; }

		//INT | DOUBLE | STRING | extendedID | javaFunctionCall | "true" | "TRUE" | "false" | "FALSE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//DOUBLE
		public RuleCall getDOUBLEParserRuleCall_1() { return cDOUBLEParserRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//extendedID
		public RuleCall getExtendedIDParserRuleCall_3() { return cExtendedIDParserRuleCall_3; }

		//javaFunctionCall
		public RuleCall getJavaFunctionCallParserRuleCall_4() { return cJavaFunctionCallParserRuleCall_4; }

		//"true"
		public Keyword getTrueKeyword_5() { return cTrueKeyword_5; }

		//"TRUE"
		public Keyword getTRUEKeyword_6() { return cTRUEKeyword_6; }

		//"false"
		public Keyword getFalseKeyword_7() { return cFalseKeyword_7; }

		//"FALSE"
		public Keyword getFALSEKeyword_8() { return cFALSEKeyword_8; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "functionCall");
		private final RuleCall cJavaFunctionCallParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// ** EXPRESSIONS
		// *	END
		// ** ///LANGUAGE DEPENDENT
		////Expand list with more options
		//functionCall:
		//	javaFunctionCall;
		public ParserRule getRule() { return rule; }

		//javaFunctionCall
		public RuleCall getJavaFunctionCallParserRuleCall() { return cJavaFunctionCallParserRuleCall; }
	}

	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "functionDeclaration");
		private final Assignment cJavaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cJavaJavaFunctionDeclarationParserRuleCall_0 = (RuleCall)cJavaAssignment.eContents().get(0);
		
		//functionDeclaration:
		//	java=javaFunctionDeclaration;
		public ParserRule getRule() { return rule; }

		//java=javaFunctionDeclaration
		public Assignment getJavaAssignment() { return cJavaAssignment; }

		//javaFunctionDeclaration
		public RuleCall getJavaJavaFunctionDeclarationParserRuleCall_0() { return cJavaJavaFunctionDeclarationParserRuleCall_0; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "functionDefinition");
		private final Assignment cJavaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cJavaJavaFunctionDefinitionParserRuleCall_0 = (RuleCall)cJavaAssignment.eContents().get(0);
		
		//functionDefinition:
		//	java=javaFunctionDefinition;
		public ParserRule getRule() { return rule; }

		//java=javaFunctionDefinition
		public Assignment getJavaAssignment() { return cJavaAssignment; }

		//javaFunctionDefinition
		public RuleCall getJavaJavaFunctionDefinitionParserRuleCall_0() { return cJavaJavaFunctionDefinitionParserRuleCall_0; }
	}

	public class JavaFunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "javaFunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStaticKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPublicKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cPrivateKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cProtectedKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cReturnTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cReturnTypeAttributeTypeParserRuleCall_2_0_0 = (RuleCall)cReturnTypeAssignment_2_0.eContents().get(0);
		private final Keyword cVoidKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cReferenceTypeAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cReferenceTypeIDTerminalRuleCall_2_2_0 = (RuleCall)cReferenceTypeAssignment_2_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cGroup_4_0.eContents().get(1);
		private final Assignment cArgListAssignment_4_0_1_0 = (Assignment)cGroup_4_0_1.eContents().get(0);
		private final RuleCall cArgListAttributeTypeParserRuleCall_4_0_1_0_0 = (RuleCall)cArgListAssignment_4_0_1_0.eContents().get(0);
		private final Assignment cArgListIDAssignment_4_0_1_1 = (Assignment)cGroup_4_0_1.eContents().get(1);
		private final RuleCall cArgListIDExtendedIDParserRuleCall_4_0_1_1_0 = (RuleCall)cArgListIDAssignment_4_0_1_1.eContents().get(0);
		private final Group cGroup_4_0_1_2 = (Group)cGroup_4_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_4_0_1_2_0 = (Keyword)cGroup_4_0_1_2.eContents().get(0);
		private final Assignment cArgListAssignment_4_0_1_2_1 = (Assignment)cGroup_4_0_1_2.eContents().get(1);
		private final RuleCall cArgListAttributeTypeParserRuleCall_4_0_1_2_1_0 = (RuleCall)cArgListAssignment_4_0_1_2_1.eContents().get(0);
		private final Assignment cArgListIDAssignment_4_0_1_2_2 = (Assignment)cGroup_4_0_1_2.eContents().get(2);
		private final RuleCall cArgListIDExtendedIDParserRuleCall_4_0_1_2_2_0 = (RuleCall)cArgListIDAssignment_4_0_1_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		/// ** JAVA NATIVE CODE
		// *	START
		// *	Based on http://www.antlr.org/grammar/1152141644268/Java.g
		// *  The following section is based on the above grammar because, like any ANTLR grammar, Xtext must
		// *	have no left-side recursion.
		// ** ///Methods
		//javaFunctionDeclaration:
		//	"static"? ("public" | "private" | "protected") (returnType=attributeType | "void" | referenceType=ID) name=ID ("("
		//	(argList+=attributeType argListID+=extendedID ("," argList+=attributeType argListID+=extendedID)*)? ")" | "()");
		public ParserRule getRule() { return rule; }

		//"static"? ("public" | "private" | "protected") (returnType=attributeType | "void" | referenceType=ID) name=ID ("("
		//(argList+=attributeType argListID+=extendedID ("," argList+=attributeType argListID+=extendedID)*)? ")" | "()")
		public Group getGroup() { return cGroup; }

		//"static"?
		public Keyword getStaticKeyword_0() { return cStaticKeyword_0; }

		//"public" | "private" | "protected"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"public"
		public Keyword getPublicKeyword_1_0() { return cPublicKeyword_1_0; }

		//"private"
		public Keyword getPrivateKeyword_1_1() { return cPrivateKeyword_1_1; }

		//"protected"
		public Keyword getProtectedKeyword_1_2() { return cProtectedKeyword_1_2; }

		//returnType=attributeType | "void" | referenceType=ID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//returnType=attributeType
		public Assignment getReturnTypeAssignment_2_0() { return cReturnTypeAssignment_2_0; }

		//attributeType
		public RuleCall getReturnTypeAttributeTypeParserRuleCall_2_0_0() { return cReturnTypeAttributeTypeParserRuleCall_2_0_0; }

		//"void"
		public Keyword getVoidKeyword_2_1() { return cVoidKeyword_2_1; }

		//referenceType=ID
		public Assignment getReferenceTypeAssignment_2_2() { return cReferenceTypeAssignment_2_2; }

		//ID
		public RuleCall getReferenceTypeIDTerminalRuleCall_2_2_0() { return cReferenceTypeIDTerminalRuleCall_2_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"(" (argList+=attributeType argListID+=extendedID ("," argList+=attributeType argListID+=extendedID)*)? ")" | "()"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"(" (argList+=attributeType argListID+=extendedID ("," argList+=attributeType argListID+=extendedID)*)? ")"
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0_0() { return cLeftParenthesisKeyword_4_0_0; }

		//(argList+=attributeType argListID+=extendedID ("," argList+=attributeType argListID+=extendedID)*)?
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }

		//argList+=attributeType
		public Assignment getArgListAssignment_4_0_1_0() { return cArgListAssignment_4_0_1_0; }

		//attributeType
		public RuleCall getArgListAttributeTypeParserRuleCall_4_0_1_0_0() { return cArgListAttributeTypeParserRuleCall_4_0_1_0_0; }

		//argListID+=extendedID
		public Assignment getArgListIDAssignment_4_0_1_1() { return cArgListIDAssignment_4_0_1_1; }

		//extendedID
		public RuleCall getArgListIDExtendedIDParserRuleCall_4_0_1_1_0() { return cArgListIDExtendedIDParserRuleCall_4_0_1_1_0; }

		//("," argList+=attributeType argListID+=extendedID)*
		public Group getGroup_4_0_1_2() { return cGroup_4_0_1_2; }

		//","
		public Keyword getCommaKeyword_4_0_1_2_0() { return cCommaKeyword_4_0_1_2_0; }

		//argList+=attributeType
		public Assignment getArgListAssignment_4_0_1_2_1() { return cArgListAssignment_4_0_1_2_1; }

		//attributeType
		public RuleCall getArgListAttributeTypeParserRuleCall_4_0_1_2_1_0() { return cArgListAttributeTypeParserRuleCall_4_0_1_2_1_0; }

		//argListID+=extendedID
		public Assignment getArgListIDAssignment_4_0_1_2_2() { return cArgListIDAssignment_4_0_1_2_2; }

		//extendedID
		public RuleCall getArgListIDExtendedIDParserRuleCall_4_0_1_2_2_0() { return cArgListIDExtendedIDParserRuleCall_4_0_1_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_0_2() { return cRightParenthesisKeyword_4_0_2; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_4_1() { return cLeftParenthesisRightParenthesisKeyword_4_1; }
	}

	public class JavaFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "javaFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclJavaFunctionDeclarationParserRuleCall_0_0 = (RuleCall)cDeclAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeBlockParserRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		
		//javaFunctionDefinition:
		//	decl=javaFunctionDeclaration code=block;
		public ParserRule getRule() { return rule; }

		//decl=javaFunctionDeclaration code=block
		public Group getGroup() { return cGroup; }

		//decl=javaFunctionDeclaration
		public Assignment getDeclAssignment_0() { return cDeclAssignment_0; }

		//javaFunctionDeclaration
		public RuleCall getDeclJavaFunctionDeclarationParserRuleCall_0_0() { return cDeclJavaFunctionDeclarationParserRuleCall_0_0; }

		//code=block
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//block
		public RuleCall getCodeBlockParserRuleCall_1_0() { return cCodeBlockParserRuleCall_1_0; }
	}

	public class JavaFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "javaFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameExtendedIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cArgsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cArgsExpressionListParserRuleCall_1_0_1_0 = (RuleCall)cArgsAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//javaFunctionCall:
		//	name=extendedID ("(" args=expressionList? ")" | "()");
		public ParserRule getRule() { return rule; }

		//name=extendedID ("(" args=expressionList? ")" | "()")
		public Group getGroup() { return cGroup; }

		//name=extendedID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//extendedID
		public RuleCall getNameExtendedIDParserRuleCall_0_0() { return cNameExtendedIDParserRuleCall_0_0; }

		//"(" args=expressionList? ")" | "()"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"(" args=expressionList? ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }

		//args=expressionList?
		public Assignment getArgsAssignment_1_0_1() { return cArgsAssignment_1_0_1; }

		//expressionList
		public RuleCall getArgsExpressionListParserRuleCall_1_0_1_0() { return cArgsExpressionListParserRuleCall_1_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_1() { return cLeftParenthesisRightParenthesisKeyword_1_1; }
	}

	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "blockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalVariableDeclarationStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//blockStatement:
		//	statement | localVariableDeclarationStatement;
		public ParserRule getRule() { return rule; }

		//statement | localVariableDeclarationStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }

		//localVariableDeclarationStatement
		public RuleCall getLocalVariableDeclarationStatementParserRuleCall_1() { return cLocalVariableDeclarationStatementParserRuleCall_1; }
	}

	public class LocalVariableDeclarationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "localVariableDeclarationStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLocalVariableDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//localVariableDeclarationStatement:
		//	localVariableDeclaration ";";
		public ParserRule getRule() { return rule; }

		//localVariableDeclaration ";"
		public Group getGroup() { return cGroup; }

		//localVariableDeclaration
		public RuleCall getLocalVariableDeclarationParserRuleCall_0() { return cLocalVariableDeclarationParserRuleCall_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class LocalVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "localVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAttributeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cDecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDecVariableDeclaratorsParserRuleCall_1_0 = (RuleCall)cDecAssignment_1.eContents().get(0);
		
		//localVariableDeclaration:
		//	type=attributeType dec=variableDeclarators;
		public ParserRule getRule() { return rule; }

		//type=attributeType dec=variableDeclarators
		public Group getGroup() { return cGroup; }

		//type=attributeType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//attributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_0_0() { return cTypeAttributeTypeParserRuleCall_0_0; }

		//dec=variableDeclarators
		public Assignment getDecAssignment_1() { return cDecAssignment_1; }

		//variableDeclarators
		public RuleCall getDecVariableDeclaratorsParserRuleCall_1_0() { return cDecVariableDeclaratorsParserRuleCall_1_0; }
	}

	public class VariableDeclaratorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variableDeclarators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVdVariableDeclaratorParserRuleCall_0_0 = (RuleCall)cVdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVdVariableDeclaratorParserRuleCall_1_1_0 = (RuleCall)cVdAssignment_1_1.eContents().get(0);
		
		//variableDeclarators:
		//	vd+=variableDeclarator ("," vd+=variableDeclarator)*;
		public ParserRule getRule() { return rule; }

		//vd+=variableDeclarator ("," vd+=variableDeclarator)*
		public Group getGroup() { return cGroup; }

		//vd+=variableDeclarator
		public Assignment getVdAssignment_0() { return cVdAssignment_0; }

		//variableDeclarator
		public RuleCall getVdVariableDeclaratorParserRuleCall_0_0() { return cVdVariableDeclaratorParserRuleCall_0_0; }

		//("," vd+=variableDeclarator)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//vd+=variableDeclarator
		public Assignment getVdAssignment_1_1() { return cVdAssignment_1_1; }

		//variableDeclarator
		public RuleCall getVdVariableDeclaratorParserRuleCall_1_1_0() { return cVdVariableDeclaratorParserRuleCall_1_1_0; }
	}

	public class VariableDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variableDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameExtendedIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		
		//variableDeclarator:
		//	name=extendedID ("=" exp=expression)?;
		public ParserRule getRule() { return rule; }

		//name=extendedID ("=" exp=expression)?
		public Group getGroup() { return cGroup; }

		//name=extendedID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//extendedID
		public RuleCall getNameExtendedIDParserRuleCall_0_0() { return cNameExtendedIDParserRuleCall_0_0; }

		//("=" exp=expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//exp=expression
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }

		//expression
		public RuleCall getExpExpressionParserRuleCall_1_1_0() { return cExpExpressionParserRuleCall_1_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionParExpressionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		private final Assignment cState1Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cState1StatementParserRuleCall_1_2_0 = (RuleCall)cState1Assignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cElseKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cState2Assignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cState2StatementParserRuleCall_1_3_1_0 = (RuleCall)cState2Assignment_1_3_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cControlAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cControlForControlParserRuleCall_2_2_0 = (RuleCall)cControlAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cStateAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cStateStatementParserRuleCall_2_4_0 = (RuleCall)cStateAssignment_2_4.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cWhileKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionParExpressionParserRuleCall_3_1_0 = (RuleCall)cConditionAssignment_3_1.eContents().get(0);
		private final Assignment cStateAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cStateStatementParserRuleCall_3_2_0 = (RuleCall)cStateAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cReturnKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRetValAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRetValExpressionParserRuleCall_4_1_0 = (RuleCall)cRetValAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cBreakKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cExpressionParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cTryKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTryBlockAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cTryBlockBlockParserRuleCall_8_1_0 = (RuleCall)cTryBlockAssignment_8_1.eContents().get(0);
		private final Keyword cCatchKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cCatchBlockAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cCatchBlockBlockParserRuleCall_8_3_0 = (RuleCall)cCatchBlockAssignment_8_3.eContents().get(0);
		
		//statement:
		//	block | "if" condition=parExpression state1=statement ("else" state2=statement)? | "for" "(" control=forControl ")"
		//	state=statement | "while" condition=parExpression state=statement | "return" retVal=expression? ";" | ";" | "break"
		//	";" | expression ";" | "try" tryBlock=block "catch" catchBlock=block;
		public ParserRule getRule() { return rule; }

		//block | "if" condition=parExpression state1=statement ("else" state2=statement)? | "for" "(" control=forControl ")"
		//state=statement | "while" condition=parExpression state=statement | "return" retVal=expression? ";" | ";" | "break" ";"
		//| expression ";" | "try" tryBlock=block "catch" catchBlock=block
		public Alternatives getAlternatives() { return cAlternatives; }

		//block
		public RuleCall getBlockParserRuleCall_0() { return cBlockParserRuleCall_0; }

		//"if" condition=parExpression state1=statement ("else" state2=statement)?
		public Group getGroup_1() { return cGroup_1; }

		//"if"
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }

		//condition=parExpression
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }

		//parExpression
		public RuleCall getConditionParExpressionParserRuleCall_1_1_0() { return cConditionParExpressionParserRuleCall_1_1_0; }

		//state1=statement
		public Assignment getState1Assignment_1_2() { return cState1Assignment_1_2; }

		//statement
		public RuleCall getState1StatementParserRuleCall_1_2_0() { return cState1StatementParserRuleCall_1_2_0; }

		//("else" state2=statement)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"else"
		public Keyword getElseKeyword_1_3_0() { return cElseKeyword_1_3_0; }

		//state2=statement
		public Assignment getState2Assignment_1_3_1() { return cState2Assignment_1_3_1; }

		//statement
		public RuleCall getState2StatementParserRuleCall_1_3_1_0() { return cState2StatementParserRuleCall_1_3_1_0; }

		//"for" "(" control=forControl ")" state=statement
		public Group getGroup_2() { return cGroup_2; }

		//"for"
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//control=forControl
		public Assignment getControlAssignment_2_2() { return cControlAssignment_2_2; }

		//forControl
		public RuleCall getControlForControlParserRuleCall_2_2_0() { return cControlForControlParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//state=statement
		public Assignment getStateAssignment_2_4() { return cStateAssignment_2_4; }

		//statement
		public RuleCall getStateStatementParserRuleCall_2_4_0() { return cStateStatementParserRuleCall_2_4_0; }

		//"while" condition=parExpression state=statement
		public Group getGroup_3() { return cGroup_3; }

		//"while"
		public Keyword getWhileKeyword_3_0() { return cWhileKeyword_3_0; }

		//condition=parExpression
		public Assignment getConditionAssignment_3_1() { return cConditionAssignment_3_1; }

		//parExpression
		public RuleCall getConditionParExpressionParserRuleCall_3_1_0() { return cConditionParExpressionParserRuleCall_3_1_0; }

		//state=statement
		public Assignment getStateAssignment_3_2() { return cStateAssignment_3_2; }

		//statement
		public RuleCall getStateStatementParserRuleCall_3_2_0() { return cStateStatementParserRuleCall_3_2_0; }

		//"return" retVal=expression? ";"
		public Group getGroup_4() { return cGroup_4; }

		//"return"
		public Keyword getReturnKeyword_4_0() { return cReturnKeyword_4_0; }

		//retVal=expression?
		public Assignment getRetValAssignment_4_1() { return cRetValAssignment_4_1; }

		//expression
		public RuleCall getRetValExpressionParserRuleCall_4_1_0() { return cRetValExpressionParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//"break" ";"
		public Group getGroup_6() { return cGroup_6; }

		//"break"
		public Keyword getBreakKeyword_6_0() { return cBreakKeyword_6_0; }

		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }

		//expression ";"
		public Group getGroup_7() { return cGroup_7; }

		//expression
		public RuleCall getExpressionParserRuleCall_7_0() { return cExpressionParserRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }

		//"try" tryBlock=block "catch" catchBlock=block
		public Group getGroup_8() { return cGroup_8; }

		//"try"
		public Keyword getTryKeyword_8_0() { return cTryKeyword_8_0; }

		//tryBlock=block
		public Assignment getTryBlockAssignment_8_1() { return cTryBlockAssignment_8_1; }

		//block
		public RuleCall getTryBlockBlockParserRuleCall_8_1_0() { return cTryBlockBlockParserRuleCall_8_1_0; }

		//"catch"
		public Keyword getCatchKeyword_8_2() { return cCatchKeyword_8_2; }

		//catchBlock=block
		public Assignment getCatchBlockAssignment_8_3() { return cCatchBlockAssignment_8_3; }

		//block
		public RuleCall getCatchBlockBlockParserRuleCall_8_3_0() { return cCatchBlockBlockParserRuleCall_8_3_0; }
	}

	public class ForControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "forControl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInitForInitParserRuleCall_0_0 = (RuleCall)cInitAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUpdateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUpdateForUpdateParserRuleCall_4_0 = (RuleCall)cUpdateAssignment_4.eContents().get(0);
		
		//forControl:
		//	init=forInit? ";" condition=expression? ";" update=forUpdate?;
		public ParserRule getRule() { return rule; }

		//init=forInit? ";" condition=expression? ";" update=forUpdate?
		public Group getGroup() { return cGroup; }

		//init=forInit?
		public Assignment getInitAssignment_0() { return cInitAssignment_0; }

		//forInit
		public RuleCall getInitForInitParserRuleCall_0_0() { return cInitForInitParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }

		//condition=expression?
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//update=forUpdate?
		public Assignment getUpdateAssignment_4() { return cUpdateAssignment_4; }

		//forUpdate
		public RuleCall getUpdateForUpdateParserRuleCall_4_0() { return cUpdateForUpdateParserRuleCall_4_0; }
	}

	public class ForInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "forInit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExpressionsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_0_0_0 = (RuleCall)cExpressionsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_0_1_1_0 = (RuleCall)cExpressionsAssignment_0_1_1.eContents().get(0);
		private final RuleCall cLocalVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//forInit:
		//	expressions+=expression ("," expressions+=expression)* | localVariableDeclaration;
		public ParserRule getRule() { return rule; }

		//expressions+=expression ("," expressions+=expression)* | localVariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//expressions+=expression ("," expressions+=expression)*
		public Group getGroup_0() { return cGroup_0; }

		//expressions+=expression
		public Assignment getExpressionsAssignment_0_0() { return cExpressionsAssignment_0_0; }

		//expression
		public RuleCall getExpressionsExpressionParserRuleCall_0_0_0() { return cExpressionsExpressionParserRuleCall_0_0_0; }

		//("," expressions+=expression)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//expressions+=expression
		public Assignment getExpressionsAssignment_0_1_1() { return cExpressionsAssignment_0_1_1; }

		//expression
		public RuleCall getExpressionsExpressionParserRuleCall_0_1_1_0() { return cExpressionsExpressionParserRuleCall_0_1_1_0; }

		//localVariableDeclaration
		public RuleCall getLocalVariableDeclarationParserRuleCall_1() { return cLocalVariableDeclarationParserRuleCall_1; }
	}

	public class ForUpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "forUpdate");
		private final RuleCall cExpressionListParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//forUpdate:
		//	expressionList;
		public ParserRule getRule() { return rule; }

		//expressionList
		public RuleCall getExpressionListParserRuleCall() { return cExpressionListParserRuleCall; }
	}

	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "attributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDateKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTimeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDoubleKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDoubleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntegerKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cIntegerKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cIntKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cBooleanKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cBooleanKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cStringKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cStringKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		////condictionalExpression covers all expressions except "="
		////See Expression section for details
		//attributeType returns ecore::EString:
		//	"Date" | "Time" | "Double" | "double" | "Integer" | "integer" | "int" | "Boolean" | "boolean" | "String" | "string";
		public ParserRule getRule() { return rule; }

		//"Date" | "Time" | "Double" | "double" | "Integer" | "integer" | "int" | "Boolean" | "boolean" | "String" | "string"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Date"
		public Keyword getDateKeyword_0() { return cDateKeyword_0; }

		//"Time"
		public Keyword getTimeKeyword_1() { return cTimeKeyword_1; }

		//"Double"
		public Keyword getDoubleKeyword_2() { return cDoubleKeyword_2; }

		//"double"
		public Keyword getDoubleKeyword_3() { return cDoubleKeyword_3; }

		//"Integer"
		public Keyword getIntegerKeyword_4() { return cIntegerKeyword_4; }

		//"integer"
		public Keyword getIntegerKeyword_5() { return cIntegerKeyword_5; }

		//"int"
		public Keyword getIntKeyword_6() { return cIntKeyword_6; }

		//"Boolean"
		public Keyword getBooleanKeyword_7() { return cBooleanKeyword_7; }

		//"boolean"
		public Keyword getBooleanKeyword_8() { return cBooleanKeyword_8; }

		//"String"
		public Keyword getStringKeyword_9() { return cStringKeyword_9; }

		//"string"
		public Keyword getStringKeyword_10() { return cStringKeyword_10; }
	}

	public class PhpFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "phpFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCodeblockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cCodeblockPhpBlockCrossReference_3_0 = (CrossReference)cCodeblockAssignment_3.eContents().get(0);
		private final RuleCall cCodeblockPhpBlockIDTerminalRuleCall_3_0_1 = (RuleCall)cCodeblockPhpBlockCrossReference_3_0.eContents().get(1);
		
		/// ** JAVA NATIVE CODE
		// *	END
		// ** /// PHP CODE
		//phpFunction:
		//	"public" "function" name=ID codeblock=[phpBlock];
		public ParserRule getRule() { return rule; }

		//"public" "function" name=ID codeblock=[phpBlock]
		public Group getGroup() { return cGroup; }

		//"public"
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }

		//"function"
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//codeblock=[phpBlock]
		public Assignment getCodeblockAssignment_3() { return cCodeblockAssignment_3; }

		//[phpBlock]
		public CrossReference getCodeblockPhpBlockCrossReference_3_0() { return cCodeblockPhpBlockCrossReference_3_0; }

		//ID
		public RuleCall getCodeblockPhpBlockIDTerminalRuleCall_3_0_1() { return cCodeblockPhpBlockIDTerminalRuleCall_3_0_1; }
	}

	public class PhpBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "phpBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeSTRINGTerminalRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//phpBlock:
		//	"{" code=STRING "}";
		public ParserRule getRule() { return rule; }

		//"{" code=STRING "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//code=STRING
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//STRING
		public RuleCall getCodeSTRINGTerminalRuleCall_1_0() { return cCodeSTRINGTerminalRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class RubyFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rubyFunction");
		private final RuleCall cRUBY_FUNCTIONTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Ruby Code
		//rubyFunction returns ecore::EString:
		//	RUBY_FUNCTION;
		public ParserRule getRule() { return rule; }

		//RUBY_FUNCTION
		public RuleCall getRUBY_FUNCTIONTerminalRuleCall() { return cRUBY_FUNCTIONTerminalRuleCall; }
	}

	public class ExtendedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "extendedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//extendedID returns ecore::EString:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DOUBLE returns ecore::EString:
		//	INT "." INT;
		public ParserRule getRule() { return rule; }

		//INT "." INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class FileIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fileID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCHARSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCHARSParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fileID returns ecore::EString:
		//	CHARS CHARS*;
		public ParserRule getRule() { return rule; }

		//CHARS CHARS*
		public Group getGroup() { return cGroup; }

		//CHARS
		public RuleCall getCHARSParserRuleCall_0() { return cCHARSParserRuleCall_0; }

		//CHARS*
		public RuleCall getCHARSParserRuleCall_1() { return cCHARSParserRuleCall_1; }
	}

	public class CHARSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CHARS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExtendedIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CHARS returns ecore::EString:
		//	extendedID | INT;
		public ParserRule getRule() { return rule; }

		//extendedID | INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//extendedID
		public RuleCall getExtendedIDParserRuleCall_0() { return cExtendedIDParserRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	public class ModifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIMMUTABLEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIMMUTABLEImmutableKeyword_0_0 = (Keyword)cIMMUTABLEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSETTABLEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSETTABLESettableKeyword_1_0 = (Keyword)cSETTABLEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTERNALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTERNALInternalKeyword_2_0 = (Keyword)cINTERNALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDEFAULTEDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDEFAULTEDDefaultedKeyword_3_0 = (Keyword)cDEFAULTEDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCONSTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCONSTConstKeyword_4_0 = (Keyword)cCONSTEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Modifier:
		//	IMMUTABLE="immutable" | SETTABLE="settable" | INTERNAL="internal" | DEFAULTED="defaulted" | CONST="const";
		public EnumRule getRule() { return rule; }

		//IMMUTABLE="immutable" | SETTABLE="settable" | INTERNAL="internal" | DEFAULTED="defaulted" | CONST="const"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IMMUTABLE="immutable"
		public EnumLiteralDeclaration getIMMUTABLEEnumLiteralDeclaration_0() { return cIMMUTABLEEnumLiteralDeclaration_0; }

		//"immutable"
		public Keyword getIMMUTABLEImmutableKeyword_0_0() { return cIMMUTABLEImmutableKeyword_0_0; }

		//SETTABLE="settable"
		public EnumLiteralDeclaration getSETTABLEEnumLiteralDeclaration_1() { return cSETTABLEEnumLiteralDeclaration_1; }

		//"settable"
		public Keyword getSETTABLESettableKeyword_1_0() { return cSETTABLESettableKeyword_1_0; }

		//INTERNAL="internal"
		public EnumLiteralDeclaration getINTERNALEnumLiteralDeclaration_2() { return cINTERNALEnumLiteralDeclaration_2; }

		//"internal"
		public Keyword getINTERNALInternalKeyword_2_0() { return cINTERNALInternalKeyword_2_0; }

		//DEFAULTED="defaulted"
		public EnumLiteralDeclaration getDEFAULTEDEnumLiteralDeclaration_3() { return cDEFAULTEDEnumLiteralDeclaration_3; }

		//"defaulted"
		public Keyword getDEFAULTEDDefaultedKeyword_3_0() { return cDEFAULTEDDefaultedKeyword_3_0; }

		//CONST="const"
		public EnumLiteralDeclaration getCONSTEnumLiteralDeclaration_4() { return cCONSTEnumLiteralDeclaration_4; }

		//"const"
		public Keyword getCONSTConstKeyword_4_0() { return cCONSTConstKeyword_4_0; }
	}
	
	private UmpleModelElements pUmpleModel;
	private UmpleElementElements pUmpleElement;
	private WordElements pWord;
	private GlossaryElements pGlossary;
	private GenerateElements pGenerate;
	private UseStatementElements pUseStatement;
	private NamespaceElements pNamespace;
	private UmpleClassElements pUmpleClass;
	private ExternalLanguageElements pExternalLanguage;
	private PrimitiveTypeElements pPrimitiveType;
	private UmpleInterfaceElements pUmpleInterface;
	private UmpleAssociationElements pUmpleAssociation;
	private UmpleAssociationClassElements pUmpleAssociationClass;
	private AssociationClassContentElements pAssociationClassContent;
	private AssociationElements pAssociation;
	private SymmetricReflexiveAssociationElements pSymmetricReflexiveAssociation;
	private InlineAssociationElements pInlineAssociation;
	private SingleAssociationEndElements pSingleAssociationEnd;
	private MultiplicityElements pMultiplicity;
	private BoundElements pBound;
	private SingletonElements pSingleton;
	private CodeInjectionElements pCodeInjection;
	private UmpleAttributeElements pUmpleAttribute;
	private UmplePrimitiveTypeElements pUmplePrimitiveType;
	private UmpleAttributeTypeElements pUmpleAttributeType;
	private ModifierElements unknownRuleModifier;
	private KeyElements pKey;
	private DependElements pDepend;
	private StateMachineDefinitionElements pStateMachineDefinition;
	private StateMachineElements pStateMachine;
	private InlineStateMachineElements pInlineStateMachine;
	private ReferencedStateMachineElements pReferencedStateMachine;
	private ENUMElements pENUM;
	private StateElements pState;
	private StateEntityElements pStateEntity;
	private TransitionElements pTransition;
	private EventDefinitionElements pEventDefinition;
	private TimedEventElements pTimedEvent;
	private WaitEventElements pWaitEvent;
	private ActionElements pAction;
	private EntryOrExitActionElements pEntryOrExitAction;
	private ActivityElements pActivity;
	private GuardElements pGuard;
	private GuardCodeElements pGuardCode;
	private PositionElements pPosition;
	private ClassPositionElements pClassPosition;
	private AssociationPositionElements pAssociationPosition;
	private CoordinateElements pCoordinate;
	private TraceDirectiveElements pTraceDirective;
	private TraceCaseElements pTraceCase;
	private TraceRecordElements pTraceRecord;
	private TraceConditionElements pTraceCondition;
	private CompoundTraceConditionElements pCompoundTraceCondition;
	private SimpleTraceConditionElements pSimpleTraceCondition;
	private ConditionRHSElements pConditionRHS;
	private ModelElementElements pModelElement;
	private ComparisonOperatorElements pComparisonOperator;
	private TraceMechanismElements pTraceMechanism;
	private BlockElements pBlock;
	private ParExpressionElements pParExpression;
	private AssignmentOperatorElements pAssignmentOperator;
	private ExpressionListElements pExpressionList;
	private ExpressionElements pExpression;
	private ConditionalExpressionElements pConditionalExpression;
	private ConditionalOrExpressionElements pConditionalOrExpression;
	private ConditionalAndExpressionElements pConditionalAndExpression;
	private EqualityExpressionElements pEqualityExpression;
	private RelationalExpressionElements pRelationalExpression;
	private RelationalOpElements pRelationalOp;
	private AdditiveExpressionElements pAdditiveExpression;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private UnaryExpressionElements pUnaryExpression;
	private UnaryExpressionNotPlusMinusElements pUnaryExpressionNotPlusMinus;
	private PrimaryElements pPrimary;
	private LiteralElements pLiteral;
	private FunctionCallElements pFunctionCall;
	private FunctionDeclarationElements pFunctionDeclaration;
	private FunctionDefinitionElements pFunctionDefinition;
	private JavaFunctionDeclarationElements pJavaFunctionDeclaration;
	private JavaFunctionDefinitionElements pJavaFunctionDefinition;
	private JavaFunctionCallElements pJavaFunctionCall;
	private BlockStatementElements pBlockStatement;
	private LocalVariableDeclarationStatementElements pLocalVariableDeclarationStatement;
	private LocalVariableDeclarationElements pLocalVariableDeclaration;
	private VariableDeclaratorsElements pVariableDeclarators;
	private VariableDeclaratorElements pVariableDeclarator;
	private StatementElements pStatement;
	private ForControlElements pForControl;
	private ForInitElements pForInit;
	private ForUpdateElements pForUpdate;
	private AttributeTypeElements pAttributeType;
	private PhpFunctionElements pPhpFunction;
	private PhpBlockElements pPhpBlock;
	private RubyFunctionElements pRubyFunction;
	private TerminalRule tRUBY_FUNCTION;
	private TerminalRule tDEF;
	private TerminalRule tEND;
	private ExtendedIDElements pExtendedID;
	private DOUBLEElements pDOUBLE;
	private FileIDElements pFileID;
	private CHARSElements pCHARS;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public UmpleGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import "platform:/resource/cruise.umple.xtext.ext.java/src-gen/cruise/umple/xtext/ext/Java.ecore" as java
	//UmpleModel:
	//	namespace=Namespace? glossary=Glossary? generate_=Generate? traceMechanism=TraceMechanism? (uses+=UseStatement |
	//	umpleElements+=UmpleElement | associations+=UmpleAssociation | associationClasses+=UmpleAssociationClass |
	//	statemachines+=StateMachineDefinition)*;
	public UmpleModelElements getUmpleModelAccess() {
		return (pUmpleModel != null) ? pUmpleModel : (pUmpleModel = new UmpleModelElements());
	}
	
	public ParserRule getUmpleModelRule() {
		return getUmpleModelAccess().getRule();
	}

	//// Grammar 
	//UmpleElement:
	//	UmpleClass | UmpleInterface;
	public UmpleElementElements getUmpleElementAccess() {
		return (pUmpleElement != null) ? pUmpleElement : (pUmpleElement = new UmpleElementElements());
	}
	
	public ParserRule getUmpleElementRule() {
		return getUmpleElementAccess().getRule();
	}

	//Word:
	//	singular=STRING ":" plural=STRING ";";
	public WordElements getWordAccess() {
		return (pWord != null) ? pWord : (pWord = new WordElements());
	}
	
	public ParserRule getWordRule() {
		return getWordAccess().getRule();
	}

	//Glossary:
	//	{Glossary} "glossary" "{" words+=Word* "}";
	public GlossaryElements getGlossaryAccess() {
		return (pGlossary != null) ? pGlossary : (pGlossary = new GlossaryElements());
	}
	
	public ParserRule getGlossaryRule() {
		return getGlossaryAccess().getRule();
	}

	//Generate:
	//	"generate" (java?="Java" | Php?="Php" | Ruby="Ruby") ";";
	public GenerateElements getGenerateAccess() {
		return (pGenerate != null) ? pGenerate : (pGenerate = new GenerateElements());
	}
	
	public ParserRule getGenerateRule() {
		return getGenerateAccess().getRule();
	}

	//UseStatement returns ecore::EString:
	//	"use" fileID ";";
	public UseStatementElements getUseStatementAccess() {
		return (pUseStatement != null) ? pUseStatement : (pUseStatement = new UseStatementElements());
	}
	
	public ParserRule getUseStatementRule() {
		return getUseStatementAccess().getRule();
	}

	//Namespace:
	//	"namespace" value=fileID ";";
	public NamespaceElements getNamespaceAccess() {
		return (pNamespace != null) ? pNamespace : (pNamespace = new NamespaceElements());
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}

	//UmpleClass:
	//	{UmpleClass} packageName=STRING? external?="external"? "class" name=ID "{" singleton?=Singleton? key=Key?
	//	codeInjection=CodeInjection? ("isA" extendsClass+=[UmpleElement] ("," extendsClass+=[UmpleElement])* ";")?
	//	(attributes+=UmpleAttribute | symmetricReflexiveAssociations+=SymmetricReflexiveAssociation |
	//	inlineAssociations+=InlineAssociation | depends+=Depend | positions+=Position | stateMachines+=StateMachine |
	//	traceDirectives+=TraceDirective | traceCases+=TraceCase)* externalLanguage=ExternalLanguage? "}";
	public UmpleClassElements getUmpleClassAccess() {
		return (pUmpleClass != null) ? pUmpleClass : (pUmpleClass = new UmpleClassElements());
	}
	
	public ParserRule getUmpleClassRule() {
		return getUmpleClassAccess().getRule();
	}

	//// ExtraCode Section
	//ExternalLanguage:
	//	functions+=functionDefinition* | rubyFunctions+=rubyFunction* | phpFunctions+=phpFunction*;
	public ExternalLanguageElements getExternalLanguageAccess() {
		return (pExternalLanguage != null) ? pExternalLanguage : (pExternalLanguage = new ExternalLanguageElements());
	}
	
	public ParserRule getExternalLanguageRule() {
		return getExternalLanguageAccess().getRule();
	}

	//PrimitiveType returns ecore::EString:
	//	"boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double";
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return (pPrimitiveType != null) ? pPrimitiveType : (pPrimitiveType = new PrimitiveTypeElements());
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	////Interface can not have native code right now
	//UmpleInterface:
	//	"interface" name=ID "{" depends+=Depend* (extraCode=functionDeclaration ";")? "}";
	public UmpleInterfaceElements getUmpleInterfaceAccess() {
		return (pUmpleInterface != null) ? pUmpleInterface : (pUmpleInterface = new UmpleInterfaceElements());
	}
	
	public ParserRule getUmpleInterfaceRule() {
		return getUmpleInterfaceAccess().getRule();
	}

	//UmpleAssociation:
	//	"association" name=ID? "{" associations=Association "}";
	public UmpleAssociationElements getUmpleAssociationAccess() {
		return (pUmpleAssociation != null) ? pUmpleAssociation : (pUmpleAssociation = new UmpleAssociationElements());
	}
	
	public ParserRule getUmpleAssociationRule() {
		return getUmpleAssociationAccess().getRule();
	}

	//UmpleAssociationClass:
	//	"associationClass" name=ID "{" associationClassContents+=associationClassContent* "}";
	public UmpleAssociationClassElements getUmpleAssociationClassAccess() {
		return (pUmpleAssociationClass != null) ? pUmpleAssociationClass : (pUmpleAssociationClass = new UmpleAssociationClassElements());
	}
	
	public ParserRule getUmpleAssociationClassRule() {
		return getUmpleAssociationClassAccess().getRule();
	}

	////CONTENT SECTION
	//associationClassContent:
	//	UmpleClass | Depend | singleAssociationEnd | StateMachine | UmpleAttribute | InlineAssociation;
	public AssociationClassContentElements getAssociationClassContentAccess() {
		return (pAssociationClassContent != null) ? pAssociationClassContent : (pAssociationClassContent = new AssociationClassContentElements());
	}
	
	public ParserRule getAssociationClassContentRule() {
		return getAssociationClassContentAccess().getRule();
	}

	////ASSOCIATIONS/
	//Association:
	//	multiplicity type1=ID rolename1=ID? ("->" | "--" | "<-" | "><") multiplicity type2=ID rolename2=ID? ";";
	public AssociationElements getAssociationAccess() {
		return (pAssociation != null) ? pAssociation : (pAssociation = new AssociationElements());
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}

	//SymmetricReflexiveAssociation:
	//	multiplicity "self" rolename=ID ";";
	public SymmetricReflexiveAssociationElements getSymmetricReflexiveAssociationAccess() {
		return (pSymmetricReflexiveAssociation != null) ? pSymmetricReflexiveAssociation : (pSymmetricReflexiveAssociation = new SymmetricReflexiveAssociationElements());
	}
	
	public ParserRule getSymmetricReflexiveAssociationRule() {
		return getSymmetricReflexiveAssociationAccess().getRule();
	}

	//InlineAssociation:
	//	multiplicity rolename1=ID? ("->" | "--" | "<-" | "><") multiplicity type=ID rolename2=ID? ";";
	public InlineAssociationElements getInlineAssociationAccess() {
		return (pInlineAssociation != null) ? pInlineAssociation : (pInlineAssociation = new InlineAssociationElements());
	}
	
	public ParserRule getInlineAssociationRule() {
		return getInlineAssociationAccess().getRule();
	}

	//singleAssociationEnd:
	//	multiplicity type=extendedID rolename=ID? ";";
	public SingleAssociationEndElements getSingleAssociationEndAccess() {
		return (pSingleAssociationEnd != null) ? pSingleAssociationEnd : (pSingleAssociationEnd = new SingleAssociationEndElements());
	}
	
	public ParserRule getSingleAssociationEndRule() {
		return getSingleAssociationEndAccess().getRule();
	}

	//multiplicity returns ecore::EString:
	//	bound | bound ".." bound;
	public MultiplicityElements getMultiplicityAccess() {
		return (pMultiplicity != null) ? pMultiplicity : (pMultiplicity = new MultiplicityElements());
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}

	//bound returns ecore::EString:
	//	INT | "*";
	public BoundElements getBoundAccess() {
		return (pBound != null) ? pBound : (pBound = new BoundElements());
	}
	
	public ParserRule getBoundRule() {
		return getBoundAccess().getRule();
	}

	////ATTRIBUTES AND SMALLER BITS
	//Singleton:
	//	singleton?="singleton" ";";
	public SingletonElements getSingletonAccess() {
		return (pSingleton != null) ? pSingleton : (pSingleton = new SingletonElements());
	}
	
	public ParserRule getSingletonRule() {
		return getSingletonAccess().getRule();
	}

	//CodeInjection:
	//	"before" name=extendedID code=block | "after" name=extendedID code=block;
	public CodeInjectionElements getCodeInjectionAccess() {
		return (pCodeInjection != null) ? pCodeInjection : (pCodeInjection = new CodeInjectionElements());
	}
	
	public ParserRule getCodeInjectionRule() {
		return getCodeInjectionAccess().getRule();
	}

	//UmpleAttribute:
	//	autounique?="autounique" name=extendedID ";" | unique?="unique"? modifier=Modifier? (type=UmpleAttributeType
	//	list?="[]"? | object=[UmpleClass] list?="[]"?)? name=extendedID ("=" value=UmplePrimitiveType)? ";";
	public UmpleAttributeElements getUmpleAttributeAccess() {
		return (pUmpleAttribute != null) ? pUmpleAttribute : (pUmpleAttribute = new UmpleAttributeElements());
	}
	
	public ParserRule getUmpleAttributeRule() {
		return getUmpleAttributeAccess().getRule();
	}

	//UmplePrimitiveType returns ecore::EString:
	//	INT | STRING;
	public UmplePrimitiveTypeElements getUmplePrimitiveTypeAccess() {
		return (pUmplePrimitiveType != null) ? pUmplePrimitiveType : (pUmplePrimitiveType = new UmplePrimitiveTypeElements());
	}
	
	public ParserRule getUmplePrimitiveTypeRule() {
		return getUmplePrimitiveTypeAccess().getRule();
	}

	//UmpleAttributeType returns ecore::EString:
	//	"Date" | "Time" | "Double" | "double" | "Integer" | "integer" | "int" | "Boolean" | "boolean" | "String" | "string";
	public UmpleAttributeTypeElements getUmpleAttributeTypeAccess() {
		return (pUmpleAttributeType != null) ? pUmpleAttributeType : (pUmpleAttributeType = new UmpleAttributeTypeElements());
	}
	
	public ParserRule getUmpleAttributeTypeRule() {
		return getUmpleAttributeTypeAccess().getRule();
	}

	//enum Modifier:
	//	IMMUTABLE="immutable" | SETTABLE="settable" | INTERNAL="internal" | DEFAULTED="defaulted" | CONST="const";
	public ModifierElements getModifierAccess() {
		return (unknownRuleModifier != null) ? unknownRuleModifier : (unknownRuleModifier = new ModifierElements());
	}
	
	public EnumRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	////This section can contain native Java code
	//Key:
	//	"key" {Key} "{" (keys+=ID ("," keys+=ID)*)? "}";
	public KeyElements getKeyAccess() {
		return (pKey != null) ? pKey : (pKey = new KeyElements());
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}

	//Depend:
	//	"depend" name=extendedID ".*"? ";";
	public DependElements getDependAccess() {
		return (pDepend != null) ? pDepend : (pDepend = new DependElements());
	}
	
	public ParserRule getDependRule() {
		return getDependAccess().getRule();
	}

	////STATEMACHINES
	//StateMachineDefinition:
	//	"statemachine" name=extendedID "{" states+=State* "}";
	public StateMachineDefinitionElements getStateMachineDefinitionAccess() {
		return (pStateMachineDefinition != null) ? pStateMachineDefinition : (pStateMachineDefinition = new StateMachineDefinitionElements());
	}
	
	public ParserRule getStateMachineDefinitionRule() {
		return getStateMachineDefinitionAccess().getRule();
	}

	//StateMachine:
	//	ENUM | InlineStateMachine | ReferencedStateMachine;
	public StateMachineElements getStateMachineAccess() {
		return (pStateMachine != null) ? pStateMachine : (pStateMachine = new StateMachineElements());
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}

	//InlineStateMachine:
	//	name=extendedID "{" states+=State* "}";
	public InlineStateMachineElements getInlineStateMachineAccess() {
		return (pInlineStateMachine != null) ? pInlineStateMachine : (pInlineStateMachine = new InlineStateMachineElements());
	}
	
	public ParserRule getInlineStateMachineRule() {
		return getInlineStateMachineAccess().getRule();
	}

	//ReferencedStateMachine:
	//	name=extendedID "as" machine=[StateMachineDefinition] ";";
	public ReferencedStateMachineElements getReferencedStateMachineAccess() {
		return (pReferencedStateMachine != null) ? pReferencedStateMachine : (pReferencedStateMachine = new ReferencedStateMachineElements());
	}
	
	public ParserRule getReferencedStateMachineRule() {
		return getReferencedStateMachineAccess().getRule();
	}

	//ENUM:
	//	name=extendedID "{" state1=extendedID ("," states+=extendedID)* "}";
	public ENUMElements getENUMAccess() {
		return (pENUM != null) ? pENUM : (pENUM = new ENUMElements());
	}
	
	public ParserRule getENUMRule() {
		return getENUMAccess().getRule();
	}

	//State:
	//	stateTraceDirective+=TraceDirective | "conc"? "concurrent"? "|"? stateName=extendedID "{" ("*"? states+=StateEntity)*
	//	"}";
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//StateEntity:
	//	Transition | EntryOrExitAction | Activity ("->" extendedID ";")? | State | expression=expression ";";
	public StateEntityElements getStateEntityAccess() {
		return (pStateEntity != null) ? pStateEntity : (pStateEntity = new StateEntityElements());
	}
	
	public ParserRule getStateEntityRule() {
		return getStateEntityAccess().getRule();
	}

	////This covers just activities and activities that cause a state transition
	//Transition:
	//	Guard events+=EventDefinition "->" a=Action? stateName=extendedID ";" | EventDefinition g=Guard? "->" a=Action?
	//	stateName=extendedID ";";
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//EventDefinition:
	//	{EventDefinition} TimedEvent | {EventDefinition} WaitEvent | eventID=ID;
	public EventDefinitionElements getEventDefinitionAccess() {
		return (pEventDefinition != null) ? pEventDefinition : (pEventDefinition = new EventDefinitionElements());
	}
	
	public ParserRule getEventDefinitionRule() {
		return getEventDefinitionAccess().getRule();
	}

	//TimedEvent returns ecore::EString:
	//	"afterEvery" "(" (INT | ID) ")";
	public TimedEventElements getTimedEventAccess() {
		return (pTimedEvent != null) ? pTimedEvent : (pTimedEvent = new TimedEventElements());
	}
	
	public ParserRule getTimedEventRule() {
		return getTimedEventAccess().getRule();
	}

	//WaitEvent returns ecore::EString:
	//	"wait" "(" (INT | ID) ")";
	public WaitEventElements getWaitEventAccess() {
		return (pWaitEvent != null) ? pWaitEvent : (pWaitEvent = new WaitEventElements());
	}
	
	public ParserRule getWaitEventRule() {
		return getWaitEventAccess().getRule();
	}

	//Action:
	//	"/" code=block;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//EntryOrExitAction:
	//	(type="entry" | type="exit") "/" code=block;
	public EntryOrExitActionElements getEntryOrExitActionAccess() {
		return (pEntryOrExitAction != null) ? pEntryOrExitAction : (pEntryOrExitAction = new EntryOrExitActionElements());
	}
	
	public ParserRule getEntryOrExitActionRule() {
		return getEntryOrExitActionAccess().getRule();
	}

	//Activity:
	//	"do" code=block;
	public ActivityElements getActivityAccess() {
		return (pActivity != null) ? pActivity : (pActivity = new ActivityElements());
	}
	
	public ParserRule getActivityRule() {
		return getActivityAccess().getRule();
	}

	//Guard:
	//	"[" GuardCode "]";
	public GuardElements getGuardAccess() {
		return (pGuard != null) ? pGuard : (pGuard = new GuardElements());
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	////This does allow for additions and modifications as well as boolean expressions
	////but it is the most comprehensive
	//GuardCode:
	//	nativeExpression=block;
	public GuardCodeElements getGuardCodeAccess() {
		return (pGuardCode != null) ? pGuardCode : (pGuardCode = new GuardCodeElements());
	}
	
	public ParserRule getGuardCodeRule() {
		return getGuardCodeAccess().getRule();
	}

	//Position:
	//	a=AssociationPosition | c=ClassPosition;
	public PositionElements getPositionAccess() {
		return (pPosition != null) ? pPosition : (pPosition = new PositionElements());
	}
	
	public ParserRule getPositionRule() {
		return getPositionAccess().getRule();
	}

	//ClassPosition:
	//	"position" x=INT y=INT width=INT height=INT ";";
	public ClassPositionElements getClassPositionAccess() {
		return (pClassPosition != null) ? pClassPosition : (pClassPosition = new ClassPositionElements());
	}
	
	public ParserRule getClassPositionRule() {
		return getClassPositionAccess().getRule();
	}

	////ERROR: UNSURE AS TO WHAT INDEX IS
	//AssociationPosition:
	//	"position.association" index=INT c1=Coordinate c2=Coordinate ";";
	public AssociationPositionElements getAssociationPositionAccess() {
		return (pAssociationPosition != null) ? pAssociationPosition : (pAssociationPosition = new AssociationPositionElements());
	}
	
	public ParserRule getAssociationPositionRule() {
		return getAssociationPositionAccess().getRule();
	}

	//Coordinate:
	//	x=INT "," y=INT;
	public CoordinateElements getCoordinateAccess() {
		return (pCoordinate != null) ? pCoordinate : (pCoordinate = new CoordinateElements());
	}
	
	public ParserRule getCoordinateRule() {
		return getCoordinateAccess().getRule();
	}

	//// TRACEDIRECTIVE SECTION
	/// *
	//TraceDirective:
	//  	( traceStart=("trace"|"Trace")  modelElement+=ModelElement (conditionRHS=ConditionRHS)? (elementPattern='*')? 
	//  	(for?="for" repeat=INT)? 
	//  	(during?="during" duration=INT (durationUnite=ID))? 
	//  	(hasPeriod?="period" period=INT (periodUnite=ID))?
	//	("execute" ((codeToExecute=STRING | traceRecord+=TraceRecord) |  ('{' traceRecord+=TraceRecord (','  traceRecord+=TraceRecord)*) '}') )?
	//	("until" untilCondition=TraceCondition)?
	//	("where" whereCondition=TraceCondition)?
	//	("after" afterCondition=TraceCondition)?
	//	(("activate" activateCaseName=ID ( activateOnThis?="onAllObjects" | activateOnThisThread?="onThisThreadOnly" )? (("for" repeats=INT) | ("period" period=INT (unite=ID)) | ("during" duration=INT (unite=ID)) | ('until' untilCondition=TraceCondition) )?) | ("deactivate" deactivateCaseName=ID ( "for" deactivateTime=INT (unite=ID) )? ))?)
	//	';'
	//	|
	//	(
	//	(("activate" activateCaseName=ID)
	//	|
	//	("deactivate" deactivateCaseName=ID "onThisObject" ( "for" deactivateTime=INT (unite=ID) )? ))
	//	)
	//	';';
	// * /TraceDirective:
	//	traceStart=("trace" | "Trace") modelElement+=ModelElement conditionRHS=ConditionRHS? elementPattern="*"?;
	public TraceDirectiveElements getTraceDirectiveAccess() {
		return (pTraceDirective != null) ? pTraceDirective : (pTraceDirective = new TraceDirectiveElements());
	}
	
	public ParserRule getTraceDirectiveRule() {
		return getTraceDirectiveAccess().getRule();
	}

	//TraceCase:
	//	"tracecase" traceCaseName=ID "{" traceDirective+=TraceDirective* "}";
	public TraceCaseElements getTraceCaseAccess() {
		return (pTraceCase != null) ? pTraceCase : (pTraceCase = new TraceCaseElements());
	}
	
	public ParserRule getTraceCaseRule() {
		return getTraceCaseAccess().getRule();
	}

	//TraceRecord:
	//	("record" "(" objectBeingTraced=STRING ("," textOutput=ID)?) ")";
	public TraceRecordElements getTraceRecordAccess() {
		return (pTraceRecord != null) ? pTraceRecord : (pTraceRecord = new TraceRecordElements());
	}
	
	public ParserRule getTraceRecordRule() {
		return getTraceRecordAccess().getRule();
	}

	//TraceCondition:
	//	CompoundTraceCondition | SimpleTraceCondition;
	public TraceConditionElements getTraceConditionAccess() {
		return (pTraceCondition != null) ? pTraceCondition : (pTraceCondition = new TraceConditionElements());
	}
	
	public ParserRule getTraceConditionRule() {
		return getTraceConditionAccess().getRule();
	}

	//CompoundTraceCondition:
	//	operand=STRING;
	public CompoundTraceConditionElements getCompoundTraceConditionAccess() {
		return (pCompoundTraceCondition != null) ? pCompoundTraceCondition : (pCompoundTraceCondition = new CompoundTraceConditionElements());
	}
	
	public ParserRule getCompoundTraceConditionRule() {
		return getCompoundTraceConditionAccess().getRule();
	}

	//SimpleTraceCondition:
	//	lhs=ModelElement conditionRHS=ConditionRHS;
	public SimpleTraceConditionElements getSimpleTraceConditionAccess() {
		return (pSimpleTraceCondition != null) ? pSimpleTraceCondition : (pSimpleTraceCondition = new SimpleTraceConditionElements());
	}
	
	public ParserRule getSimpleTraceConditionRule() {
		return getSimpleTraceConditionAccess().getRule();
	}

	//ConditionRHS:
	//	operand=ComparisonOperator value=PrimitiveType;
	public ConditionRHSElements getConditionRHSAccess() {
		return (pConditionRHS != null) ? pConditionRHS : (pConditionRHS = new ConditionRHSElements());
	}
	
	public ParserRule getConditionRHSRule() {
		return getConditionRHSAccess().getRule();
	}

	//ModelElement:
	//	(executeOnEntry?="entry" | executeOnExit?="exit" | cflow?="cflow")? aMethod=ID "()" | attribute=[UmpleAttribute];
	public ModelElementElements getModelElementAccess() {
		return (pModelElement != null) ? pModelElement : (pModelElement = new ModelElementElements());
	}
	
	public ParserRule getModelElementRule() {
		return getModelElementAccess().getRule();
	}

	//ComparisonOperator returns ecore::EString:
	//	">" | "<" | "==" | ">=" | "<=";
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return (pComparisonOperator != null) ? pComparisonOperator : (pComparisonOperator = new ComparisonOperatorElements());
	}
	
	public ParserRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}

	//TraceMechanism:
	//	"TraceUsing" traceMechanism=ID ";";
	public TraceMechanismElements getTraceMechanismAccess() {
		return (pTraceMechanism != null) ? pTraceMechanism : (pTraceMechanism = new TraceMechanismElements());
	}
	
	public ParserRule getTraceMechanismRule() {
		return getTraceMechanismAccess().getRule();
	}

	/// *
	//PropertyTraceDirective:
	//	"trace" (executeOnEntry?='entry' |executeOnExit?='exit' | cflow?='cflow' )? modelElement+=ModelElement (elementPattern='*')? ('for' repeats=INT 'during' duration=INT (unite=ID))?  
	//	("execute" ((codeToExecute=STRING | traceRecord+=TraceRecord) |  ('{' traceRecord+=TraceRecord (","  traceRecord+=TraceRecord)*) '}') )?
	//	('where' traceCondition=TraceCondition)?
	//	';';
	// * /// END OF TRACEDIRECTIVE SECTION
	/// ** EXPRESSIONS (JAVA and UMPLE)
	// *	START
	// *	Based on http://www.antlr.org/grammar/1152141644268/Java.g
	// *  The following section is based on the above grammar because, like any ANTLR grammar, Xtext must
	// *	have no left-side recursion.
	// ** /block:
	//	"{" blocks+=blockStatement* "}";
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//parExpression:
	//	"(" expression ")";
	public ParExpressionElements getParExpressionAccess() {
		return (pParExpression != null) ? pParExpression : (pParExpression = new ParExpressionElements());
	}
	
	public ParserRule getParExpressionRule() {
		return getParExpressionAccess().getRule();
	}

	//assignmentOperator returns ecore::EString:
	//	"=" | "+=" | "-=";
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return (pAssignmentOperator != null) ? pAssignmentOperator : (pAssignmentOperator = new AssignmentOperatorElements());
	}
	
	public ParserRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}

	//expressionList:
	//	expressions+=expression ("," expressions+=expression)*;
	public ExpressionListElements getExpressionListAccess() {
		return (pExpressionList != null) ? pExpressionList : (pExpressionList = new ExpressionListElements());
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}

	//expression:
	//	expression1=conditionalExpression (assignmentOperator expression2=expression)?;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//conditionalExpression:
	//	expression1=conditionalOrExpression ("?" expression2=expression ":" expression3=expression)?;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return (pConditionalExpression != null) ? pConditionalExpression : (pConditionalExpression = new ConditionalExpressionElements());
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	//conditionalOrExpression:
	//	expression1=conditionalAndExpression ("||" expressionRest+=conditionalAndExpression)*;
	public ConditionalOrExpressionElements getConditionalOrExpressionAccess() {
		return (pConditionalOrExpression != null) ? pConditionalOrExpression : (pConditionalOrExpression = new ConditionalOrExpressionElements());
	}
	
	public ParserRule getConditionalOrExpressionRule() {
		return getConditionalOrExpressionAccess().getRule();
	}

	//conditionalAndExpression:
	//	expression1=equalityExpression ("&&" expressionRest+=equalityExpression)*;
	public ConditionalAndExpressionElements getConditionalAndExpressionAccess() {
		return (pConditionalAndExpression != null) ? pConditionalAndExpression : (pConditionalAndExpression = new ConditionalAndExpressionElements());
	}
	
	public ParserRule getConditionalAndExpressionRule() {
		return getConditionalAndExpressionAccess().getRule();
	}

	//equalityExpression:
	//	expression1=relationalExpression (("==" | "!=") expressionRest+=relationalExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return (pEqualityExpression != null) ? pEqualityExpression : (pEqualityExpression = new EqualityExpressionElements());
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//relationalExpression:
	//	expression1=additiveExpression (relationalOp expressionRest+=additiveExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//relationalOp returns ecore::EString:
	//	"<=" | "<" | ">=" | ">";
	public RelationalOpElements getRelationalOpAccess() {
		return (pRelationalOp != null) ? pRelationalOp : (pRelationalOp = new RelationalOpElements());
	}
	
	public ParserRule getRelationalOpRule() {
		return getRelationalOpAccess().getRule();
	}

	//additiveExpression:
	//	expression1=multiplicativeExpression (("+" | "-") expressionRest+=multiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//multiplicativeExpression:
	//	expression1=unaryExpression (("*" | "/" | "%") expressionRest+=unaryExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//unaryExpression:
	//	"+" exp1=unaryExpression | "-" exp1=unaryExpression | "++" exp1=unaryExpression | "--" exp1=unaryExpression |
	//	exp2=unaryExpressionNotPlusMinus;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//unaryExpressionNotPlusMinus:
	//	"~" unaryExpression | "!" unaryExpression | primary ("++" | "--")?;
	public UnaryExpressionNotPlusMinusElements getUnaryExpressionNotPlusMinusAccess() {
		return (pUnaryExpressionNotPlusMinus != null) ? pUnaryExpressionNotPlusMinus : (pUnaryExpressionNotPlusMinus = new UnaryExpressionNotPlusMinusElements());
	}
	
	public ParserRule getUnaryExpressionNotPlusMinusRule() {
		return getUnaryExpressionNotPlusMinusAccess().getRule();
	}

	//primary:
	//	parExpression | literal;
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//literal:
	//	INT | DOUBLE | STRING | extendedID | javaFunctionCall | "true" | "TRUE" | "false" | "FALSE";
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	/// ** EXPRESSIONS
	// *	END
	// ** ///LANGUAGE DEPENDENT
	////Expand list with more options
	//functionCall:
	//	javaFunctionCall;
	public FunctionCallElements getFunctionCallAccess() {
		return (pFunctionCall != null) ? pFunctionCall : (pFunctionCall = new FunctionCallElements());
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//functionDeclaration:
	//	java=javaFunctionDeclaration;
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return (pFunctionDeclaration != null) ? pFunctionDeclaration : (pFunctionDeclaration = new FunctionDeclarationElements());
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//functionDefinition:
	//	java=javaFunctionDefinition;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return (pFunctionDefinition != null) ? pFunctionDefinition : (pFunctionDefinition = new FunctionDefinitionElements());
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	/// ** JAVA NATIVE CODE
	// *	START
	// *	Based on http://www.antlr.org/grammar/1152141644268/Java.g
	// *  The following section is based on the above grammar because, like any ANTLR grammar, Xtext must
	// *	have no left-side recursion.
	// ** ///Methods
	//javaFunctionDeclaration:
	//	"static"? ("public" | "private" | "protected") (returnType=attributeType | "void" | referenceType=ID) name=ID ("("
	//	(argList+=attributeType argListID+=extendedID ("," argList+=attributeType argListID+=extendedID)*)? ")" | "()");
	public JavaFunctionDeclarationElements getJavaFunctionDeclarationAccess() {
		return (pJavaFunctionDeclaration != null) ? pJavaFunctionDeclaration : (pJavaFunctionDeclaration = new JavaFunctionDeclarationElements());
	}
	
	public ParserRule getJavaFunctionDeclarationRule() {
		return getJavaFunctionDeclarationAccess().getRule();
	}

	//javaFunctionDefinition:
	//	decl=javaFunctionDeclaration code=block;
	public JavaFunctionDefinitionElements getJavaFunctionDefinitionAccess() {
		return (pJavaFunctionDefinition != null) ? pJavaFunctionDefinition : (pJavaFunctionDefinition = new JavaFunctionDefinitionElements());
	}
	
	public ParserRule getJavaFunctionDefinitionRule() {
		return getJavaFunctionDefinitionAccess().getRule();
	}

	//javaFunctionCall:
	//	name=extendedID ("(" args=expressionList? ")" | "()");
	public JavaFunctionCallElements getJavaFunctionCallAccess() {
		return (pJavaFunctionCall != null) ? pJavaFunctionCall : (pJavaFunctionCall = new JavaFunctionCallElements());
	}
	
	public ParserRule getJavaFunctionCallRule() {
		return getJavaFunctionCallAccess().getRule();
	}

	//blockStatement:
	//	statement | localVariableDeclarationStatement;
	public BlockStatementElements getBlockStatementAccess() {
		return (pBlockStatement != null) ? pBlockStatement : (pBlockStatement = new BlockStatementElements());
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}

	//localVariableDeclarationStatement:
	//	localVariableDeclaration ";";
	public LocalVariableDeclarationStatementElements getLocalVariableDeclarationStatementAccess() {
		return (pLocalVariableDeclarationStatement != null) ? pLocalVariableDeclarationStatement : (pLocalVariableDeclarationStatement = new LocalVariableDeclarationStatementElements());
	}
	
	public ParserRule getLocalVariableDeclarationStatementRule() {
		return getLocalVariableDeclarationStatementAccess().getRule();
	}

	//localVariableDeclaration:
	//	type=attributeType dec=variableDeclarators;
	public LocalVariableDeclarationElements getLocalVariableDeclarationAccess() {
		return (pLocalVariableDeclaration != null) ? pLocalVariableDeclaration : (pLocalVariableDeclaration = new LocalVariableDeclarationElements());
	}
	
	public ParserRule getLocalVariableDeclarationRule() {
		return getLocalVariableDeclarationAccess().getRule();
	}

	//variableDeclarators:
	//	vd+=variableDeclarator ("," vd+=variableDeclarator)*;
	public VariableDeclaratorsElements getVariableDeclaratorsAccess() {
		return (pVariableDeclarators != null) ? pVariableDeclarators : (pVariableDeclarators = new VariableDeclaratorsElements());
	}
	
	public ParserRule getVariableDeclaratorsRule() {
		return getVariableDeclaratorsAccess().getRule();
	}

	//variableDeclarator:
	//	name=extendedID ("=" exp=expression)?;
	public VariableDeclaratorElements getVariableDeclaratorAccess() {
		return (pVariableDeclarator != null) ? pVariableDeclarator : (pVariableDeclarator = new VariableDeclaratorElements());
	}
	
	public ParserRule getVariableDeclaratorRule() {
		return getVariableDeclaratorAccess().getRule();
	}

	//statement:
	//	block | "if" condition=parExpression state1=statement ("else" state2=statement)? | "for" "(" control=forControl ")"
	//	state=statement | "while" condition=parExpression state=statement | "return" retVal=expression? ";" | ";" | "break"
	//	";" | expression ";" | "try" tryBlock=block "catch" catchBlock=block;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//forControl:
	//	init=forInit? ";" condition=expression? ";" update=forUpdate?;
	public ForControlElements getForControlAccess() {
		return (pForControl != null) ? pForControl : (pForControl = new ForControlElements());
	}
	
	public ParserRule getForControlRule() {
		return getForControlAccess().getRule();
	}

	//forInit:
	//	expressions+=expression ("," expressions+=expression)* | localVariableDeclaration;
	public ForInitElements getForInitAccess() {
		return (pForInit != null) ? pForInit : (pForInit = new ForInitElements());
	}
	
	public ParserRule getForInitRule() {
		return getForInitAccess().getRule();
	}

	//forUpdate:
	//	expressionList;
	public ForUpdateElements getForUpdateAccess() {
		return (pForUpdate != null) ? pForUpdate : (pForUpdate = new ForUpdateElements());
	}
	
	public ParserRule getForUpdateRule() {
		return getForUpdateAccess().getRule();
	}

	////condictionalExpression covers all expressions except "="
	////See Expression section for details
	//attributeType returns ecore::EString:
	//	"Date" | "Time" | "Double" | "double" | "Integer" | "integer" | "int" | "Boolean" | "boolean" | "String" | "string";
	public AttributeTypeElements getAttributeTypeAccess() {
		return (pAttributeType != null) ? pAttributeType : (pAttributeType = new AttributeTypeElements());
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	/// ** JAVA NATIVE CODE
	// *	END
	// ** /// PHP CODE
	//phpFunction:
	//	"public" "function" name=ID codeblock=[phpBlock];
	public PhpFunctionElements getPhpFunctionAccess() {
		return (pPhpFunction != null) ? pPhpFunction : (pPhpFunction = new PhpFunctionElements());
	}
	
	public ParserRule getPhpFunctionRule() {
		return getPhpFunctionAccess().getRule();
	}

	//phpBlock:
	//	"{" code=STRING "}";
	public PhpBlockElements getPhpBlockAccess() {
		return (pPhpBlock != null) ? pPhpBlock : (pPhpBlock = new PhpBlockElements());
	}
	
	public ParserRule getPhpBlockRule() {
		return getPhpBlockAccess().getRule();
	}

	//// Ruby Code
	//rubyFunction returns ecore::EString:
	//	RUBY_FUNCTION;
	public RubyFunctionElements getRubyFunctionAccess() {
		return (pRubyFunction != null) ? pRubyFunction : (pRubyFunction = new RubyFunctionElements());
	}
	
	public ParserRule getRubyFunctionRule() {
		return getRubyFunctionAccess().getRule();
	}

	//// Terminals
	//terminal RUBY_FUNCTION:
	//	DEF->END;
	public TerminalRule getRUBY_FUNCTIONRule() {
		return (tRUBY_FUNCTION != null) ? tRUBY_FUNCTION : (tRUBY_FUNCTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RUBY_FUNCTION"));
	} 

	//terminal DEF:
	//	"def";
	public TerminalRule getDEFRule() {
		return (tDEF != null) ? tDEF : (tDEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DEF"));
	} 

	//terminal END:
	//	"end";
	public TerminalRule getENDRule() {
		return (tEND != null) ? tEND : (tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "END"));
	} 

	//extendedID returns ecore::EString:
	//	ID ("." ID)*;
	public ExtendedIDElements getExtendedIDAccess() {
		return (pExtendedID != null) ? pExtendedID : (pExtendedID = new ExtendedIDElements());
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//DOUBLE returns ecore::EString:
	//	INT "." INT;
	public DOUBLEElements getDOUBLEAccess() {
		return (pDOUBLE != null) ? pDOUBLE : (pDOUBLE = new DOUBLEElements());
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}

	//fileID returns ecore::EString:
	//	CHARS CHARS*;
	public FileIDElements getFileIDAccess() {
		return (pFileID != null) ? pFileID : (pFileID = new FileIDElements());
	}
	
	public ParserRule getFileIDRule() {
		return getFileIDAccess().getRule();
	}

	//CHARS returns ecore::EString:
	//	extendedID | INT;
	public CHARSElements getCHARSAccess() {
		return (pCHARS != null) ? pCHARS : (pCHARS = new CHARSElements());
	}
	
	public ParserRule getCHARSRule() {
		return getCHARSAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
