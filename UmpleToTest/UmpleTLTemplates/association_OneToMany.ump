class UmpleToTest {
    association_OneToMany <<!<</*association_OneToMany*/>><<#

  
  String relatedAv = av.getRelatedAssociation().getUmpleClass().getName();
  String buffName = "a" +uClass.getName();#>>
        		  
        		  /////// Association: -- <<=av.getRelatedAssociation().getMultiplicity().getRange()>> <<=av.getRelatedAssociation().getUmpleClass().getName()>> /////// 
        		  
        		  test create<<=uClass.getName()>>Without<<=av.getRelatedAssociation().getUmpleClass().getName()>> {        		  
        		  <<=gen.dependencyInjection(uClass)>>
        		  <<=uClass.getName()>> <<=gen.initiateClass(uClass)>>;
        		  
        		  assertTrue (a<<=uClass.getName()>>.numberOf<<=av.getName()>>()== 0);
        		  }
        		  
        		  
        		  
        		  test replace<<=uClass.getName()>>In<<=av.getRelatedAssociation().getUmpleClass().getName()>> { 
        		  
        		  <<=gen.dependencyInjection(uClass)>>        		          		  
        		  <<=uClass.getName()>> b<<=gen.initiateClass(uClass)>>;
        		  
        		  <<=gen.dependencyInjection(av.getRelatedAssociation().getUmpleClass())>>
        		  <<=relatedAv>> <<=gen.initiateClass(av.getRelatedAssociation().getUmpleClass())>>; 
        		  <<=relatedAv>> b<<=gen.initiateClass(av.getRelatedAssociation().getUmpleClass())>>;
        		  
        		  a<<=relatedAv>>.set<<=uClass.getName()>>(ba<<=buffName>>);
        		  assertEqual (ba<<=buffName>>, a<<=relatedAv>>.get<<=uClass.getName()>>());        		  
        		  assertTrue(ba<<=buffName>>.get<<=relatedAv>>(0) == a<<=relatedAv>> );
        		          		  
        		  }
        		  
        		  
        		  test remove<<=relatedAv>>In<<=uClass.getName()>> {
        		  
        		  <<=gen.dependencyInjection(uClass)>>
        		  <<=uClass.getName()>> <<=gen.initiateClass(uClass)>>;
        		  a<<=uClass.getName()>>.add<<=relatedAv>>(a<<=relatedAv>>);
        		  
        		  a<<=relatedAv>>.delete(); 
        		  assertEqual (a<<=uClass.getName()>>.get<<=av.getName().substring(0,(av.getName().length()-1))>>(0) == null);
        		  }
        		  
        		  
        		  //add to new B
        		  <<#buffName= "a"+av.getUmpleClass().getName();#>>
        		  test Add<<=av.getRelatedAssociation().getUmpleClass().getName()>>ToNew<<=uClass.getName()>> { 
        		  <<=av.getRelatedAssociation().getUmpleClass().getName()>> <<=buffName>> = new <<=av.getRelatedAssociation().getUmpleClass().getName()>>();
        		  <<=av.getRelatedAssociation().getUmpleClass().getName()>> <<=buffName>>2 = new <<=av.getRelatedAssociation().getUmpleClass().getName()>>();
      
        		  <<=av.getUmpleClass().getName()>> a<<=av.getUmpleClass().getName()>> = new <<=av.getUmpleClass().getName()>>();
        		  <<=buffName>>.add<<=av.getRelatedAssociation().getUmpleClass().getName()>>(a<<=av.getRelatedAssociation().getUmpleClass().getName()>>);
        		  <<=buffName>>.add<<=av.getRelatedAssociation().getUmpleClass().getName()>>(a<<=av.getRelatedAssociation().getUmpleClass().getName()>>2);  
        
        		  assertEqual(a<<=av.getRelatedAssociation().getUmpleClass().getName()>>2, <<=buffName>>.get<<=av.getRelatedAssociation().getUmpleClass().getName()>>(); 
        		  assertEqual (<<=buffName>>, a<<=av.getRelatedAssociation().getUmpleClass().getName()>>2.get<<=av.getUmpleClass().getName()>>(0));
        		  assertEqual (<<=buffName>>, a<<=av.getRelatedAssociation().getUmpleClass().getName()>>.getNumberOf<<=av.getUmpleClass().getName()>>s());
        		  }<<#
        		  
#>>!>>
}
