
class UmpleToTest {
    association_NNToMany <<!<</*association_NNToMany*/>><<#
/*
This file creates the necessary for Optional One To Many Association 
*/

  				  String buffName = "some" +uClass.getName();#>>
        		  /////// Association: -- <<=theirEnd.getMultiplicity().getRange()>> <<=theirEnd.getClassName()>> /////// 
        		  //create ... without ...
        		  Test Create<<=uClass.getName()>>Without<<=theirEnd.getClassName()>> {
        		  <<=uClass.getName()>> <<=buffName>> = new <<=uClass.getName()>>(); \n",,));
        		  AssertF (some<<=theirEnd.getClassName()>>.get<<=theirEnd.getRoleName().toUpperCase()>>()!= null);
        		  }
        		  //replace
        		  <<#buffName = "some"+theirEnd.getClassName();#>>
        		  Test Replace<<=theirEnd.getClassName()>>In<<=uClass.getName()>> { 
        		  
        		  <<=theirEnd.getClassName()>> <<=buffName>> = new <<=theirEnd.getClassName()>>(); 
        		  <<=theirEnd.getClassName()>> <<=buffName>>2 = new <<=theirEnd.getClassName()>>();
        		  <<=buffName>>.add<<=theirEnd.getClassName()>>(some<<=myEnd.getClassName()>>);
        		  AssertEqual (1, <<=buffName>>.getNumberOf<<=myEnd.getClassName()>>s());
        		  AssertEqual (1, <<=buffName>>.getNumberOf<<=myEnd.getClassName()>>s());
        		  some<<=myEnd.getClassName()>>.set<<=theirEnd.getClassName()>>(<<=buffName>>2);
        		  AssertEqual (some<<=myEnd.getClassName()>>, <<=buffName>>2.get<<=myEnd.getClassName()>>(0));
        		  }
        		  //delete
        		  Test Delete<<=theirEnd.getClassName()>> {
        		  // delete <<=theirEnd.getClassName()>> in <<=uClass.getName()>>
        		  <<=buffName>>2.delete(); 
        		  AssertEqual (null, <<=buffName>>2.get<<=myEnd.getClassName()>>(0));
        		  }
        		  //boundary test
        		  
        		  Test BoundaryTest {
        		  private int size = <<=theirEnd.getClassName()>>.getNumberOf<<=uClass.getName()>>s(); 
        		  AssertTrue ( size > <<=myEnd.getMultiplicity().getLowerBound()>> &&  size < <<=myEnd.getMultiplicity().getUpperBound()>>) 
        		  
        		  }
        		  
        		  
        		  }<<#
  
  
#>>!>>
}
